{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"_10.4 파이토치 RNN 분류 모델.ipynb의 사본","provenance":[{"file_id":"1i2jod5WMThCGDsg7e5o_dCOJ7sPQQD1r","timestamp":1603390116537}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"w7dUbyNVXcEf"},"source":["# 파이토치 RNN 분류 모델\n","- 코드 출처: https://tutorials.pytorch.kr/intermediate/char_rnn_classification_tutorial.html"]},{"cell_type":"code","metadata":{"id":"dB-d43kLYEAi","executionInfo":{"status":"ok","timestamp":1603793359291,"user_tz":-540,"elapsed":2313,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"846aec52-0f3a-44b0-f241-6224d53a5df0","colab":{"base_uri":"https://localhost:8080/","height":611}},"source":["!wget https://download.pytorch.org/tutorial/data.zip\n","!unzip data.zip"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2020-10-27 10:09:18--  https://download.pytorch.org/tutorial/data.zip\n","Resolving download.pytorch.org (download.pytorch.org)... 13.224.157.66, 13.224.157.8, 13.224.157.16, ...\n","Connecting to download.pytorch.org (download.pytorch.org)|13.224.157.66|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2882130 (2.7M) [application/zip]\n","Saving to: ‘data.zip’\n","\n","data.zip            100%[===================>]   2.75M  --.-KB/s    in 0.1s    \n","\n","2020-10-27 10:09:19 (21.8 MB/s) - ‘data.zip’ saved [2882130/2882130]\n","\n","Archive:  data.zip\n","   creating: data/\n","  inflating: data/eng-fra.txt        \n","   creating: data/names/\n","  inflating: data/names/Arabic.txt   \n","  inflating: data/names/Chinese.txt  \n","  inflating: data/names/Czech.txt    \n","  inflating: data/names/Dutch.txt    \n","  inflating: data/names/English.txt  \n","  inflating: data/names/French.txt   \n","  inflating: data/names/German.txt   \n","  inflating: data/names/Greek.txt    \n","  inflating: data/names/Irish.txt    \n","  inflating: data/names/Italian.txt  \n","  inflating: data/names/Japanese.txt  \n","  inflating: data/names/Korean.txt   \n","  inflating: data/names/Polish.txt   \n","  inflating: data/names/Portuguese.txt  \n","  inflating: data/names/Russian.txt  \n","  inflating: data/names/Scottish.txt  \n","  inflating: data/names/Spanish.txt  \n","  inflating: data/names/Vietnamese.txt  \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Vukqoa09LSZw"},"source":["이름: Ślusàrski"]},{"cell_type":"code","metadata":{"id":"2d1pQ-JeYKzw","executionInfo":{"status":"ok","timestamp":1603793359292,"user_tz":-540,"elapsed":2305,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"a30665b7-cfc1-4253-dd3d-417a75837d29","colab":{"base_uri":"https://localhost:8080/","height":73}},"source":["from io import open\n","import glob\n","import os\n","\n","def findFiles(path):\n","  return glob.glob(path)\n","\n","print(findFiles('data/names/*.txt'))\n","\n","import unicodedata\n","import string\n","\n","all_letters = string.ascii_letters + \" .,;'\"\n","n_letters = len(all_letters)\n","\n","def unicodeToAscii(s):\n","  return ''.join(\n","      c for c in unicodedata.normalize('NFD', s)\n","      if unicodedata.category(c) != 'Mn' and c in all_letters\n","  )\n","\n","print(unicodeToAscii('Ślusàrski'))\n","\n","category_lines = {}\n","all_categories = []\n","\n","def readlines(filename):\n","  lines = open(filename, encoding='utf-8').read().strip().split('\\n')\n","  return [unicodeToAscii(line) for line in lines]\n","\n","for filename in findFiles('data/names/*.txt'):\n","  category = os.path.splitext(os.path.basename(filename))[0]\n","  all_categories.append(category)\n","  lines = readlines(filename)\n","  category_lines[category] = lines\n","\n","n_categories = len(all_categories)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["['data/names/Scottish.txt', 'data/names/Spanish.txt', 'data/names/Portuguese.txt', 'data/names/Dutch.txt', 'data/names/German.txt', 'data/names/Polish.txt', 'data/names/Japanese.txt', 'data/names/Arabic.txt', 'data/names/French.txt', 'data/names/Czech.txt', 'data/names/Chinese.txt', 'data/names/English.txt', 'data/names/Russian.txt', 'data/names/Greek.txt', 'data/names/Vietnamese.txt', 'data/names/Italian.txt', 'data/names/Korean.txt', 'data/names/Irish.txt']\n","Slusarski\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o39feEPmYRdv","executionInfo":{"status":"ok","timestamp":1603793359293,"user_tz":-540,"elapsed":2298,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"fd0d6326-947a-40fc-9836-636dcbb12f95","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["print(category_lines['Korean'][:5])"],"execution_count":3,"outputs":[{"output_type":"stream","text":["['Ahn', 'Baik', 'Bang', 'Byon', 'Cha']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Mkjk05rwYUyx","executionInfo":{"status":"ok","timestamp":1603793363453,"user_tz":-540,"elapsed":6450,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"55326817-ff01-4548-8d4e-30843de07b79","colab":{"base_uri":"https://localhost:8080/","height":107}},"source":["import torch\n","\n","def letterToIndex(letter):\n","  return all_letters.find(letter)\n","\n","def letterToTensor(letter):\n","  tensor = torch.zeros(1, n_letters)\n","  tensor[0][letterToIndex(letter)] = 1\n","  return tensor\n","\n","def lineToTensor(line):\n","  tensor = torch.zeros(len(line), 1, n_letters)\n","  for li, letter, in enumerate(line):\n","    tensor[li][0][letterToIndex(letter)] = 1\n","  return tensor\n","\n","print(letterToTensor('J'))\n","\n","print(lineToTensor('Jones').size())"],"execution_count":4,"outputs":[{"output_type":"stream","text":["tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n","         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","         0., 0., 0.]])\n","torch.Size([5, 1, 57])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IPVvWrMHYelv"},"source":["## 신경망 생성\n","\n","- 모델 생성 방법 참고 : https://pytorch.org/tutorials/beginner/former_torchies/nnft_tutorial.html"]},{"cell_type":"code","metadata":{"id":"t6gKYokQYYZW","executionInfo":{"status":"ok","timestamp":1603793363454,"user_tz":-540,"elapsed":6449,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["import torch.nn as nn\n","\n","class RNN(nn.Module):\n","  def __init__(self, input_size, hidden_size, output_size):\n","    super(RNN, self).__init__()\n","\n","    self.hidden_size = hidden_size\n","\n","    self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n","    self.i2o = nn.Linear(input_size + hidden_size, output_size)\n","    self.softmax = nn.LogSoftmax(dim=1)\n","\n","  def forward(self, input, hidden):\n","    combined = torch.cat((input, hidden), 1)\n","    hidden = self.i2h(combined)\n","    output = self.i2o(combined)\n","    output = self.softmax(output)\n","    return output, hidden\n","  \n","  def initHidden(self):\n","    return torch.zeros(1, self.hidden_size)\n","\n","n_hidden = 128\n","rnn = RNN(n_letters, n_hidden, n_categories)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"wuFpzGrHYgBY","executionInfo":{"status":"ok","timestamp":1603793363455,"user_tz":-540,"elapsed":6443,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"e3ab9287-d158-46c4-b7bf-7c8081254f9d","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["input = letterToTensor('A')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output, next_hidden = rnn(input, hidden)\n","print(output)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["tensor([[-2.9099, -2.9034, -2.8067, -2.8366, -2.9330, -2.9466, -2.8637, -2.8972,\n","         -2.7921, -2.9192, -2.8560, -2.9741, -2.9499, -2.8939, -2.9071, -2.8502,\n","         -2.8755, -2.9329]], grad_fn=<LogSoftmaxBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wpGGzL2NYku2","executionInfo":{"status":"ok","timestamp":1603793363455,"user_tz":-540,"elapsed":6435,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"1ebb2d10-d1ca-477d-e101-7db85aff1eef","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["input = lineToTensor('Albert')\n","hidden = torch.zeros(1, n_hidden)\n","\n","output, next_hidden = rnn(input[0], hidden)\n","print(output)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["tensor([[-2.9099, -2.9034, -2.8067, -2.8366, -2.9330, -2.9466, -2.8637, -2.8972,\n","         -2.7921, -2.9192, -2.8560, -2.9741, -2.9499, -2.8939, -2.9071, -2.8502,\n","         -2.8755, -2.9329]], grad_fn=<LogSoftmaxBackward>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q3qAoF6BYrPW"},"source":["## 모델 학습\n","- 준비"]},{"cell_type":"code","metadata":{"id":"WNTCbv4aYoP2","executionInfo":{"status":"ok","timestamp":1603793363455,"user_tz":-540,"elapsed":6427,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"5cec9ac8-8ed1-4e2c-9b93-a8b6a2d89a51","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["def categoryFromOutput(output):\n","  top_n, top_i = output.topk(1)\n","  category_i = top_i[0].item()\n","  return all_categories[category_i], category_i\n","\n","print(categoryFromOutput(output))"],"execution_count":8,"outputs":[{"output_type":"stream","text":["('French', 8)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aanvL45oYs00","executionInfo":{"status":"ok","timestamp":1603793363456,"user_tz":-540,"elapsed":6420,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"7d604b54-dbac-478f-c66b-de5eb35108fb","colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["import random\n","\n","def randomChoice(l):\n","  return l[random.randint(0 ,len(l) -1)]\n","\n","def randomTrainingExample():\n","  category = randomChoice(all_categories)\n","  line = randomChoice(category_lines[category])\n","  category_tensor = torch.tensor([all_categories.index(category)], dtype=torch.long)\n","  line_tensor = lineToTensor(line)\n","  return category, line, category_tensor, line_tensor\n","\n","for i in range(10):\n","  category, line, category_tensor, line_tensor = randomTrainingExample()\n","  print(\"category: {} \\t line: {}\".format(category, line))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["category: Japanese \t line: Nemoto\n","category: Czech \t line: Michalovic\n","category: Italian \t line: Abramo\n","category: Spanish \t line: Rodriguez\n","category: Czech \t line: Stramba\n","category: Scottish \t line: Kelly\n","category: Korean \t line: Youn\n","category: Vietnamese \t line: To\n","category: Dutch \t line: Klerx\n","category: Irish \t line: Collins\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qVA-IZP3Yzz2"},"source":["## 손실함수"]},{"cell_type":"code","metadata":{"id":"Y98Uy0YPYwjY","executionInfo":{"status":"ok","timestamp":1603793363456,"user_tz":-540,"elapsed":6418,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["criterion = nn.NLLLoss()"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oDyQIe8lY_Vl"},"source":["## 모델 학습"]},{"cell_type":"code","metadata":{"id":"4vIcTqP8Y9lo","executionInfo":{"status":"ok","timestamp":1603793363457,"user_tz":-540,"elapsed":6417,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["learning_rate = 0.005\n","\n","def train(category_tensor, line_tensor):\n","  hidden = rnn.initHidden()\n","\n","  rnn.zero_grad()\n","\n","  for i in range(line_tensor.size()[0]):\n","    output, hidden = rnn(line_tensor[i], hidden)\n","\n","  loss = criterion(output, category_tensor)\n","  loss.backward()\n","\n","  for p in rnn.parameters():\n","    p.data.add_(p.grad.data, alpha=-learning_rate)\n","\n","  return output, loss.item()"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"DRDcSbrsZAK9","executionInfo":{"status":"ok","timestamp":1603793534334,"user_tz":-540,"elapsed":177288,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"82c42e95-8957-4ab5-e29a-74a468b4c9d2","colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["import time\n","import math\n","\n","n_iters = 100000\n","print_every = 5000\n","plot_every = 1000\n","\n","current_loss = 0\n","all_losses = []\n","\n","def timeSince(since):\n","  now= time.time()\n","  s = now - since\n","  m = math.floor(s / 60)\n","  s -= m * 60\n","  return '%dm %ds' %(m,s)\n","\n","start = time.time()\n","\n","for iter in range(1, n_iters + 1):\n","  category, line, category_tensor, line_tensor = randomTrainingExample()\n","  output, loss = train(category_tensor, line_tensor)\n","  current_loss += loss\n","\n","  if iter % print_every == 0:\n","    guess, guess_i = categoryFromOutput(output)\n","    correct = 'o' if guess == category else 'X (%s) ' % category\n","    print('%d %d%% (%s) %.4f %s / %s %s' %(iter, iter/n_iters * 100, timeSince(start), loss, line, guess, correct))\n","  \n","  if iter  % plot_every == 0:\n","    all_losses.append(current_loss / plot_every)\n","    current_loss = 0"],"execution_count":12,"outputs":[{"output_type":"stream","text":["5000 5% (0m 8s) 2.6407 Steere / Dutch X (English) \n","10000 10% (0m 16s) 2.4417 Gniewek / Czech X (Polish) \n","15000 15% (0m 25s) 2.0365 Carbone / French X (Italian) \n","20000 20% (0m 33s) 1.8369 Palmeiro / Italian X (Portuguese) \n","25000 25% (0m 41s) 1.4955 Livadin / Irish X (Russian) \n","30000 30% (0m 50s) 4.4442 Daty / English X (Russian) \n","35000 35% (0m 58s) 0.8413 Milligan / Irish o\n","40000 40% (1m 7s) 1.8926 Wright / French X (Scottish) \n","45000 45% (1m 15s) 1.4039 Terranova / Portuguese X (Italian) \n","50000 50% (1m 24s) 0.5397 Jedynak / Polish o\n","55000 55% (1m 32s) 3.0810 Hout / Chinese X (Dutch) \n","60000 60% (1m 41s) 0.1127 Mcgregor / Scottish o\n","65000 65% (1m 50s) 0.0872 Romeijnsen / Dutch o\n","70000 70% (1m 59s) 4.1732 Meinhardt / Portuguese X (German) \n","75000 75% (2m 7s) 0.7256 Patenaude / French o\n","80000 80% (2m 16s) 3.0952 Prill / English X (Czech) \n","85000 85% (2m 24s) 0.3227 Woo / Korean o\n","90000 90% (2m 33s) 3.0075 Simoes / Dutch X (Portuguese) \n","95000 95% (2m 42s) 1.2707 Nunez / Spanish o\n","100000 100% (2m 50s) 0.9246 Boyle / Scottish o\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cSwAjR6QZDRf","executionInfo":{"status":"ok","timestamp":1603793534335,"user_tz":-540,"elapsed":177280,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"f6a369f5-7961-4b4f-9a6e-ed27a6f63eee","colab":{"base_uri":"https://localhost:8080/","height":262}},"source":["import matplotlib.ticker as ticker\n","import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-white']\n",")\n","\n","plt.figure()\n","plt.plot(all_losses)\n","plt.show()"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"J0_2HyE3ZPZk"},"source":["## 모델 테스트"]},{"cell_type":"code","metadata":{"id":"MBVWJNmoZO8a","executionInfo":{"status":"ok","timestamp":1603793545512,"user_tz":-540,"elapsed":188449,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"3b740bdc-4b62-4eca-e877-be56e58450f5","colab":{"base_uri":"https://localhost:8080/","height":311}},"source":["confusion = torch.zeros(n_categories, n_categories)\n","n_confusion = 10000\n","\n","def evaluate(line_tensor):\n","  hidden = rnn.initHidden()\n","\n","  for i in range(line_tensor.size()[0]):\n","    output, hidden = rnn(line_tensor[i], hidden)\n","\n","  return output\n","\n","for i in range(n_confusion):\n","  category, line, category_tensor, line_tensor = randomTrainingExample()\n","  output = evaluate(line_tensor)\n","  guess, guess_i = categoryFromOutput(output)\n","  category_i = all_categories.index(category)\n","  confusion[category_i][guess_i] +=1\n","\n","for i in range(n_categories):\n","  confusion[i] = confusion[i] / confusion[i].sum()\n","\n","fig = plt.figure()\n","ax = fig.add_subplot(111)\n","cax = ax.matshow(confusion.numpy())\n","fig.colorbar(cax)\n","ax.set_xticklabels([''] + all_categories, rotation=90)\n","ax.set_yticklabels([''] + all_categories)\n","ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n","ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n","\n","plt.show()"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"AfjRYlioZV3o"},"source":["## 사용자 입력으로부터의 실행"]},{"cell_type":"code","metadata":{"id":"uteG1Je5ZQWg","executionInfo":{"status":"ok","timestamp":1603793545513,"user_tz":-540,"elapsed":188442,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"984de932-c8be-47ab-d160-7131fb1764f9","colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["def predict(input_line, n_predictions=3):\n","  print('\\n> %s' % input_line)\n","  with torch.no_grad():\n","    output = evaluate(lineToTensor(input_line))\n","\n","    topv, topi = output.topk(n_predictions, 1, True)\n","    predictions = []\n","\n","    for i in range(n_predictions):\n","      value = topv[0][i].item()\n","      category_index = topi[0][i].item()\n","      print('(%.2f) %s' % (value, all_categories[category_index]))\n","      predictions.append([value, all_categories[category_index]])\n","\n","predict('Jackson')\n","predict('Bill')\n","predict('Dovesky')\n","predict('Kim')"],"execution_count":15,"outputs":[{"output_type":"stream","text":["\n","> Jackson\n","(-0.06) Scottish\n","(-3.66) English\n","(-3.95) Russian\n","\n","> Bill\n","(-1.64) Irish\n","(-1.69) English\n","(-1.78) Scottish\n","\n","> Dovesky\n","(-0.42) Russian\n","(-1.48) Czech\n","(-3.13) English\n","\n","> Kim\n","(-0.94) Chinese\n","(-1.18) Korean\n","(-2.62) Russian\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"o1d212FgfZpY","executionInfo":{"status":"ok","timestamp":1603793545513,"user_tz":-540,"elapsed":188441,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":[""],"execution_count":15,"outputs":[]}]}