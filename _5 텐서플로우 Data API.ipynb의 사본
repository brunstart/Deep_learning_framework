{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"_5 텐서플로우 Data API.ipynb의 사본","provenance":[{"file_id":"1e6fesK9IzvQC6quTINflFonvBwzzlebl","timestamp":1603288892473}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"a3541f6e46ab4db19148a25df9867f25":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_77e5c500aa7b4057b5f82b54a5ce3cf2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_5dfe1826957b48cdbf77ecbc60b01552","IPY_MODEL_5ef631ca12114aab9354e008551efcb7"]}},"77e5c500aa7b4057b5f82b54a5ce3cf2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5dfe1826957b48cdbf77ecbc60b01552":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_278947b229f548309709f20a79502f48","_dom_classes":[],"description":"Dl Completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":4,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":4,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_915e856357214f779804d311b8b99f8e"}},"5ef631ca12114aab9354e008551efcb7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7a473c92124e40fd807153abe3735fdd","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 4/4 [00:00&lt;00:00,  5.38 file/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9bb91098a4cf46dfb8713d668e614c49"}},"278947b229f548309709f20a79502f48":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"915e856357214f779804d311b8b99f8e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7a473c92124e40fd807153abe3735fdd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"9bb91098a4cf46dfb8713d668e614c49":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9a37597d400b469488b979d9ec0404bd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_f2ca7bc1d32640f7b18faaaebba51e0b","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_510625d1abb1472e92ccf57007ed07c3","IPY_MODEL_9dead917d0fa4903b1f544b808ba2fab"]}},"f2ca7bc1d32640f7b18faaaebba51e0b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"510625d1abb1472e92ccf57007ed07c3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_28473fe7f41f49afb8b4cd49d5ba4c47","_dom_classes":[],"description":"Dl Completed...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_8783cfa380f144a593452a2e8b6a1341"}},"9dead917d0fa4903b1f544b808ba2fab":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_40bb1980052d48a7ab9a68184afb3b47","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 1/1 [00:05&lt;00:00,  5.90s/ url]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_02557e0d5b4740eca1543a084f0a0c3b"}},"28473fe7f41f49afb8b4cd49d5ba4c47":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"8783cfa380f144a593452a2e8b6a1341":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"40bb1980052d48a7ab9a68184afb3b47":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"02557e0d5b4740eca1543a084f0a0c3b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b708a5dc4c6445db82a56ea900f50423":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_a10991d721934f7293e35dc5b15394c7","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_51cd001d27ea48ec8bacae1c7c55dd62","IPY_MODEL_6004a6bcb8b946c2bf86f8453008e946"]}},"a10991d721934f7293e35dc5b15394c7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"51cd001d27ea48ec8bacae1c7c55dd62":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_909ce4503c13464a97609fa0c3a4a24d","_dom_classes":[],"description":"Dl Size...: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ba03da4141d3430b80d5d24d06fc8bab"}},"6004a6bcb8b946c2bf86f8453008e946":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2b2fba5b66b3472a9f7e79e280a633c9","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 80/80 [00:05&lt;00:00, 13.61 MiB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f845b14a1c1240a7af30145f519ca129"}},"909ce4503c13464a97609fa0c3a4a24d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"ba03da4141d3430b80d5d24d06fc8bab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2b2fba5b66b3472a9f7e79e280a633c9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f845b14a1c1240a7af30145f519ca129":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fbb425db458545e28cca3c4b001bbc17":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c140181ea17945769e0af94d56c2252e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_5216de79018e41278f35346fd766cfa4","IPY_MODEL_d07cf56c1d6148a181fdf11204914d65"]}},"c140181ea17945769e0af94d56c2252e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5216de79018e41278f35346fd766cfa4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_356769f6415d4a319b4ce97661c46380","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f31fc12db3e14e2e96212160d35492e5"}},"d07cf56c1d6148a181fdf11204914d65":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_267df4f239eb45a99dc68af94d803070","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 25000/0 [00:14&lt;00:00, 2918.48 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4f659601aa9e4c56a3f3a64daa9a1d8e"}},"356769f6415d4a319b4ce97661c46380":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f31fc12db3e14e2e96212160d35492e5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"267df4f239eb45a99dc68af94d803070":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4f659601aa9e4c56a3f3a64daa9a1d8e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ddbc9287565f4849804bf59dd5013a3b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_6f60005efbab46aa805573d29bf077ef","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_4cd773a000b64c11ad00c9ba2b47f399","IPY_MODEL_71bf832b8e2c4ffda88d082f6c66c554"]}},"6f60005efbab46aa805573d29bf077ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4cd773a000b64c11ad00c9ba2b47f399":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_84638ba98e2447c3a68c3d985d663db1","_dom_classes":[],"description":" 36%","_model_name":"FloatProgressModel","bar_style":"danger","max":25000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":8877,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_067e8a9dde1349de9b0dbcfab478121b"}},"71bf832b8e2c4ffda88d082f6c66c554":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1fcc05530d584cc5819270b494d50be5","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 8877/25000 [00:00&lt;00:00, 88769.24 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_957a10ba27244bc585ce25d3f7a80622"}},"84638ba98e2447c3a68c3d985d663db1":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"067e8a9dde1349de9b0dbcfab478121b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1fcc05530d584cc5819270b494d50be5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"957a10ba27244bc585ce25d3f7a80622":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"54d8830938a840d4a02496a3daf65a0b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c545726020c5435c94db34d59d4788a6","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_0f28f93eaa454d529de24b907fa8192f","IPY_MODEL_41cf7d2484da40af9c64a9289cc23179"]}},"c545726020c5435c94db34d59d4788a6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0f28f93eaa454d529de24b907fa8192f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_156ba126793b4531914b7a615e6e3d0a","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a611bb31ebdb4ab6a77e7d396bca185e"}},"41cf7d2484da40af9c64a9289cc23179":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_8378acde87e94f93b8c5d5b8311beca2","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 25000/0 [00:15&lt;00:00, 2961.23 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5ca49a1681044b0081c5edef50e9503c"}},"156ba126793b4531914b7a615e6e3d0a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"a611bb31ebdb4ab6a77e7d396bca185e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8378acde87e94f93b8c5d5b8311beca2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"5ca49a1681044b0081c5edef50e9503c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3e20334435b84b8ba64419c866dd429d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_15d2660ee67b4a22981e1e3c7665ea33","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_19589d3b3b4446d09e51603da6446568","IPY_MODEL_a46a562fedbb468fa31f1812f9143881"]}},"15d2660ee67b4a22981e1e3c7665ea33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"19589d3b3b4446d09e51603da6446568":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_6067b04f64a7446a93d2c2d46d088d54","_dom_classes":[],"description":" 31%","_model_name":"FloatProgressModel","bar_style":"danger","max":25000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":7782,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d2a438a3c1e44881a241db6198872bb5"}},"a46a562fedbb468fa31f1812f9143881":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c3de016212114eb4b38ce90b4ec5e4e8","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 7782/25000 [00:00&lt;00:00, 77818.59 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_97a0e370e5534ec48efb7684f0fd017e"}},"6067b04f64a7446a93d2c2d46d088d54":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"d2a438a3c1e44881a241db6198872bb5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c3de016212114eb4b38ce90b4ec5e4e8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"97a0e370e5534ec48efb7684f0fd017e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8098be3e627e43f18cfb867ad3e35fb0":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_3128f6bbdbd547d8ae995e1cdcaa50b5","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ef411a4e97b84a8597c48266266221c3","IPY_MODEL_b275bd33f5ea4424aee743f67fafbdab"]}},"3128f6bbdbd547d8ae995e1cdcaa50b5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ef411a4e97b84a8597c48266266221c3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_85eb4175e4b74c3bacc3912aa054d25d","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5950c3c9bf354a9c8033723404589652"}},"b275bd33f5ea4424aee743f67fafbdab":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c9dc9f7278cd463086dd48161b62f6f9","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 50000/0 [00:21&lt;00:00, 2952.24 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_8e3ce941883648a79b2740daf355161c"}},"85eb4175e4b74c3bacc3912aa054d25d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"5950c3c9bf354a9c8033723404589652":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c9dc9f7278cd463086dd48161b62f6f9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"8e3ce941883648a79b2740daf355161c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9ab9b397ac6645ce9328d727607f5497":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_996a6d38adce4d44a61b5578f2303f34","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_66ac00b2e8954905a16f585e109eb2f9","IPY_MODEL_bfb3417972d74ee2a32010b2894c9006"]}},"996a6d38adce4d44a61b5578f2303f34":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"66ac00b2e8954905a16f585e109eb2f9":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_3631a8408ef24fceb1fff993d4f6138b","_dom_classes":[],"description":" 97%","_model_name":"FloatProgressModel","bar_style":"danger","max":50000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":48592,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fe55d98a7b7a4c838302aa7fe7351176"}},"bfb3417972d74ee2a32010b2894c9006":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_be03c5fbb68148939b60bc7d5d7c94a9","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 48592/50000 [00:00&lt;00:00, 71984.40 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2a721af8262e488589fe3b48540d4f3c"}},"3631a8408ef24fceb1fff993d4f6138b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"fe55d98a7b7a4c838302aa7fe7351176":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"be03c5fbb68148939b60bc7d5d7c94a9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"2a721af8262e488589fe3b48540d4f3c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"b6y_p854RADv"},"source":["# Data API\n","\n","- `tf.data`: https://www.tensorflow.org/api_docs/python/tf/data\n","- `tf.data.datasets`\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wLm3D19CRAD0"},"source":["## tf.data.datasets"]},{"cell_type":"code","metadata":{"id":"A8Okua_SRAD1","executionInfo":{"status":"ok","timestamp":1603285614885,"user_tz":-540,"elapsed":2831,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["import tensorflow as tf\n","import tensorflow_datasets as tfds"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"jFpSl6Q0RAD4","executionInfo":{"status":"ok","timestamp":1603285614886,"user_tz":-540,"elapsed":2820,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"1ce103a5-5f41-472a-a20e-e431a7b696f4","colab":{"base_uri":"https://localhost:8080/","height":55}},"source":["builder = tfds.list_builders()\n","print(builder)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["['abstract_reasoning', 'aeslc', 'aflw2k3d', 'amazon_us_reviews', 'arc', 'bair_robot_pushing_small', 'beans', 'big_patent', 'bigearthnet', 'billsum', 'binarized_mnist', 'binary_alpha_digits', 'c4', 'caltech101', 'caltech_birds2010', 'caltech_birds2011', 'cars196', 'cassava', 'cats_vs_dogs', 'celeb_a', 'celeb_a_hq', 'cfq', 'chexpert', 'cifar10', 'cifar100', 'cifar10_1', 'cifar10_corrupted', 'citrus_leaves', 'cityscapes', 'civil_comments', 'clevr', 'cmaterdb', 'cnn_dailymail', 'coco', 'coil100', 'colorectal_histology', 'colorectal_histology_large', 'cos_e', 'curated_breast_imaging_ddsm', 'cycle_gan', 'deep_weeds', 'definite_pronoun_resolution', 'diabetic_retinopathy_detection', 'div2k', 'dmlab', 'downsampled_imagenet', 'dsprites', 'dtd', 'duke_ultrasound', 'dummy_dataset_shared_generator', 'dummy_mnist', 'emnist', 'eraser_multi_rc', 'esnli', 'eurosat', 'fashion_mnist', 'flic', 'flores', 'food101', 'gap', 'gigaword', 'glue', 'groove', 'higgs', 'horses_or_humans', 'i_naturalist2017', 'image_label_folder', 'imagenet2012', 'imagenet2012_corrupted', 'imagenet_resized', 'imagenette', 'imagewang', 'imdb_reviews', 'iris', 'kitti', 'kmnist', 'lfw', 'librispeech', 'librispeech_lm', 'libritts', 'lm1b', 'lost_and_found', 'lsun', 'malaria', 'math_dataset', 'mnist', 'mnist_corrupted', 'movie_rationales', 'moving_mnist', 'multi_news', 'multi_nli', 'multi_nli_mismatch', 'natural_questions', 'newsroom', 'nsynth', 'omniglot', 'open_images_v4', 'opinosis', 'oxford_flowers102', 'oxford_iiit_pet', 'para_crawl', 'patch_camelyon', 'pet_finder', 'places365_small', 'plant_leaves', 'plant_village', 'plantae_k', 'qa4mre', 'quickdraw_bitmap', 'reddit_tifu', 'resisc45', 'rock_paper_scissors', 'rock_you', 'scan', 'scene_parse150', 'scicite', 'scientific_papers', 'shapes3d', 'smallnorb', 'snli', 'so2sat', 'speech_commands', 'squad', 'stanford_dogs', 'stanford_online_products', 'starcraft_video', 'sun397', 'super_glue', 'svhn_cropped', 'ted_hrlr_translate', 'ted_multi_translate', 'tf_flowers', 'the300w_lp', 'tiny_shakespeare', 'titanic', 'trivia_qa', 'uc_merced', 'ucf101', 'vgg_face2', 'visual_domain_decathlon', 'voc', 'wider_face', 'wikihow', 'wikipedia', 'wmt14_translate', 'wmt15_translate', 'wmt16_translate', 'wmt17_translate', 'wmt18_translate', 'wmt19_translate', 'wmt_t2t_translate', 'wmt_translate', 'xnli', 'xsum', 'yelp_polarity_reviews']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U4cJeKxKRAD6","executionInfo":{"status":"ok","timestamp":1603285615912,"user_tz":-540,"elapsed":3844,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"b4ceaada-1422-4e62-df69-701b2852b996","colab":{"base_uri":"https://localhost:8080/","height":211,"referenced_widgets":["a3541f6e46ab4db19148a25df9867f25","77e5c500aa7b4057b5f82b54a5ce3cf2","5dfe1826957b48cdbf77ecbc60b01552","5ef631ca12114aab9354e008551efcb7","278947b229f548309709f20a79502f48","915e856357214f779804d311b8b99f8e","7a473c92124e40fd807153abe3735fdd","9bb91098a4cf46dfb8713d668e614c49"]}},"source":["data, info = tfds.load('mnist', with_info=True)\n","train_data, test_data = data['train'], data['test']"],"execution_count":3,"outputs":[{"output_type":"stream","text":["WARNING:absl:Dataset mnist is hosted on GCS. It will automatically be downloaded to your\n","local data directory. If you'd instead prefer to read directly from our public\n","GCS bucket (recommended if you're running on GCP), you can instead set\n","data_dir=gs://tfds-data/datasets.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["\u001b[1mDownloading and preparing dataset mnist/3.0.0 (download: 11.06 MiB, generated: Unknown size, total: 11.06 MiB) to /root/tensorflow_datasets/mnist/3.0.0...\u001b[0m\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a3541f6e46ab4db19148a25df9867f25","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Dl Completed...', max=4.0, style=ProgressStyle(descriptio…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","\u001b[1mDataset mnist downloaded and prepared to /root/tensorflow_datasets/mnist/3.0.0. Subsequent calls will reuse this data.\u001b[0m\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZSXRvxYDRAD8","executionInfo":{"status":"ok","timestamp":1603285615913,"user_tz":-540,"elapsed":3835,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"8ce19477-0dfd-4bb0-a324-1bb13aec6948","colab":{"base_uri":"https://localhost:8080/","height":467}},"source":["print(info)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["tfds.core.DatasetInfo(\n","    name='mnist',\n","    version=3.0.0,\n","    description='The MNIST database of handwritten digits.',\n","    homepage='http://yann.lecun.com/exdb/mnist/',\n","    features=FeaturesDict({\n","        'image': Image(shape=(28, 28, 1), dtype=tf.uint8),\n","        'label': ClassLabel(shape=(), dtype=tf.int64, num_classes=10),\n","    }),\n","    total_num_examples=70000,\n","    splits={\n","        'test': 10000,\n","        'train': 60000,\n","    },\n","    supervised_keys=('image', 'label'),\n","    citation=\"\"\"@article{lecun2010mnist,\n","      title={MNIST handwritten digit database},\n","      author={LeCun, Yann and Cortes, Corinna and Burges, CJ},\n","      journal={ATT Labs [Online]. Available: http://yann. lecun. com/exdb/mnist},\n","      volume={2},\n","      year={2010}\n","    }\"\"\",\n","    redistribution_info=,\n",")\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EW_RWRC1RAD-"},"source":["## tf.data\n","\n","- 생성\n","  - `from_tensor_slices()`: 개별 또는 다중 넘파이를 받고, 배치를 지원\n","\n","  - `from_tensors()`: 배치를 지원하지 않음\n","\n","  - `from_generator()`: 생성자 함수에서 입력을 취함\n","\n","- 변환\n","\n","  - `batch()`: 순차적으로 지정한 배치사이즈로 데이터셋을 분할\n","\n","  - `repeat()`: 데이터를 복제\n","\n","  - `shuffle()`: 데이터를 무작위로 섞음\n","\n","  - `map()`: 데이터에 함수를 적용\n","\n","  - `filter()`: 데이터를 거르고자 할 때 사용\n","- 반복\n","  - `next_batch = iterator.get_next()` 사용"]},{"cell_type":"markdown","metadata":{"id":"Jz1M2zg9RAD_"},"source":["### from_tensor_slices"]},{"cell_type":"code","metadata":{"id":"D9Y-gyRGRAD_","executionInfo":{"status":"ok","timestamp":1603285615914,"user_tz":-540,"elapsed":3834,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["import numpy as np"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-pSvv0RRAEB","executionInfo":{"status":"ok","timestamp":1603285615914,"user_tz":-540,"elapsed":3832,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["num_itmes = 20\n","num_list = np.arange(num_itmes)\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"qs6-sAjpRAED","executionInfo":{"status":"ok","timestamp":1603285615915,"user_tz":-540,"elapsed":3831,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["num_list_dataset = tf.data.Dataset.from_tensor_slices(num_list)"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"I04-tg10RAEE","executionInfo":{"status":"ok","timestamp":1603285615915,"user_tz":-540,"elapsed":3823,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"67acd49d-0865-47d1-db2a-900cfb42c913","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["num_list_dataset"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<TensorSliceDataset shapes: (), types: tf.int64>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"_qA36UduRAEG","executionInfo":{"status":"ok","timestamp":1603285616269,"user_tz":-540,"elapsed":4168,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"edeceda2-2a96-4210-a63f-f53c2c256908","colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["for item in num_list_dataset:\n","  print(item)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n","tf.Tensor(2, shape=(), dtype=int64)\n","tf.Tensor(3, shape=(), dtype=int64)\n","tf.Tensor(4, shape=(), dtype=int64)\n","tf.Tensor(5, shape=(), dtype=int64)\n","tf.Tensor(6, shape=(), dtype=int64)\n","tf.Tensor(7, shape=(), dtype=int64)\n","tf.Tensor(8, shape=(), dtype=int64)\n","tf.Tensor(9, shape=(), dtype=int64)\n","tf.Tensor(10, shape=(), dtype=int64)\n","tf.Tensor(11, shape=(), dtype=int64)\n","tf.Tensor(12, shape=(), dtype=int64)\n","tf.Tensor(13, shape=(), dtype=int64)\n","tf.Tensor(14, shape=(), dtype=int64)\n","tf.Tensor(15, shape=(), dtype=int64)\n","tf.Tensor(16, shape=(), dtype=int64)\n","tf.Tensor(17, shape=(), dtype=int64)\n","tf.Tensor(18, shape=(), dtype=int64)\n","tf.Tensor(19, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HHOOvavNRAEI"},"source":["### from_generator()\n","- 해당 클래스 메서드를 사용하면 생성자에서 데이터셋 생성 가능\n","- output_types, output_shapes 인수로 출력 자료형과 크기를 지정해주어야 함"]},{"cell_type":"code","metadata":{"id":"I67SOAWHRAEI","executionInfo":{"status":"ok","timestamp":1603285616269,"user_tz":-540,"elapsed":4158,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"0fbe9b40-5b1e-42ba-a20c-d68041e29c58","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["import itertools\n","def gen():\n","  for i in itertools.count(1):\n","    yield (i, [1] * i)\n","\n","dataset = tf.data.Dataset.from_generator(\n","    gen,\n","    (tf.int64, tf.int64),\n","    (tf.TensorShape([]), tf.TensorShape([None]))\n",")\n","\n","list(dataset.take(3).as_numpy_iterator())"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, array([1])), (2, array([1, 1])), (3, array([1, 1, 1]))]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"FRPznRn_RAEK","executionInfo":{"status":"error","timestamp":1603287270429,"user_tz":-540,"elapsed":1658309,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"a0bc1da8-63f3-4c18-9ea1-57db8c8b87fd","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for item in dataset:\n","  print(item)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["\u001b[1;30;43m스트리밍 출력 내용이 길어서 마지막 5000줄이 삭제되었습니다.\u001b[0m\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162143>, <tf.Tensor: shape=(162143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162144>, <tf.Tensor: shape=(162144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162145>, <tf.Tensor: shape=(162145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162146>, <tf.Tensor: shape=(162146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162147>, <tf.Tensor: shape=(162147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162148>, <tf.Tensor: shape=(162148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162149>, <tf.Tensor: shape=(162149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162150>, <tf.Tensor: shape=(162150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162151>, <tf.Tensor: shape=(162151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162152>, <tf.Tensor: shape=(162152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162153>, <tf.Tensor: shape=(162153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162154>, <tf.Tensor: shape=(162154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162155>, <tf.Tensor: shape=(162155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162156>, <tf.Tensor: shape=(162156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162157>, <tf.Tensor: shape=(162157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162158>, <tf.Tensor: shape=(162158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162159>, <tf.Tensor: shape=(162159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162160>, <tf.Tensor: shape=(162160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162161>, <tf.Tensor: shape=(162161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162162>, <tf.Tensor: shape=(162162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162163>, <tf.Tensor: shape=(162163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162164>, <tf.Tensor: shape=(162164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162165>, <tf.Tensor: shape=(162165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162166>, <tf.Tensor: shape=(162166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162167>, <tf.Tensor: shape=(162167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162168>, <tf.Tensor: shape=(162168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162169>, <tf.Tensor: shape=(162169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162170>, <tf.Tensor: shape=(162170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162171>, <tf.Tensor: shape=(162171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162172>, <tf.Tensor: shape=(162172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162173>, <tf.Tensor: shape=(162173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162174>, <tf.Tensor: shape=(162174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162175>, <tf.Tensor: shape=(162175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162176>, <tf.Tensor: shape=(162176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162177>, <tf.Tensor: shape=(162177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162178>, <tf.Tensor: shape=(162178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162179>, <tf.Tensor: shape=(162179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162180>, <tf.Tensor: shape=(162180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162181>, <tf.Tensor: shape=(162181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162182>, <tf.Tensor: shape=(162182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162183>, <tf.Tensor: shape=(162183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162184>, <tf.Tensor: shape=(162184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162185>, <tf.Tensor: shape=(162185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162186>, <tf.Tensor: shape=(162186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162187>, <tf.Tensor: shape=(162187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162188>, <tf.Tensor: shape=(162188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162189>, <tf.Tensor: shape=(162189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162190>, <tf.Tensor: shape=(162190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162191>, <tf.Tensor: shape=(162191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162192>, <tf.Tensor: shape=(162192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162193>, <tf.Tensor: shape=(162193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162194>, <tf.Tensor: shape=(162194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162195>, <tf.Tensor: shape=(162195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162196>, <tf.Tensor: shape=(162196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162197>, <tf.Tensor: shape=(162197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162198>, <tf.Tensor: shape=(162198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162199>, <tf.Tensor: shape=(162199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162200>, <tf.Tensor: shape=(162200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162201>, <tf.Tensor: shape=(162201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162202>, <tf.Tensor: shape=(162202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162203>, <tf.Tensor: shape=(162203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162204>, <tf.Tensor: shape=(162204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162205>, <tf.Tensor: shape=(162205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162206>, <tf.Tensor: shape=(162206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162207>, <tf.Tensor: shape=(162207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162208>, <tf.Tensor: shape=(162208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162209>, <tf.Tensor: shape=(162209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162210>, <tf.Tensor: shape=(162210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162211>, <tf.Tensor: shape=(162211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162212>, <tf.Tensor: shape=(162212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162213>, <tf.Tensor: shape=(162213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162214>, <tf.Tensor: shape=(162214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162215>, <tf.Tensor: shape=(162215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162216>, <tf.Tensor: shape=(162216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162217>, <tf.Tensor: shape=(162217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162218>, <tf.Tensor: shape=(162218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162219>, <tf.Tensor: shape=(162219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162220>, <tf.Tensor: shape=(162220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162221>, <tf.Tensor: shape=(162221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162222>, <tf.Tensor: shape=(162222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162223>, <tf.Tensor: shape=(162223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162224>, <tf.Tensor: shape=(162224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162225>, <tf.Tensor: shape=(162225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162226>, <tf.Tensor: shape=(162226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162227>, <tf.Tensor: shape=(162227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162228>, <tf.Tensor: shape=(162228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162229>, <tf.Tensor: shape=(162229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162230>, <tf.Tensor: shape=(162230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162231>, <tf.Tensor: shape=(162231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162232>, <tf.Tensor: shape=(162232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162233>, <tf.Tensor: shape=(162233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162234>, <tf.Tensor: shape=(162234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162235>, <tf.Tensor: shape=(162235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162236>, <tf.Tensor: shape=(162236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162237>, <tf.Tensor: shape=(162237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162238>, <tf.Tensor: shape=(162238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162239>, <tf.Tensor: shape=(162239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162240>, <tf.Tensor: shape=(162240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162241>, <tf.Tensor: shape=(162241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162242>, <tf.Tensor: shape=(162242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162243>, <tf.Tensor: shape=(162243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162244>, <tf.Tensor: shape=(162244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162245>, <tf.Tensor: shape=(162245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162246>, <tf.Tensor: shape=(162246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162247>, <tf.Tensor: shape=(162247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162248>, <tf.Tensor: shape=(162248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162249>, <tf.Tensor: shape=(162249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162250>, <tf.Tensor: shape=(162250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162251>, <tf.Tensor: shape=(162251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162252>, <tf.Tensor: shape=(162252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162253>, <tf.Tensor: shape=(162253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162254>, <tf.Tensor: shape=(162254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162255>, <tf.Tensor: shape=(162255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162256>, <tf.Tensor: shape=(162256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162257>, <tf.Tensor: shape=(162257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162258>, <tf.Tensor: shape=(162258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162259>, <tf.Tensor: shape=(162259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162260>, <tf.Tensor: shape=(162260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162261>, <tf.Tensor: shape=(162261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162262>, <tf.Tensor: shape=(162262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162263>, <tf.Tensor: shape=(162263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162264>, <tf.Tensor: shape=(162264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162265>, <tf.Tensor: shape=(162265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162266>, <tf.Tensor: shape=(162266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162267>, <tf.Tensor: shape=(162267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162268>, <tf.Tensor: shape=(162268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162269>, <tf.Tensor: shape=(162269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162270>, <tf.Tensor: shape=(162270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162271>, <tf.Tensor: shape=(162271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162272>, <tf.Tensor: shape=(162272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162273>, <tf.Tensor: shape=(162273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162274>, <tf.Tensor: shape=(162274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162275>, <tf.Tensor: shape=(162275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162276>, <tf.Tensor: shape=(162276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162277>, <tf.Tensor: shape=(162277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162278>, <tf.Tensor: shape=(162278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162279>, <tf.Tensor: shape=(162279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162280>, <tf.Tensor: shape=(162280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162281>, <tf.Tensor: shape=(162281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162282>, <tf.Tensor: shape=(162282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162283>, <tf.Tensor: shape=(162283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162284>, <tf.Tensor: shape=(162284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162285>, <tf.Tensor: shape=(162285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162286>, <tf.Tensor: shape=(162286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162287>, <tf.Tensor: shape=(162287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162288>, <tf.Tensor: shape=(162288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162289>, <tf.Tensor: shape=(162289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162290>, <tf.Tensor: shape=(162290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162291>, <tf.Tensor: shape=(162291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162292>, <tf.Tensor: shape=(162292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162293>, <tf.Tensor: shape=(162293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162294>, <tf.Tensor: shape=(162294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162295>, <tf.Tensor: shape=(162295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162296>, <tf.Tensor: shape=(162296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162297>, <tf.Tensor: shape=(162297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162298>, <tf.Tensor: shape=(162298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162299>, <tf.Tensor: shape=(162299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162300>, <tf.Tensor: shape=(162300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162301>, <tf.Tensor: shape=(162301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162302>, <tf.Tensor: shape=(162302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162303>, <tf.Tensor: shape=(162303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162304>, <tf.Tensor: shape=(162304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162305>, <tf.Tensor: shape=(162305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162306>, <tf.Tensor: shape=(162306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162307>, <tf.Tensor: shape=(162307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162308>, <tf.Tensor: shape=(162308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162309>, <tf.Tensor: shape=(162309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162310>, <tf.Tensor: shape=(162310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162311>, <tf.Tensor: shape=(162311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162312>, <tf.Tensor: shape=(162312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162313>, <tf.Tensor: shape=(162313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162314>, <tf.Tensor: shape=(162314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162315>, <tf.Tensor: shape=(162315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162316>, <tf.Tensor: shape=(162316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162317>, <tf.Tensor: shape=(162317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162318>, <tf.Tensor: shape=(162318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162319>, <tf.Tensor: shape=(162319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162320>, <tf.Tensor: shape=(162320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162321>, <tf.Tensor: shape=(162321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162322>, <tf.Tensor: shape=(162322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162323>, <tf.Tensor: shape=(162323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162324>, <tf.Tensor: shape=(162324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162325>, <tf.Tensor: shape=(162325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162326>, <tf.Tensor: shape=(162326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162327>, <tf.Tensor: shape=(162327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162328>, <tf.Tensor: shape=(162328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162329>, <tf.Tensor: shape=(162329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162330>, <tf.Tensor: shape=(162330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162331>, <tf.Tensor: shape=(162331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162332>, <tf.Tensor: shape=(162332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162333>, <tf.Tensor: shape=(162333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162334>, <tf.Tensor: shape=(162334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162335>, <tf.Tensor: shape=(162335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162336>, <tf.Tensor: shape=(162336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162337>, <tf.Tensor: shape=(162337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162338>, <tf.Tensor: shape=(162338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162339>, <tf.Tensor: shape=(162339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162340>, <tf.Tensor: shape=(162340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162341>, <tf.Tensor: shape=(162341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162342>, <tf.Tensor: shape=(162342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162343>, <tf.Tensor: shape=(162343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162344>, <tf.Tensor: shape=(162344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162345>, <tf.Tensor: shape=(162345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162346>, <tf.Tensor: shape=(162346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162347>, <tf.Tensor: shape=(162347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162348>, <tf.Tensor: shape=(162348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162349>, <tf.Tensor: shape=(162349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162350>, <tf.Tensor: shape=(162350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162351>, <tf.Tensor: shape=(162351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162352>, <tf.Tensor: shape=(162352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162353>, <tf.Tensor: shape=(162353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162354>, <tf.Tensor: shape=(162354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162355>, <tf.Tensor: shape=(162355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162356>, <tf.Tensor: shape=(162356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162357>, <tf.Tensor: shape=(162357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162358>, <tf.Tensor: shape=(162358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162359>, <tf.Tensor: shape=(162359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162360>, <tf.Tensor: shape=(162360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162361>, <tf.Tensor: shape=(162361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162362>, <tf.Tensor: shape=(162362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162363>, <tf.Tensor: shape=(162363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162364>, <tf.Tensor: shape=(162364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162365>, <tf.Tensor: shape=(162365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162366>, <tf.Tensor: shape=(162366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162367>, <tf.Tensor: shape=(162367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162368>, <tf.Tensor: shape=(162368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162369>, <tf.Tensor: shape=(162369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162370>, <tf.Tensor: shape=(162370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162371>, <tf.Tensor: shape=(162371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162372>, <tf.Tensor: shape=(162372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162373>, <tf.Tensor: shape=(162373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162374>, <tf.Tensor: shape=(162374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162375>, <tf.Tensor: shape=(162375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162376>, <tf.Tensor: shape=(162376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162377>, <tf.Tensor: shape=(162377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162378>, <tf.Tensor: shape=(162378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162379>, <tf.Tensor: shape=(162379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162380>, <tf.Tensor: shape=(162380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162381>, <tf.Tensor: shape=(162381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162382>, <tf.Tensor: shape=(162382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162383>, <tf.Tensor: shape=(162383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162384>, <tf.Tensor: shape=(162384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162385>, <tf.Tensor: shape=(162385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162386>, <tf.Tensor: shape=(162386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162387>, <tf.Tensor: shape=(162387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162388>, <tf.Tensor: shape=(162388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162389>, <tf.Tensor: shape=(162389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162390>, <tf.Tensor: shape=(162390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162391>, <tf.Tensor: shape=(162391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162392>, <tf.Tensor: shape=(162392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162393>, <tf.Tensor: shape=(162393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162394>, <tf.Tensor: shape=(162394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162395>, <tf.Tensor: shape=(162395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162396>, <tf.Tensor: shape=(162396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162397>, <tf.Tensor: shape=(162397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162398>, <tf.Tensor: shape=(162398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162399>, <tf.Tensor: shape=(162399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162400>, <tf.Tensor: shape=(162400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162401>, <tf.Tensor: shape=(162401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162402>, <tf.Tensor: shape=(162402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162403>, <tf.Tensor: shape=(162403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162404>, <tf.Tensor: shape=(162404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162405>, <tf.Tensor: shape=(162405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162406>, <tf.Tensor: shape=(162406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162407>, <tf.Tensor: shape=(162407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162408>, <tf.Tensor: shape=(162408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162409>, <tf.Tensor: shape=(162409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162410>, <tf.Tensor: shape=(162410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162411>, <tf.Tensor: shape=(162411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162412>, <tf.Tensor: shape=(162412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162413>, <tf.Tensor: shape=(162413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162414>, <tf.Tensor: shape=(162414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162415>, <tf.Tensor: shape=(162415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162416>, <tf.Tensor: shape=(162416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162417>, <tf.Tensor: shape=(162417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162418>, <tf.Tensor: shape=(162418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162419>, <tf.Tensor: shape=(162419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162420>, <tf.Tensor: shape=(162420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162421>, <tf.Tensor: shape=(162421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162422>, <tf.Tensor: shape=(162422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162423>, <tf.Tensor: shape=(162423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162424>, <tf.Tensor: shape=(162424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162425>, <tf.Tensor: shape=(162425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162426>, <tf.Tensor: shape=(162426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162427>, <tf.Tensor: shape=(162427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162428>, <tf.Tensor: shape=(162428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162429>, <tf.Tensor: shape=(162429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162430>, <tf.Tensor: shape=(162430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162431>, <tf.Tensor: shape=(162431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162432>, <tf.Tensor: shape=(162432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162433>, <tf.Tensor: shape=(162433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162434>, <tf.Tensor: shape=(162434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162435>, <tf.Tensor: shape=(162435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162436>, <tf.Tensor: shape=(162436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162437>, <tf.Tensor: shape=(162437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162438>, <tf.Tensor: shape=(162438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162439>, <tf.Tensor: shape=(162439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162440>, <tf.Tensor: shape=(162440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162441>, <tf.Tensor: shape=(162441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162442>, <tf.Tensor: shape=(162442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162443>, <tf.Tensor: shape=(162443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162444>, <tf.Tensor: shape=(162444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162445>, <tf.Tensor: shape=(162445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162446>, <tf.Tensor: shape=(162446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162447>, <tf.Tensor: shape=(162447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162448>, <tf.Tensor: shape=(162448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162449>, <tf.Tensor: shape=(162449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162450>, <tf.Tensor: shape=(162450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162451>, <tf.Tensor: shape=(162451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162452>, <tf.Tensor: shape=(162452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162453>, <tf.Tensor: shape=(162453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162454>, <tf.Tensor: shape=(162454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162455>, <tf.Tensor: shape=(162455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162456>, <tf.Tensor: shape=(162456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162457>, <tf.Tensor: shape=(162457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162458>, <tf.Tensor: shape=(162458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162459>, <tf.Tensor: shape=(162459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162460>, <tf.Tensor: shape=(162460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162461>, <tf.Tensor: shape=(162461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162462>, <tf.Tensor: shape=(162462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162463>, <tf.Tensor: shape=(162463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162464>, <tf.Tensor: shape=(162464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162465>, <tf.Tensor: shape=(162465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162466>, <tf.Tensor: shape=(162466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162467>, <tf.Tensor: shape=(162467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162468>, <tf.Tensor: shape=(162468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162469>, <tf.Tensor: shape=(162469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162470>, <tf.Tensor: shape=(162470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162471>, <tf.Tensor: shape=(162471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162472>, <tf.Tensor: shape=(162472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162473>, <tf.Tensor: shape=(162473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162474>, <tf.Tensor: shape=(162474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162475>, <tf.Tensor: shape=(162475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162476>, <tf.Tensor: shape=(162476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162477>, <tf.Tensor: shape=(162477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162478>, <tf.Tensor: shape=(162478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162479>, <tf.Tensor: shape=(162479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162480>, <tf.Tensor: shape=(162480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162481>, <tf.Tensor: shape=(162481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162482>, <tf.Tensor: shape=(162482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162483>, <tf.Tensor: shape=(162483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162484>, <tf.Tensor: shape=(162484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162485>, <tf.Tensor: shape=(162485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162486>, <tf.Tensor: shape=(162486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162487>, <tf.Tensor: shape=(162487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162488>, <tf.Tensor: shape=(162488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162489>, <tf.Tensor: shape=(162489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162490>, <tf.Tensor: shape=(162490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162491>, <tf.Tensor: shape=(162491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162492>, <tf.Tensor: shape=(162492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162493>, <tf.Tensor: shape=(162493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162494>, <tf.Tensor: shape=(162494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162495>, <tf.Tensor: shape=(162495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162496>, <tf.Tensor: shape=(162496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162497>, <tf.Tensor: shape=(162497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162498>, <tf.Tensor: shape=(162498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162499>, <tf.Tensor: shape=(162499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162500>, <tf.Tensor: shape=(162500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162501>, <tf.Tensor: shape=(162501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162502>, <tf.Tensor: shape=(162502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162503>, <tf.Tensor: shape=(162503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162504>, <tf.Tensor: shape=(162504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162505>, <tf.Tensor: shape=(162505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162506>, <tf.Tensor: shape=(162506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162507>, <tf.Tensor: shape=(162507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162508>, <tf.Tensor: shape=(162508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162509>, <tf.Tensor: shape=(162509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162510>, <tf.Tensor: shape=(162510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162511>, <tf.Tensor: shape=(162511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162512>, <tf.Tensor: shape=(162512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162513>, <tf.Tensor: shape=(162513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162514>, <tf.Tensor: shape=(162514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162515>, <tf.Tensor: shape=(162515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162516>, <tf.Tensor: shape=(162516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162517>, <tf.Tensor: shape=(162517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162518>, <tf.Tensor: shape=(162518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162519>, <tf.Tensor: shape=(162519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162520>, <tf.Tensor: shape=(162520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162521>, <tf.Tensor: shape=(162521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162522>, <tf.Tensor: shape=(162522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162523>, <tf.Tensor: shape=(162523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162524>, <tf.Tensor: shape=(162524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162525>, <tf.Tensor: shape=(162525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162526>, <tf.Tensor: shape=(162526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162527>, <tf.Tensor: shape=(162527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162528>, <tf.Tensor: shape=(162528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162529>, <tf.Tensor: shape=(162529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162530>, <tf.Tensor: shape=(162530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162531>, <tf.Tensor: shape=(162531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162532>, <tf.Tensor: shape=(162532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162533>, <tf.Tensor: shape=(162533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162534>, <tf.Tensor: shape=(162534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162535>, <tf.Tensor: shape=(162535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162536>, <tf.Tensor: shape=(162536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162537>, <tf.Tensor: shape=(162537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162538>, <tf.Tensor: shape=(162538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162539>, <tf.Tensor: shape=(162539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162540>, <tf.Tensor: shape=(162540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162541>, <tf.Tensor: shape=(162541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162542>, <tf.Tensor: shape=(162542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162543>, <tf.Tensor: shape=(162543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162544>, <tf.Tensor: shape=(162544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162545>, <tf.Tensor: shape=(162545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162546>, <tf.Tensor: shape=(162546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162547>, <tf.Tensor: shape=(162547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162548>, <tf.Tensor: shape=(162548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162549>, <tf.Tensor: shape=(162549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162550>, <tf.Tensor: shape=(162550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162551>, <tf.Tensor: shape=(162551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162552>, <tf.Tensor: shape=(162552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162553>, <tf.Tensor: shape=(162553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162554>, <tf.Tensor: shape=(162554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162555>, <tf.Tensor: shape=(162555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162556>, <tf.Tensor: shape=(162556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162557>, <tf.Tensor: shape=(162557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162558>, <tf.Tensor: shape=(162558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162559>, <tf.Tensor: shape=(162559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162560>, <tf.Tensor: shape=(162560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162561>, <tf.Tensor: shape=(162561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162562>, <tf.Tensor: shape=(162562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162563>, <tf.Tensor: shape=(162563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162564>, <tf.Tensor: shape=(162564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162565>, <tf.Tensor: shape=(162565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162566>, <tf.Tensor: shape=(162566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162567>, <tf.Tensor: shape=(162567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162568>, <tf.Tensor: shape=(162568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162569>, <tf.Tensor: shape=(162569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162570>, <tf.Tensor: shape=(162570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162571>, <tf.Tensor: shape=(162571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162572>, <tf.Tensor: shape=(162572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162573>, <tf.Tensor: shape=(162573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162574>, <tf.Tensor: shape=(162574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162575>, <tf.Tensor: shape=(162575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162576>, <tf.Tensor: shape=(162576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162577>, <tf.Tensor: shape=(162577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162578>, <tf.Tensor: shape=(162578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162579>, <tf.Tensor: shape=(162579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162580>, <tf.Tensor: shape=(162580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162581>, <tf.Tensor: shape=(162581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162582>, <tf.Tensor: shape=(162582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162583>, <tf.Tensor: shape=(162583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162584>, <tf.Tensor: shape=(162584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162585>, <tf.Tensor: shape=(162585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162586>, <tf.Tensor: shape=(162586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162587>, <tf.Tensor: shape=(162587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162588>, <tf.Tensor: shape=(162588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162589>, <tf.Tensor: shape=(162589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162590>, <tf.Tensor: shape=(162590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162591>, <tf.Tensor: shape=(162591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162592>, <tf.Tensor: shape=(162592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162593>, <tf.Tensor: shape=(162593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162594>, <tf.Tensor: shape=(162594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162595>, <tf.Tensor: shape=(162595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162596>, <tf.Tensor: shape=(162596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162597>, <tf.Tensor: shape=(162597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162598>, <tf.Tensor: shape=(162598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162599>, <tf.Tensor: shape=(162599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162600>, <tf.Tensor: shape=(162600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162601>, <tf.Tensor: shape=(162601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162602>, <tf.Tensor: shape=(162602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162603>, <tf.Tensor: shape=(162603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162604>, <tf.Tensor: shape=(162604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162605>, <tf.Tensor: shape=(162605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162606>, <tf.Tensor: shape=(162606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162607>, <tf.Tensor: shape=(162607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162608>, <tf.Tensor: shape=(162608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162609>, <tf.Tensor: shape=(162609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162610>, <tf.Tensor: shape=(162610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162611>, <tf.Tensor: shape=(162611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162612>, <tf.Tensor: shape=(162612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162613>, <tf.Tensor: shape=(162613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162614>, <tf.Tensor: shape=(162614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162615>, <tf.Tensor: shape=(162615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162616>, <tf.Tensor: shape=(162616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162617>, <tf.Tensor: shape=(162617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162618>, <tf.Tensor: shape=(162618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162619>, <tf.Tensor: shape=(162619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162620>, <tf.Tensor: shape=(162620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162621>, <tf.Tensor: shape=(162621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162622>, <tf.Tensor: shape=(162622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162623>, <tf.Tensor: shape=(162623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162624>, <tf.Tensor: shape=(162624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162625>, <tf.Tensor: shape=(162625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162626>, <tf.Tensor: shape=(162626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162627>, <tf.Tensor: shape=(162627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162628>, <tf.Tensor: shape=(162628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162629>, <tf.Tensor: shape=(162629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162630>, <tf.Tensor: shape=(162630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162631>, <tf.Tensor: shape=(162631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162632>, <tf.Tensor: shape=(162632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162633>, <tf.Tensor: shape=(162633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162634>, <tf.Tensor: shape=(162634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162635>, <tf.Tensor: shape=(162635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162636>, <tf.Tensor: shape=(162636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162637>, <tf.Tensor: shape=(162637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162638>, <tf.Tensor: shape=(162638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162639>, <tf.Tensor: shape=(162639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162640>, <tf.Tensor: shape=(162640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162641>, <tf.Tensor: shape=(162641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162642>, <tf.Tensor: shape=(162642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162643>, <tf.Tensor: shape=(162643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162644>, <tf.Tensor: shape=(162644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162645>, <tf.Tensor: shape=(162645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162646>, <tf.Tensor: shape=(162646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162647>, <tf.Tensor: shape=(162647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162648>, <tf.Tensor: shape=(162648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162649>, <tf.Tensor: shape=(162649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162650>, <tf.Tensor: shape=(162650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162651>, <tf.Tensor: shape=(162651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162652>, <tf.Tensor: shape=(162652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162653>, <tf.Tensor: shape=(162653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162654>, <tf.Tensor: shape=(162654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162655>, <tf.Tensor: shape=(162655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162656>, <tf.Tensor: shape=(162656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162657>, <tf.Tensor: shape=(162657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162658>, <tf.Tensor: shape=(162658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162659>, <tf.Tensor: shape=(162659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162660>, <tf.Tensor: shape=(162660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162661>, <tf.Tensor: shape=(162661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162662>, <tf.Tensor: shape=(162662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162663>, <tf.Tensor: shape=(162663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162664>, <tf.Tensor: shape=(162664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162665>, <tf.Tensor: shape=(162665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162666>, <tf.Tensor: shape=(162666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162667>, <tf.Tensor: shape=(162667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162668>, <tf.Tensor: shape=(162668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162669>, <tf.Tensor: shape=(162669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162670>, <tf.Tensor: shape=(162670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162671>, <tf.Tensor: shape=(162671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162672>, <tf.Tensor: shape=(162672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162673>, <tf.Tensor: shape=(162673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162674>, <tf.Tensor: shape=(162674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162675>, <tf.Tensor: shape=(162675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162676>, <tf.Tensor: shape=(162676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162677>, <tf.Tensor: shape=(162677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162678>, <tf.Tensor: shape=(162678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162679>, <tf.Tensor: shape=(162679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162680>, <tf.Tensor: shape=(162680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162681>, <tf.Tensor: shape=(162681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162682>, <tf.Tensor: shape=(162682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162683>, <tf.Tensor: shape=(162683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162684>, <tf.Tensor: shape=(162684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162685>, <tf.Tensor: shape=(162685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162686>, <tf.Tensor: shape=(162686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162687>, <tf.Tensor: shape=(162687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162688>, <tf.Tensor: shape=(162688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162689>, <tf.Tensor: shape=(162689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162690>, <tf.Tensor: shape=(162690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162691>, <tf.Tensor: shape=(162691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162692>, <tf.Tensor: shape=(162692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162693>, <tf.Tensor: shape=(162693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162694>, <tf.Tensor: shape=(162694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162695>, <tf.Tensor: shape=(162695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162696>, <tf.Tensor: shape=(162696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162697>, <tf.Tensor: shape=(162697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162698>, <tf.Tensor: shape=(162698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162699>, <tf.Tensor: shape=(162699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162700>, <tf.Tensor: shape=(162700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162701>, <tf.Tensor: shape=(162701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162702>, <tf.Tensor: shape=(162702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162703>, <tf.Tensor: shape=(162703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162704>, <tf.Tensor: shape=(162704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162705>, <tf.Tensor: shape=(162705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162706>, <tf.Tensor: shape=(162706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162707>, <tf.Tensor: shape=(162707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162708>, <tf.Tensor: shape=(162708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162709>, <tf.Tensor: shape=(162709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162710>, <tf.Tensor: shape=(162710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162711>, <tf.Tensor: shape=(162711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162712>, <tf.Tensor: shape=(162712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162713>, <tf.Tensor: shape=(162713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162714>, <tf.Tensor: shape=(162714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162715>, <tf.Tensor: shape=(162715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162716>, <tf.Tensor: shape=(162716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162717>, <tf.Tensor: shape=(162717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162718>, <tf.Tensor: shape=(162718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162719>, <tf.Tensor: shape=(162719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162720>, <tf.Tensor: shape=(162720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162721>, <tf.Tensor: shape=(162721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162722>, <tf.Tensor: shape=(162722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162723>, <tf.Tensor: shape=(162723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162724>, <tf.Tensor: shape=(162724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162725>, <tf.Tensor: shape=(162725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162726>, <tf.Tensor: shape=(162726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162727>, <tf.Tensor: shape=(162727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162728>, <tf.Tensor: shape=(162728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162729>, <tf.Tensor: shape=(162729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162730>, <tf.Tensor: shape=(162730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162731>, <tf.Tensor: shape=(162731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162732>, <tf.Tensor: shape=(162732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162733>, <tf.Tensor: shape=(162733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162734>, <tf.Tensor: shape=(162734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162735>, <tf.Tensor: shape=(162735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162736>, <tf.Tensor: shape=(162736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162737>, <tf.Tensor: shape=(162737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162738>, <tf.Tensor: shape=(162738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162739>, <tf.Tensor: shape=(162739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162740>, <tf.Tensor: shape=(162740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162741>, <tf.Tensor: shape=(162741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162742>, <tf.Tensor: shape=(162742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162743>, <tf.Tensor: shape=(162743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162744>, <tf.Tensor: shape=(162744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162745>, <tf.Tensor: shape=(162745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162746>, <tf.Tensor: shape=(162746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162747>, <tf.Tensor: shape=(162747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162748>, <tf.Tensor: shape=(162748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162749>, <tf.Tensor: shape=(162749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162750>, <tf.Tensor: shape=(162750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162751>, <tf.Tensor: shape=(162751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162752>, <tf.Tensor: shape=(162752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162753>, <tf.Tensor: shape=(162753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162754>, <tf.Tensor: shape=(162754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162755>, <tf.Tensor: shape=(162755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162756>, <tf.Tensor: shape=(162756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162757>, <tf.Tensor: shape=(162757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162758>, <tf.Tensor: shape=(162758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162759>, <tf.Tensor: shape=(162759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162760>, <tf.Tensor: shape=(162760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162761>, <tf.Tensor: shape=(162761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162762>, <tf.Tensor: shape=(162762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162763>, <tf.Tensor: shape=(162763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162764>, <tf.Tensor: shape=(162764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162765>, <tf.Tensor: shape=(162765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162766>, <tf.Tensor: shape=(162766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162767>, <tf.Tensor: shape=(162767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162768>, <tf.Tensor: shape=(162768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162769>, <tf.Tensor: shape=(162769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162770>, <tf.Tensor: shape=(162770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162771>, <tf.Tensor: shape=(162771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162772>, <tf.Tensor: shape=(162772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162773>, <tf.Tensor: shape=(162773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162774>, <tf.Tensor: shape=(162774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162775>, <tf.Tensor: shape=(162775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162776>, <tf.Tensor: shape=(162776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162777>, <tf.Tensor: shape=(162777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162778>, <tf.Tensor: shape=(162778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162779>, <tf.Tensor: shape=(162779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162780>, <tf.Tensor: shape=(162780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162781>, <tf.Tensor: shape=(162781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162782>, <tf.Tensor: shape=(162782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162783>, <tf.Tensor: shape=(162783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162784>, <tf.Tensor: shape=(162784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162785>, <tf.Tensor: shape=(162785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162786>, <tf.Tensor: shape=(162786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162787>, <tf.Tensor: shape=(162787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162788>, <tf.Tensor: shape=(162788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162789>, <tf.Tensor: shape=(162789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162790>, <tf.Tensor: shape=(162790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162791>, <tf.Tensor: shape=(162791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162792>, <tf.Tensor: shape=(162792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162793>, <tf.Tensor: shape=(162793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162794>, <tf.Tensor: shape=(162794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162795>, <tf.Tensor: shape=(162795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162796>, <tf.Tensor: shape=(162796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162797>, <tf.Tensor: shape=(162797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162798>, <tf.Tensor: shape=(162798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162799>, <tf.Tensor: shape=(162799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162800>, <tf.Tensor: shape=(162800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162801>, <tf.Tensor: shape=(162801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162802>, <tf.Tensor: shape=(162802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162803>, <tf.Tensor: shape=(162803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162804>, <tf.Tensor: shape=(162804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162805>, <tf.Tensor: shape=(162805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162806>, <tf.Tensor: shape=(162806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162807>, <tf.Tensor: shape=(162807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162808>, <tf.Tensor: shape=(162808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162809>, <tf.Tensor: shape=(162809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162810>, <tf.Tensor: shape=(162810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162811>, <tf.Tensor: shape=(162811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162812>, <tf.Tensor: shape=(162812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162813>, <tf.Tensor: shape=(162813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162814>, <tf.Tensor: shape=(162814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162815>, <tf.Tensor: shape=(162815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162816>, <tf.Tensor: shape=(162816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162817>, <tf.Tensor: shape=(162817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162818>, <tf.Tensor: shape=(162818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162819>, <tf.Tensor: shape=(162819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162820>, <tf.Tensor: shape=(162820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162821>, <tf.Tensor: shape=(162821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162822>, <tf.Tensor: shape=(162822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162823>, <tf.Tensor: shape=(162823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162824>, <tf.Tensor: shape=(162824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162825>, <tf.Tensor: shape=(162825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162826>, <tf.Tensor: shape=(162826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162827>, <tf.Tensor: shape=(162827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162828>, <tf.Tensor: shape=(162828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162829>, <tf.Tensor: shape=(162829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162830>, <tf.Tensor: shape=(162830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162831>, <tf.Tensor: shape=(162831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162832>, <tf.Tensor: shape=(162832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162833>, <tf.Tensor: shape=(162833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162834>, <tf.Tensor: shape=(162834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162835>, <tf.Tensor: shape=(162835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162836>, <tf.Tensor: shape=(162836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162837>, <tf.Tensor: shape=(162837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162838>, <tf.Tensor: shape=(162838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162839>, <tf.Tensor: shape=(162839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162840>, <tf.Tensor: shape=(162840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162841>, <tf.Tensor: shape=(162841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162842>, <tf.Tensor: shape=(162842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162843>, <tf.Tensor: shape=(162843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162844>, <tf.Tensor: shape=(162844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162845>, <tf.Tensor: shape=(162845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162846>, <tf.Tensor: shape=(162846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162847>, <tf.Tensor: shape=(162847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162848>, <tf.Tensor: shape=(162848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162849>, <tf.Tensor: shape=(162849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162850>, <tf.Tensor: shape=(162850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162851>, <tf.Tensor: shape=(162851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162852>, <tf.Tensor: shape=(162852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162853>, <tf.Tensor: shape=(162853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162854>, <tf.Tensor: shape=(162854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162855>, <tf.Tensor: shape=(162855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162856>, <tf.Tensor: shape=(162856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162857>, <tf.Tensor: shape=(162857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162858>, <tf.Tensor: shape=(162858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162859>, <tf.Tensor: shape=(162859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162860>, <tf.Tensor: shape=(162860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162861>, <tf.Tensor: shape=(162861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162862>, <tf.Tensor: shape=(162862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162863>, <tf.Tensor: shape=(162863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162864>, <tf.Tensor: shape=(162864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162865>, <tf.Tensor: shape=(162865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162866>, <tf.Tensor: shape=(162866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162867>, <tf.Tensor: shape=(162867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162868>, <tf.Tensor: shape=(162868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162869>, <tf.Tensor: shape=(162869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162870>, <tf.Tensor: shape=(162870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162871>, <tf.Tensor: shape=(162871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162872>, <tf.Tensor: shape=(162872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162873>, <tf.Tensor: shape=(162873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162874>, <tf.Tensor: shape=(162874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162875>, <tf.Tensor: shape=(162875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162876>, <tf.Tensor: shape=(162876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162877>, <tf.Tensor: shape=(162877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162878>, <tf.Tensor: shape=(162878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162879>, <tf.Tensor: shape=(162879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162880>, <tf.Tensor: shape=(162880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162881>, <tf.Tensor: shape=(162881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162882>, <tf.Tensor: shape=(162882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162883>, <tf.Tensor: shape=(162883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162884>, <tf.Tensor: shape=(162884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162885>, <tf.Tensor: shape=(162885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162886>, <tf.Tensor: shape=(162886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162887>, <tf.Tensor: shape=(162887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162888>, <tf.Tensor: shape=(162888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162889>, <tf.Tensor: shape=(162889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162890>, <tf.Tensor: shape=(162890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162891>, <tf.Tensor: shape=(162891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162892>, <tf.Tensor: shape=(162892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162893>, <tf.Tensor: shape=(162893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162894>, <tf.Tensor: shape=(162894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162895>, <tf.Tensor: shape=(162895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162896>, <tf.Tensor: shape=(162896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162897>, <tf.Tensor: shape=(162897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162898>, <tf.Tensor: shape=(162898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162899>, <tf.Tensor: shape=(162899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162900>, <tf.Tensor: shape=(162900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162901>, <tf.Tensor: shape=(162901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162902>, <tf.Tensor: shape=(162902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162903>, <tf.Tensor: shape=(162903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162904>, <tf.Tensor: shape=(162904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162905>, <tf.Tensor: shape=(162905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162906>, <tf.Tensor: shape=(162906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162907>, <tf.Tensor: shape=(162907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162908>, <tf.Tensor: shape=(162908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162909>, <tf.Tensor: shape=(162909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162910>, <tf.Tensor: shape=(162910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162911>, <tf.Tensor: shape=(162911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162912>, <tf.Tensor: shape=(162912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162913>, <tf.Tensor: shape=(162913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162914>, <tf.Tensor: shape=(162914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162915>, <tf.Tensor: shape=(162915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162916>, <tf.Tensor: shape=(162916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162917>, <tf.Tensor: shape=(162917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162918>, <tf.Tensor: shape=(162918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162919>, <tf.Tensor: shape=(162919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162920>, <tf.Tensor: shape=(162920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162921>, <tf.Tensor: shape=(162921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162922>, <tf.Tensor: shape=(162922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162923>, <tf.Tensor: shape=(162923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162924>, <tf.Tensor: shape=(162924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162925>, <tf.Tensor: shape=(162925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162926>, <tf.Tensor: shape=(162926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162927>, <tf.Tensor: shape=(162927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162928>, <tf.Tensor: shape=(162928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162929>, <tf.Tensor: shape=(162929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162930>, <tf.Tensor: shape=(162930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162931>, <tf.Tensor: shape=(162931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162932>, <tf.Tensor: shape=(162932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162933>, <tf.Tensor: shape=(162933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162934>, <tf.Tensor: shape=(162934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162935>, <tf.Tensor: shape=(162935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162936>, <tf.Tensor: shape=(162936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162937>, <tf.Tensor: shape=(162937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162938>, <tf.Tensor: shape=(162938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162939>, <tf.Tensor: shape=(162939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162940>, <tf.Tensor: shape=(162940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162941>, <tf.Tensor: shape=(162941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162942>, <tf.Tensor: shape=(162942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162943>, <tf.Tensor: shape=(162943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162944>, <tf.Tensor: shape=(162944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162945>, <tf.Tensor: shape=(162945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162946>, <tf.Tensor: shape=(162946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162947>, <tf.Tensor: shape=(162947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162948>, <tf.Tensor: shape=(162948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162949>, <tf.Tensor: shape=(162949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162950>, <tf.Tensor: shape=(162950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162951>, <tf.Tensor: shape=(162951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162952>, <tf.Tensor: shape=(162952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162953>, <tf.Tensor: shape=(162953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162954>, <tf.Tensor: shape=(162954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162955>, <tf.Tensor: shape=(162955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162956>, <tf.Tensor: shape=(162956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162957>, <tf.Tensor: shape=(162957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162958>, <tf.Tensor: shape=(162958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162959>, <tf.Tensor: shape=(162959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162960>, <tf.Tensor: shape=(162960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162961>, <tf.Tensor: shape=(162961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162962>, <tf.Tensor: shape=(162962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162963>, <tf.Tensor: shape=(162963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162964>, <tf.Tensor: shape=(162964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162965>, <tf.Tensor: shape=(162965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162966>, <tf.Tensor: shape=(162966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162967>, <tf.Tensor: shape=(162967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162968>, <tf.Tensor: shape=(162968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162969>, <tf.Tensor: shape=(162969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162970>, <tf.Tensor: shape=(162970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162971>, <tf.Tensor: shape=(162971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162972>, <tf.Tensor: shape=(162972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162973>, <tf.Tensor: shape=(162973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162974>, <tf.Tensor: shape=(162974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162975>, <tf.Tensor: shape=(162975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162976>, <tf.Tensor: shape=(162976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162977>, <tf.Tensor: shape=(162977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162978>, <tf.Tensor: shape=(162978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162979>, <tf.Tensor: shape=(162979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162980>, <tf.Tensor: shape=(162980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162981>, <tf.Tensor: shape=(162981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162982>, <tf.Tensor: shape=(162982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162983>, <tf.Tensor: shape=(162983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162984>, <tf.Tensor: shape=(162984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162985>, <tf.Tensor: shape=(162985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162986>, <tf.Tensor: shape=(162986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162987>, <tf.Tensor: shape=(162987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162988>, <tf.Tensor: shape=(162988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162989>, <tf.Tensor: shape=(162989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162990>, <tf.Tensor: shape=(162990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162991>, <tf.Tensor: shape=(162991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162992>, <tf.Tensor: shape=(162992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162993>, <tf.Tensor: shape=(162993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162994>, <tf.Tensor: shape=(162994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162995>, <tf.Tensor: shape=(162995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162996>, <tf.Tensor: shape=(162996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162997>, <tf.Tensor: shape=(162997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162998>, <tf.Tensor: shape=(162998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=162999>, <tf.Tensor: shape=(162999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163000>, <tf.Tensor: shape=(163000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163001>, <tf.Tensor: shape=(163001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163002>, <tf.Tensor: shape=(163002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163003>, <tf.Tensor: shape=(163003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163004>, <tf.Tensor: shape=(163004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163005>, <tf.Tensor: shape=(163005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163006>, <tf.Tensor: shape=(163006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163007>, <tf.Tensor: shape=(163007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163008>, <tf.Tensor: shape=(163008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163009>, <tf.Tensor: shape=(163009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163010>, <tf.Tensor: shape=(163010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163011>, <tf.Tensor: shape=(163011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163012>, <tf.Tensor: shape=(163012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163013>, <tf.Tensor: shape=(163013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163014>, <tf.Tensor: shape=(163014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163015>, <tf.Tensor: shape=(163015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163016>, <tf.Tensor: shape=(163016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163017>, <tf.Tensor: shape=(163017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163018>, <tf.Tensor: shape=(163018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163019>, <tf.Tensor: shape=(163019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163020>, <tf.Tensor: shape=(163020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163021>, <tf.Tensor: shape=(163021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163022>, <tf.Tensor: shape=(163022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163023>, <tf.Tensor: shape=(163023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163024>, <tf.Tensor: shape=(163024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163025>, <tf.Tensor: shape=(163025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163026>, <tf.Tensor: shape=(163026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163027>, <tf.Tensor: shape=(163027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163028>, <tf.Tensor: shape=(163028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163029>, <tf.Tensor: shape=(163029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163030>, <tf.Tensor: shape=(163030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163031>, <tf.Tensor: shape=(163031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163032>, <tf.Tensor: shape=(163032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163033>, <tf.Tensor: shape=(163033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163034>, <tf.Tensor: shape=(163034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163035>, <tf.Tensor: shape=(163035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163036>, <tf.Tensor: shape=(163036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163037>, <tf.Tensor: shape=(163037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163038>, <tf.Tensor: shape=(163038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163039>, <tf.Tensor: shape=(163039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163040>, <tf.Tensor: shape=(163040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163041>, <tf.Tensor: shape=(163041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163042>, <tf.Tensor: shape=(163042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163043>, <tf.Tensor: shape=(163043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163044>, <tf.Tensor: shape=(163044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163045>, <tf.Tensor: shape=(163045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163046>, <tf.Tensor: shape=(163046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163047>, <tf.Tensor: shape=(163047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163048>, <tf.Tensor: shape=(163048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163049>, <tf.Tensor: shape=(163049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163050>, <tf.Tensor: shape=(163050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163051>, <tf.Tensor: shape=(163051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163052>, <tf.Tensor: shape=(163052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163053>, <tf.Tensor: shape=(163053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163054>, <tf.Tensor: shape=(163054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163055>, <tf.Tensor: shape=(163055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163056>, <tf.Tensor: shape=(163056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163057>, <tf.Tensor: shape=(163057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163058>, <tf.Tensor: shape=(163058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163059>, <tf.Tensor: shape=(163059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163060>, <tf.Tensor: shape=(163060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163061>, <tf.Tensor: shape=(163061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163062>, <tf.Tensor: shape=(163062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163063>, <tf.Tensor: shape=(163063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163064>, <tf.Tensor: shape=(163064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163065>, <tf.Tensor: shape=(163065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163066>, <tf.Tensor: shape=(163066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163067>, <tf.Tensor: shape=(163067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163068>, <tf.Tensor: shape=(163068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163069>, <tf.Tensor: shape=(163069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163070>, <tf.Tensor: shape=(163070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163071>, <tf.Tensor: shape=(163071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163072>, <tf.Tensor: shape=(163072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163073>, <tf.Tensor: shape=(163073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163074>, <tf.Tensor: shape=(163074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163075>, <tf.Tensor: shape=(163075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163076>, <tf.Tensor: shape=(163076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163077>, <tf.Tensor: shape=(163077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163078>, <tf.Tensor: shape=(163078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163079>, <tf.Tensor: shape=(163079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163080>, <tf.Tensor: shape=(163080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163081>, <tf.Tensor: shape=(163081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163082>, <tf.Tensor: shape=(163082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163083>, <tf.Tensor: shape=(163083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163084>, <tf.Tensor: shape=(163084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163085>, <tf.Tensor: shape=(163085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163086>, <tf.Tensor: shape=(163086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163087>, <tf.Tensor: shape=(163087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163088>, <tf.Tensor: shape=(163088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163089>, <tf.Tensor: shape=(163089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163090>, <tf.Tensor: shape=(163090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163091>, <tf.Tensor: shape=(163091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163092>, <tf.Tensor: shape=(163092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163093>, <tf.Tensor: shape=(163093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163094>, <tf.Tensor: shape=(163094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163095>, <tf.Tensor: shape=(163095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163096>, <tf.Tensor: shape=(163096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163097>, <tf.Tensor: shape=(163097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163098>, <tf.Tensor: shape=(163098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163099>, <tf.Tensor: shape=(163099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163100>, <tf.Tensor: shape=(163100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163101>, <tf.Tensor: shape=(163101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163102>, <tf.Tensor: shape=(163102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163103>, <tf.Tensor: shape=(163103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163104>, <tf.Tensor: shape=(163104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163105>, <tf.Tensor: shape=(163105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163106>, <tf.Tensor: shape=(163106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163107>, <tf.Tensor: shape=(163107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163108>, <tf.Tensor: shape=(163108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163109>, <tf.Tensor: shape=(163109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163110>, <tf.Tensor: shape=(163110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163111>, <tf.Tensor: shape=(163111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163112>, <tf.Tensor: shape=(163112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163113>, <tf.Tensor: shape=(163113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163114>, <tf.Tensor: shape=(163114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163115>, <tf.Tensor: shape=(163115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163116>, <tf.Tensor: shape=(163116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163117>, <tf.Tensor: shape=(163117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163118>, <tf.Tensor: shape=(163118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163119>, <tf.Tensor: shape=(163119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163120>, <tf.Tensor: shape=(163120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163121>, <tf.Tensor: shape=(163121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163122>, <tf.Tensor: shape=(163122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163123>, <tf.Tensor: shape=(163123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163124>, <tf.Tensor: shape=(163124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163125>, <tf.Tensor: shape=(163125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163126>, <tf.Tensor: shape=(163126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163127>, <tf.Tensor: shape=(163127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163128>, <tf.Tensor: shape=(163128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163129>, <tf.Tensor: shape=(163129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163130>, <tf.Tensor: shape=(163130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163131>, <tf.Tensor: shape=(163131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163132>, <tf.Tensor: shape=(163132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163133>, <tf.Tensor: shape=(163133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163134>, <tf.Tensor: shape=(163134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163135>, <tf.Tensor: shape=(163135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163136>, <tf.Tensor: shape=(163136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163137>, <tf.Tensor: shape=(163137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163138>, <tf.Tensor: shape=(163138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163139>, <tf.Tensor: shape=(163139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163140>, <tf.Tensor: shape=(163140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163141>, <tf.Tensor: shape=(163141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163142>, <tf.Tensor: shape=(163142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163143>, <tf.Tensor: shape=(163143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163144>, <tf.Tensor: shape=(163144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163145>, <tf.Tensor: shape=(163145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163146>, <tf.Tensor: shape=(163146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163147>, <tf.Tensor: shape=(163147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163148>, <tf.Tensor: shape=(163148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163149>, <tf.Tensor: shape=(163149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163150>, <tf.Tensor: shape=(163150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163151>, <tf.Tensor: shape=(163151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163152>, <tf.Tensor: shape=(163152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163153>, <tf.Tensor: shape=(163153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163154>, <tf.Tensor: shape=(163154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163155>, <tf.Tensor: shape=(163155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163156>, <tf.Tensor: shape=(163156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163157>, <tf.Tensor: shape=(163157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163158>, <tf.Tensor: shape=(163158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163159>, <tf.Tensor: shape=(163159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163160>, <tf.Tensor: shape=(163160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163161>, <tf.Tensor: shape=(163161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163162>, <tf.Tensor: shape=(163162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163163>, <tf.Tensor: shape=(163163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163164>, <tf.Tensor: shape=(163164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163165>, <tf.Tensor: shape=(163165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163166>, <tf.Tensor: shape=(163166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163167>, <tf.Tensor: shape=(163167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163168>, <tf.Tensor: shape=(163168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163169>, <tf.Tensor: shape=(163169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163170>, <tf.Tensor: shape=(163170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163171>, <tf.Tensor: shape=(163171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163172>, <tf.Tensor: shape=(163172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163173>, <tf.Tensor: shape=(163173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163174>, <tf.Tensor: shape=(163174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163175>, <tf.Tensor: shape=(163175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163176>, <tf.Tensor: shape=(163176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163177>, <tf.Tensor: shape=(163177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163178>, <tf.Tensor: shape=(163178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163179>, <tf.Tensor: shape=(163179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163180>, <tf.Tensor: shape=(163180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163181>, <tf.Tensor: shape=(163181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163182>, <tf.Tensor: shape=(163182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163183>, <tf.Tensor: shape=(163183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163184>, <tf.Tensor: shape=(163184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163185>, <tf.Tensor: shape=(163185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163186>, <tf.Tensor: shape=(163186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163187>, <tf.Tensor: shape=(163187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163188>, <tf.Tensor: shape=(163188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163189>, <tf.Tensor: shape=(163189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163190>, <tf.Tensor: shape=(163190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163191>, <tf.Tensor: shape=(163191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163192>, <tf.Tensor: shape=(163192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163193>, <tf.Tensor: shape=(163193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163194>, <tf.Tensor: shape=(163194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163195>, <tf.Tensor: shape=(163195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163196>, <tf.Tensor: shape=(163196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163197>, <tf.Tensor: shape=(163197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163198>, <tf.Tensor: shape=(163198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163199>, <tf.Tensor: shape=(163199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163200>, <tf.Tensor: shape=(163200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163201>, <tf.Tensor: shape=(163201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163202>, <tf.Tensor: shape=(163202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163203>, <tf.Tensor: shape=(163203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163204>, <tf.Tensor: shape=(163204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163205>, <tf.Tensor: shape=(163205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163206>, <tf.Tensor: shape=(163206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163207>, <tf.Tensor: shape=(163207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163208>, <tf.Tensor: shape=(163208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163209>, <tf.Tensor: shape=(163209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163210>, <tf.Tensor: shape=(163210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163211>, <tf.Tensor: shape=(163211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163212>, <tf.Tensor: shape=(163212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163213>, <tf.Tensor: shape=(163213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163214>, <tf.Tensor: shape=(163214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163215>, <tf.Tensor: shape=(163215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163216>, <tf.Tensor: shape=(163216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163217>, <tf.Tensor: shape=(163217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163218>, <tf.Tensor: shape=(163218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163219>, <tf.Tensor: shape=(163219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163220>, <tf.Tensor: shape=(163220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163221>, <tf.Tensor: shape=(163221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163222>, <tf.Tensor: shape=(163222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163223>, <tf.Tensor: shape=(163223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163224>, <tf.Tensor: shape=(163224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163225>, <tf.Tensor: shape=(163225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163226>, <tf.Tensor: shape=(163226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163227>, <tf.Tensor: shape=(163227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163228>, <tf.Tensor: shape=(163228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163229>, <tf.Tensor: shape=(163229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163230>, <tf.Tensor: shape=(163230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163231>, <tf.Tensor: shape=(163231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163232>, <tf.Tensor: shape=(163232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163233>, <tf.Tensor: shape=(163233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163234>, <tf.Tensor: shape=(163234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163235>, <tf.Tensor: shape=(163235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163236>, <tf.Tensor: shape=(163236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163237>, <tf.Tensor: shape=(163237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163238>, <tf.Tensor: shape=(163238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163239>, <tf.Tensor: shape=(163239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163240>, <tf.Tensor: shape=(163240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163241>, <tf.Tensor: shape=(163241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163242>, <tf.Tensor: shape=(163242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163243>, <tf.Tensor: shape=(163243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163244>, <tf.Tensor: shape=(163244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163245>, <tf.Tensor: shape=(163245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163246>, <tf.Tensor: shape=(163246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163247>, <tf.Tensor: shape=(163247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163248>, <tf.Tensor: shape=(163248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163249>, <tf.Tensor: shape=(163249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163250>, <tf.Tensor: shape=(163250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163251>, <tf.Tensor: shape=(163251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163252>, <tf.Tensor: shape=(163252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163253>, <tf.Tensor: shape=(163253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163254>, <tf.Tensor: shape=(163254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163255>, <tf.Tensor: shape=(163255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163256>, <tf.Tensor: shape=(163256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163257>, <tf.Tensor: shape=(163257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163258>, <tf.Tensor: shape=(163258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163259>, <tf.Tensor: shape=(163259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163260>, <tf.Tensor: shape=(163260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163261>, <tf.Tensor: shape=(163261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163262>, <tf.Tensor: shape=(163262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163263>, <tf.Tensor: shape=(163263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163264>, <tf.Tensor: shape=(163264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163265>, <tf.Tensor: shape=(163265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163266>, <tf.Tensor: shape=(163266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163267>, <tf.Tensor: shape=(163267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163268>, <tf.Tensor: shape=(163268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163269>, <tf.Tensor: shape=(163269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163270>, <tf.Tensor: shape=(163270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163271>, <tf.Tensor: shape=(163271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163272>, <tf.Tensor: shape=(163272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163273>, <tf.Tensor: shape=(163273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163274>, <tf.Tensor: shape=(163274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163275>, <tf.Tensor: shape=(163275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163276>, <tf.Tensor: shape=(163276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163277>, <tf.Tensor: shape=(163277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163278>, <tf.Tensor: shape=(163278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163279>, <tf.Tensor: shape=(163279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163280>, <tf.Tensor: shape=(163280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163281>, <tf.Tensor: shape=(163281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163282>, <tf.Tensor: shape=(163282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163283>, <tf.Tensor: shape=(163283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163284>, <tf.Tensor: shape=(163284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163285>, <tf.Tensor: shape=(163285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163286>, <tf.Tensor: shape=(163286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163287>, <tf.Tensor: shape=(163287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163288>, <tf.Tensor: shape=(163288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163289>, <tf.Tensor: shape=(163289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163290>, <tf.Tensor: shape=(163290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163291>, <tf.Tensor: shape=(163291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163292>, <tf.Tensor: shape=(163292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163293>, <tf.Tensor: shape=(163293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163294>, <tf.Tensor: shape=(163294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163295>, <tf.Tensor: shape=(163295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163296>, <tf.Tensor: shape=(163296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163297>, <tf.Tensor: shape=(163297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163298>, <tf.Tensor: shape=(163298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163299>, <tf.Tensor: shape=(163299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163300>, <tf.Tensor: shape=(163300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163301>, <tf.Tensor: shape=(163301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163302>, <tf.Tensor: shape=(163302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163303>, <tf.Tensor: shape=(163303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163304>, <tf.Tensor: shape=(163304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163305>, <tf.Tensor: shape=(163305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163306>, <tf.Tensor: shape=(163306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163307>, <tf.Tensor: shape=(163307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163308>, <tf.Tensor: shape=(163308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163309>, <tf.Tensor: shape=(163309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163310>, <tf.Tensor: shape=(163310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163311>, <tf.Tensor: shape=(163311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163312>, <tf.Tensor: shape=(163312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163313>, <tf.Tensor: shape=(163313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163314>, <tf.Tensor: shape=(163314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163315>, <tf.Tensor: shape=(163315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163316>, <tf.Tensor: shape=(163316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163317>, <tf.Tensor: shape=(163317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163318>, <tf.Tensor: shape=(163318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163319>, <tf.Tensor: shape=(163319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163320>, <tf.Tensor: shape=(163320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163321>, <tf.Tensor: shape=(163321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163322>, <tf.Tensor: shape=(163322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163323>, <tf.Tensor: shape=(163323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163324>, <tf.Tensor: shape=(163324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163325>, <tf.Tensor: shape=(163325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163326>, <tf.Tensor: shape=(163326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163327>, <tf.Tensor: shape=(163327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163328>, <tf.Tensor: shape=(163328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163329>, <tf.Tensor: shape=(163329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163330>, <tf.Tensor: shape=(163330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163331>, <tf.Tensor: shape=(163331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163332>, <tf.Tensor: shape=(163332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163333>, <tf.Tensor: shape=(163333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163334>, <tf.Tensor: shape=(163334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163335>, <tf.Tensor: shape=(163335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163336>, <tf.Tensor: shape=(163336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163337>, <tf.Tensor: shape=(163337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163338>, <tf.Tensor: shape=(163338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163339>, <tf.Tensor: shape=(163339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163340>, <tf.Tensor: shape=(163340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163341>, <tf.Tensor: shape=(163341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163342>, <tf.Tensor: shape=(163342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163343>, <tf.Tensor: shape=(163343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163344>, <tf.Tensor: shape=(163344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163345>, <tf.Tensor: shape=(163345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163346>, <tf.Tensor: shape=(163346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163347>, <tf.Tensor: shape=(163347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163348>, <tf.Tensor: shape=(163348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163349>, <tf.Tensor: shape=(163349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163350>, <tf.Tensor: shape=(163350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163351>, <tf.Tensor: shape=(163351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163352>, <tf.Tensor: shape=(163352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163353>, <tf.Tensor: shape=(163353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163354>, <tf.Tensor: shape=(163354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163355>, <tf.Tensor: shape=(163355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163356>, <tf.Tensor: shape=(163356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163357>, <tf.Tensor: shape=(163357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163358>, <tf.Tensor: shape=(163358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163359>, <tf.Tensor: shape=(163359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163360>, <tf.Tensor: shape=(163360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163361>, <tf.Tensor: shape=(163361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163362>, <tf.Tensor: shape=(163362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163363>, <tf.Tensor: shape=(163363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163364>, <tf.Tensor: shape=(163364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163365>, <tf.Tensor: shape=(163365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163366>, <tf.Tensor: shape=(163366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163367>, <tf.Tensor: shape=(163367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163368>, <tf.Tensor: shape=(163368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163369>, <tf.Tensor: shape=(163369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163370>, <tf.Tensor: shape=(163370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163371>, <tf.Tensor: shape=(163371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163372>, <tf.Tensor: shape=(163372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163373>, <tf.Tensor: shape=(163373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163374>, <tf.Tensor: shape=(163374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163375>, <tf.Tensor: shape=(163375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163376>, <tf.Tensor: shape=(163376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163377>, <tf.Tensor: shape=(163377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163378>, <tf.Tensor: shape=(163378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163379>, <tf.Tensor: shape=(163379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163380>, <tf.Tensor: shape=(163380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163381>, <tf.Tensor: shape=(163381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163382>, <tf.Tensor: shape=(163382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163383>, <tf.Tensor: shape=(163383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163384>, <tf.Tensor: shape=(163384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163385>, <tf.Tensor: shape=(163385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163386>, <tf.Tensor: shape=(163386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163387>, <tf.Tensor: shape=(163387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163388>, <tf.Tensor: shape=(163388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163389>, <tf.Tensor: shape=(163389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163390>, <tf.Tensor: shape=(163390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163391>, <tf.Tensor: shape=(163391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163392>, <tf.Tensor: shape=(163392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163393>, <tf.Tensor: shape=(163393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163394>, <tf.Tensor: shape=(163394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163395>, <tf.Tensor: shape=(163395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163396>, <tf.Tensor: shape=(163396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163397>, <tf.Tensor: shape=(163397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163398>, <tf.Tensor: shape=(163398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163399>, <tf.Tensor: shape=(163399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163400>, <tf.Tensor: shape=(163400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163401>, <tf.Tensor: shape=(163401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163402>, <tf.Tensor: shape=(163402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163403>, <tf.Tensor: shape=(163403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163404>, <tf.Tensor: shape=(163404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163405>, <tf.Tensor: shape=(163405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163406>, <tf.Tensor: shape=(163406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163407>, <tf.Tensor: shape=(163407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163408>, <tf.Tensor: shape=(163408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163409>, <tf.Tensor: shape=(163409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163410>, <tf.Tensor: shape=(163410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163411>, <tf.Tensor: shape=(163411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163412>, <tf.Tensor: shape=(163412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163413>, <tf.Tensor: shape=(163413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163414>, <tf.Tensor: shape=(163414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163415>, <tf.Tensor: shape=(163415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163416>, <tf.Tensor: shape=(163416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163417>, <tf.Tensor: shape=(163417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163418>, <tf.Tensor: shape=(163418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163419>, <tf.Tensor: shape=(163419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163420>, <tf.Tensor: shape=(163420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163421>, <tf.Tensor: shape=(163421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163422>, <tf.Tensor: shape=(163422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163423>, <tf.Tensor: shape=(163423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163424>, <tf.Tensor: shape=(163424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163425>, <tf.Tensor: shape=(163425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163426>, <tf.Tensor: shape=(163426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163427>, <tf.Tensor: shape=(163427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163428>, <tf.Tensor: shape=(163428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163429>, <tf.Tensor: shape=(163429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163430>, <tf.Tensor: shape=(163430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163431>, <tf.Tensor: shape=(163431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163432>, <tf.Tensor: shape=(163432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163433>, <tf.Tensor: shape=(163433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163434>, <tf.Tensor: shape=(163434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163435>, <tf.Tensor: shape=(163435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163436>, <tf.Tensor: shape=(163436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163437>, <tf.Tensor: shape=(163437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163438>, <tf.Tensor: shape=(163438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163439>, <tf.Tensor: shape=(163439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163440>, <tf.Tensor: shape=(163440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163441>, <tf.Tensor: shape=(163441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163442>, <tf.Tensor: shape=(163442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163443>, <tf.Tensor: shape=(163443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163444>, <tf.Tensor: shape=(163444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163445>, <tf.Tensor: shape=(163445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163446>, <tf.Tensor: shape=(163446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163447>, <tf.Tensor: shape=(163447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163448>, <tf.Tensor: shape=(163448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163449>, <tf.Tensor: shape=(163449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163450>, <tf.Tensor: shape=(163450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163451>, <tf.Tensor: shape=(163451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163452>, <tf.Tensor: shape=(163452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163453>, <tf.Tensor: shape=(163453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163454>, <tf.Tensor: shape=(163454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163455>, <tf.Tensor: shape=(163455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163456>, <tf.Tensor: shape=(163456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163457>, <tf.Tensor: shape=(163457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163458>, <tf.Tensor: shape=(163458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163459>, <tf.Tensor: shape=(163459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163460>, <tf.Tensor: shape=(163460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163461>, <tf.Tensor: shape=(163461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163462>, <tf.Tensor: shape=(163462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163463>, <tf.Tensor: shape=(163463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163464>, <tf.Tensor: shape=(163464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163465>, <tf.Tensor: shape=(163465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163466>, <tf.Tensor: shape=(163466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163467>, <tf.Tensor: shape=(163467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163468>, <tf.Tensor: shape=(163468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163469>, <tf.Tensor: shape=(163469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163470>, <tf.Tensor: shape=(163470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163471>, <tf.Tensor: shape=(163471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163472>, <tf.Tensor: shape=(163472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163473>, <tf.Tensor: shape=(163473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163474>, <tf.Tensor: shape=(163474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163475>, <tf.Tensor: shape=(163475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163476>, <tf.Tensor: shape=(163476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163477>, <tf.Tensor: shape=(163477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163478>, <tf.Tensor: shape=(163478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163479>, <tf.Tensor: shape=(163479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163480>, <tf.Tensor: shape=(163480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163481>, <tf.Tensor: shape=(163481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163482>, <tf.Tensor: shape=(163482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163483>, <tf.Tensor: shape=(163483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163484>, <tf.Tensor: shape=(163484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163485>, <tf.Tensor: shape=(163485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163486>, <tf.Tensor: shape=(163486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163487>, <tf.Tensor: shape=(163487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163488>, <tf.Tensor: shape=(163488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163489>, <tf.Tensor: shape=(163489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163490>, <tf.Tensor: shape=(163490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163491>, <tf.Tensor: shape=(163491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163492>, <tf.Tensor: shape=(163492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163493>, <tf.Tensor: shape=(163493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163494>, <tf.Tensor: shape=(163494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163495>, <tf.Tensor: shape=(163495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163496>, <tf.Tensor: shape=(163496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163497>, <tf.Tensor: shape=(163497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163498>, <tf.Tensor: shape=(163498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163499>, <tf.Tensor: shape=(163499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163500>, <tf.Tensor: shape=(163500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163501>, <tf.Tensor: shape=(163501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163502>, <tf.Tensor: shape=(163502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163503>, <tf.Tensor: shape=(163503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163504>, <tf.Tensor: shape=(163504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163505>, <tf.Tensor: shape=(163505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163506>, <tf.Tensor: shape=(163506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163507>, <tf.Tensor: shape=(163507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163508>, <tf.Tensor: shape=(163508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163509>, <tf.Tensor: shape=(163509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163510>, <tf.Tensor: shape=(163510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163511>, <tf.Tensor: shape=(163511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163512>, <tf.Tensor: shape=(163512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163513>, <tf.Tensor: shape=(163513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163514>, <tf.Tensor: shape=(163514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163515>, <tf.Tensor: shape=(163515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163516>, <tf.Tensor: shape=(163516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163517>, <tf.Tensor: shape=(163517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163518>, <tf.Tensor: shape=(163518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163519>, <tf.Tensor: shape=(163519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163520>, <tf.Tensor: shape=(163520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163521>, <tf.Tensor: shape=(163521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163522>, <tf.Tensor: shape=(163522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163523>, <tf.Tensor: shape=(163523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163524>, <tf.Tensor: shape=(163524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163525>, <tf.Tensor: shape=(163525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163526>, <tf.Tensor: shape=(163526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163527>, <tf.Tensor: shape=(163527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163528>, <tf.Tensor: shape=(163528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163529>, <tf.Tensor: shape=(163529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163530>, <tf.Tensor: shape=(163530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163531>, <tf.Tensor: shape=(163531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163532>, <tf.Tensor: shape=(163532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163533>, <tf.Tensor: shape=(163533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163534>, <tf.Tensor: shape=(163534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163535>, <tf.Tensor: shape=(163535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163536>, <tf.Tensor: shape=(163536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163537>, <tf.Tensor: shape=(163537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163538>, <tf.Tensor: shape=(163538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163539>, <tf.Tensor: shape=(163539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163540>, <tf.Tensor: shape=(163540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163541>, <tf.Tensor: shape=(163541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163542>, <tf.Tensor: shape=(163542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163543>, <tf.Tensor: shape=(163543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163544>, <tf.Tensor: shape=(163544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163545>, <tf.Tensor: shape=(163545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163546>, <tf.Tensor: shape=(163546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163547>, <tf.Tensor: shape=(163547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163548>, <tf.Tensor: shape=(163548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163549>, <tf.Tensor: shape=(163549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163550>, <tf.Tensor: shape=(163550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163551>, <tf.Tensor: shape=(163551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163552>, <tf.Tensor: shape=(163552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163553>, <tf.Tensor: shape=(163553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163554>, <tf.Tensor: shape=(163554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163555>, <tf.Tensor: shape=(163555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163556>, <tf.Tensor: shape=(163556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163557>, <tf.Tensor: shape=(163557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163558>, <tf.Tensor: shape=(163558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163559>, <tf.Tensor: shape=(163559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163560>, <tf.Tensor: shape=(163560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163561>, <tf.Tensor: shape=(163561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163562>, <tf.Tensor: shape=(163562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163563>, <tf.Tensor: shape=(163563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163564>, <tf.Tensor: shape=(163564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163565>, <tf.Tensor: shape=(163565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163566>, <tf.Tensor: shape=(163566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163567>, <tf.Tensor: shape=(163567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163568>, <tf.Tensor: shape=(163568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163569>, <tf.Tensor: shape=(163569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163570>, <tf.Tensor: shape=(163570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163571>, <tf.Tensor: shape=(163571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163572>, <tf.Tensor: shape=(163572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163573>, <tf.Tensor: shape=(163573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163574>, <tf.Tensor: shape=(163574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163575>, <tf.Tensor: shape=(163575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163576>, <tf.Tensor: shape=(163576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163577>, <tf.Tensor: shape=(163577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163578>, <tf.Tensor: shape=(163578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163579>, <tf.Tensor: shape=(163579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163580>, <tf.Tensor: shape=(163580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163581>, <tf.Tensor: shape=(163581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163582>, <tf.Tensor: shape=(163582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163583>, <tf.Tensor: shape=(163583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163584>, <tf.Tensor: shape=(163584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163585>, <tf.Tensor: shape=(163585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163586>, <tf.Tensor: shape=(163586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163587>, <tf.Tensor: shape=(163587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163588>, <tf.Tensor: shape=(163588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163589>, <tf.Tensor: shape=(163589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163590>, <tf.Tensor: shape=(163590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163591>, <tf.Tensor: shape=(163591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163592>, <tf.Tensor: shape=(163592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163593>, <tf.Tensor: shape=(163593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163594>, <tf.Tensor: shape=(163594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163595>, <tf.Tensor: shape=(163595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163596>, <tf.Tensor: shape=(163596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163597>, <tf.Tensor: shape=(163597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163598>, <tf.Tensor: shape=(163598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163599>, <tf.Tensor: shape=(163599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163600>, <tf.Tensor: shape=(163600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163601>, <tf.Tensor: shape=(163601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163602>, <tf.Tensor: shape=(163602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163603>, <tf.Tensor: shape=(163603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163604>, <tf.Tensor: shape=(163604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163605>, <tf.Tensor: shape=(163605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163606>, <tf.Tensor: shape=(163606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163607>, <tf.Tensor: shape=(163607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163608>, <tf.Tensor: shape=(163608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163609>, <tf.Tensor: shape=(163609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163610>, <tf.Tensor: shape=(163610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163611>, <tf.Tensor: shape=(163611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163612>, <tf.Tensor: shape=(163612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163613>, <tf.Tensor: shape=(163613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163614>, <tf.Tensor: shape=(163614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163615>, <tf.Tensor: shape=(163615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163616>, <tf.Tensor: shape=(163616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163617>, <tf.Tensor: shape=(163617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163618>, <tf.Tensor: shape=(163618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163619>, <tf.Tensor: shape=(163619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163620>, <tf.Tensor: shape=(163620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163621>, <tf.Tensor: shape=(163621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163622>, <tf.Tensor: shape=(163622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163623>, <tf.Tensor: shape=(163623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163624>, <tf.Tensor: shape=(163624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163625>, <tf.Tensor: shape=(163625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163626>, <tf.Tensor: shape=(163626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163627>, <tf.Tensor: shape=(163627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163628>, <tf.Tensor: shape=(163628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163629>, <tf.Tensor: shape=(163629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163630>, <tf.Tensor: shape=(163630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163631>, <tf.Tensor: shape=(163631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163632>, <tf.Tensor: shape=(163632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163633>, <tf.Tensor: shape=(163633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163634>, <tf.Tensor: shape=(163634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163635>, <tf.Tensor: shape=(163635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163636>, <tf.Tensor: shape=(163636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163637>, <tf.Tensor: shape=(163637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163638>, <tf.Tensor: shape=(163638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163639>, <tf.Tensor: shape=(163639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163640>, <tf.Tensor: shape=(163640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163641>, <tf.Tensor: shape=(163641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163642>, <tf.Tensor: shape=(163642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163643>, <tf.Tensor: shape=(163643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163644>, <tf.Tensor: shape=(163644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163645>, <tf.Tensor: shape=(163645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163646>, <tf.Tensor: shape=(163646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163647>, <tf.Tensor: shape=(163647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163648>, <tf.Tensor: shape=(163648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163649>, <tf.Tensor: shape=(163649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163650>, <tf.Tensor: shape=(163650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163651>, <tf.Tensor: shape=(163651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163652>, <tf.Tensor: shape=(163652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163653>, <tf.Tensor: shape=(163653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163654>, <tf.Tensor: shape=(163654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163655>, <tf.Tensor: shape=(163655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163656>, <tf.Tensor: shape=(163656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163657>, <tf.Tensor: shape=(163657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163658>, <tf.Tensor: shape=(163658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163659>, <tf.Tensor: shape=(163659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163660>, <tf.Tensor: shape=(163660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163661>, <tf.Tensor: shape=(163661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163662>, <tf.Tensor: shape=(163662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163663>, <tf.Tensor: shape=(163663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163664>, <tf.Tensor: shape=(163664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163665>, <tf.Tensor: shape=(163665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163666>, <tf.Tensor: shape=(163666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163667>, <tf.Tensor: shape=(163667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163668>, <tf.Tensor: shape=(163668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163669>, <tf.Tensor: shape=(163669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163670>, <tf.Tensor: shape=(163670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163671>, <tf.Tensor: shape=(163671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163672>, <tf.Tensor: shape=(163672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163673>, <tf.Tensor: shape=(163673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163674>, <tf.Tensor: shape=(163674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163675>, <tf.Tensor: shape=(163675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163676>, <tf.Tensor: shape=(163676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163677>, <tf.Tensor: shape=(163677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163678>, <tf.Tensor: shape=(163678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163679>, <tf.Tensor: shape=(163679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163680>, <tf.Tensor: shape=(163680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163681>, <tf.Tensor: shape=(163681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163682>, <tf.Tensor: shape=(163682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163683>, <tf.Tensor: shape=(163683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163684>, <tf.Tensor: shape=(163684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163685>, <tf.Tensor: shape=(163685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163686>, <tf.Tensor: shape=(163686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163687>, <tf.Tensor: shape=(163687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163688>, <tf.Tensor: shape=(163688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163689>, <tf.Tensor: shape=(163689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163690>, <tf.Tensor: shape=(163690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163691>, <tf.Tensor: shape=(163691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163692>, <tf.Tensor: shape=(163692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163693>, <tf.Tensor: shape=(163693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163694>, <tf.Tensor: shape=(163694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163695>, <tf.Tensor: shape=(163695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163696>, <tf.Tensor: shape=(163696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163697>, <tf.Tensor: shape=(163697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163698>, <tf.Tensor: shape=(163698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163699>, <tf.Tensor: shape=(163699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163700>, <tf.Tensor: shape=(163700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163701>, <tf.Tensor: shape=(163701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163702>, <tf.Tensor: shape=(163702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163703>, <tf.Tensor: shape=(163703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163704>, <tf.Tensor: shape=(163704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163705>, <tf.Tensor: shape=(163705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163706>, <tf.Tensor: shape=(163706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163707>, <tf.Tensor: shape=(163707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163708>, <tf.Tensor: shape=(163708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163709>, <tf.Tensor: shape=(163709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163710>, <tf.Tensor: shape=(163710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163711>, <tf.Tensor: shape=(163711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163712>, <tf.Tensor: shape=(163712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163713>, <tf.Tensor: shape=(163713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163714>, <tf.Tensor: shape=(163714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163715>, <tf.Tensor: shape=(163715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163716>, <tf.Tensor: shape=(163716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163717>, <tf.Tensor: shape=(163717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163718>, <tf.Tensor: shape=(163718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163719>, <tf.Tensor: shape=(163719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163720>, <tf.Tensor: shape=(163720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163721>, <tf.Tensor: shape=(163721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163722>, <tf.Tensor: shape=(163722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163723>, <tf.Tensor: shape=(163723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163724>, <tf.Tensor: shape=(163724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163725>, <tf.Tensor: shape=(163725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163726>, <tf.Tensor: shape=(163726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163727>, <tf.Tensor: shape=(163727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163728>, <tf.Tensor: shape=(163728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163729>, <tf.Tensor: shape=(163729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163730>, <tf.Tensor: shape=(163730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163731>, <tf.Tensor: shape=(163731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163732>, <tf.Tensor: shape=(163732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163733>, <tf.Tensor: shape=(163733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163734>, <tf.Tensor: shape=(163734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163735>, <tf.Tensor: shape=(163735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163736>, <tf.Tensor: shape=(163736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163737>, <tf.Tensor: shape=(163737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163738>, <tf.Tensor: shape=(163738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163739>, <tf.Tensor: shape=(163739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163740>, <tf.Tensor: shape=(163740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163741>, <tf.Tensor: shape=(163741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163742>, <tf.Tensor: shape=(163742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163743>, <tf.Tensor: shape=(163743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163744>, <tf.Tensor: shape=(163744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163745>, <tf.Tensor: shape=(163745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163746>, <tf.Tensor: shape=(163746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163747>, <tf.Tensor: shape=(163747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163748>, <tf.Tensor: shape=(163748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163749>, <tf.Tensor: shape=(163749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163750>, <tf.Tensor: shape=(163750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163751>, <tf.Tensor: shape=(163751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163752>, <tf.Tensor: shape=(163752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163753>, <tf.Tensor: shape=(163753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163754>, <tf.Tensor: shape=(163754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163755>, <tf.Tensor: shape=(163755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163756>, <tf.Tensor: shape=(163756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163757>, <tf.Tensor: shape=(163757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163758>, <tf.Tensor: shape=(163758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163759>, <tf.Tensor: shape=(163759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163760>, <tf.Tensor: shape=(163760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163761>, <tf.Tensor: shape=(163761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163762>, <tf.Tensor: shape=(163762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163763>, <tf.Tensor: shape=(163763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163764>, <tf.Tensor: shape=(163764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163765>, <tf.Tensor: shape=(163765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163766>, <tf.Tensor: shape=(163766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163767>, <tf.Tensor: shape=(163767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163768>, <tf.Tensor: shape=(163768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163769>, <tf.Tensor: shape=(163769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163770>, <tf.Tensor: shape=(163770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163771>, <tf.Tensor: shape=(163771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163772>, <tf.Tensor: shape=(163772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163773>, <tf.Tensor: shape=(163773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163774>, <tf.Tensor: shape=(163774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163775>, <tf.Tensor: shape=(163775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163776>, <tf.Tensor: shape=(163776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163777>, <tf.Tensor: shape=(163777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163778>, <tf.Tensor: shape=(163778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163779>, <tf.Tensor: shape=(163779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163780>, <tf.Tensor: shape=(163780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163781>, <tf.Tensor: shape=(163781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163782>, <tf.Tensor: shape=(163782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163783>, <tf.Tensor: shape=(163783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163784>, <tf.Tensor: shape=(163784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163785>, <tf.Tensor: shape=(163785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163786>, <tf.Tensor: shape=(163786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163787>, <tf.Tensor: shape=(163787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163788>, <tf.Tensor: shape=(163788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163789>, <tf.Tensor: shape=(163789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163790>, <tf.Tensor: shape=(163790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163791>, <tf.Tensor: shape=(163791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163792>, <tf.Tensor: shape=(163792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163793>, <tf.Tensor: shape=(163793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163794>, <tf.Tensor: shape=(163794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163795>, <tf.Tensor: shape=(163795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163796>, <tf.Tensor: shape=(163796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163797>, <tf.Tensor: shape=(163797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163798>, <tf.Tensor: shape=(163798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163799>, <tf.Tensor: shape=(163799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163800>, <tf.Tensor: shape=(163800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163801>, <tf.Tensor: shape=(163801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163802>, <tf.Tensor: shape=(163802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163803>, <tf.Tensor: shape=(163803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163804>, <tf.Tensor: shape=(163804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163805>, <tf.Tensor: shape=(163805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163806>, <tf.Tensor: shape=(163806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163807>, <tf.Tensor: shape=(163807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163808>, <tf.Tensor: shape=(163808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163809>, <tf.Tensor: shape=(163809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163810>, <tf.Tensor: shape=(163810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163811>, <tf.Tensor: shape=(163811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163812>, <tf.Tensor: shape=(163812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163813>, <tf.Tensor: shape=(163813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163814>, <tf.Tensor: shape=(163814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163815>, <tf.Tensor: shape=(163815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163816>, <tf.Tensor: shape=(163816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163817>, <tf.Tensor: shape=(163817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163818>, <tf.Tensor: shape=(163818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163819>, <tf.Tensor: shape=(163819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163820>, <tf.Tensor: shape=(163820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163821>, <tf.Tensor: shape=(163821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163822>, <tf.Tensor: shape=(163822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163823>, <tf.Tensor: shape=(163823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163824>, <tf.Tensor: shape=(163824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163825>, <tf.Tensor: shape=(163825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163826>, <tf.Tensor: shape=(163826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163827>, <tf.Tensor: shape=(163827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163828>, <tf.Tensor: shape=(163828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163829>, <tf.Tensor: shape=(163829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163830>, <tf.Tensor: shape=(163830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163831>, <tf.Tensor: shape=(163831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163832>, <tf.Tensor: shape=(163832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163833>, <tf.Tensor: shape=(163833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163834>, <tf.Tensor: shape=(163834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163835>, <tf.Tensor: shape=(163835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163836>, <tf.Tensor: shape=(163836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163837>, <tf.Tensor: shape=(163837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163838>, <tf.Tensor: shape=(163838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163839>, <tf.Tensor: shape=(163839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163840>, <tf.Tensor: shape=(163840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163841>, <tf.Tensor: shape=(163841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163842>, <tf.Tensor: shape=(163842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163843>, <tf.Tensor: shape=(163843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163844>, <tf.Tensor: shape=(163844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163845>, <tf.Tensor: shape=(163845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163846>, <tf.Tensor: shape=(163846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163847>, <tf.Tensor: shape=(163847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163848>, <tf.Tensor: shape=(163848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163849>, <tf.Tensor: shape=(163849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163850>, <tf.Tensor: shape=(163850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163851>, <tf.Tensor: shape=(163851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163852>, <tf.Tensor: shape=(163852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163853>, <tf.Tensor: shape=(163853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163854>, <tf.Tensor: shape=(163854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163855>, <tf.Tensor: shape=(163855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163856>, <tf.Tensor: shape=(163856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163857>, <tf.Tensor: shape=(163857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163858>, <tf.Tensor: shape=(163858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163859>, <tf.Tensor: shape=(163859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163860>, <tf.Tensor: shape=(163860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163861>, <tf.Tensor: shape=(163861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163862>, <tf.Tensor: shape=(163862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163863>, <tf.Tensor: shape=(163863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163864>, <tf.Tensor: shape=(163864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163865>, <tf.Tensor: shape=(163865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163866>, <tf.Tensor: shape=(163866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163867>, <tf.Tensor: shape=(163867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163868>, <tf.Tensor: shape=(163868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163869>, <tf.Tensor: shape=(163869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163870>, <tf.Tensor: shape=(163870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163871>, <tf.Tensor: shape=(163871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163872>, <tf.Tensor: shape=(163872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163873>, <tf.Tensor: shape=(163873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163874>, <tf.Tensor: shape=(163874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163875>, <tf.Tensor: shape=(163875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163876>, <tf.Tensor: shape=(163876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163877>, <tf.Tensor: shape=(163877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163878>, <tf.Tensor: shape=(163878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163879>, <tf.Tensor: shape=(163879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163880>, <tf.Tensor: shape=(163880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163881>, <tf.Tensor: shape=(163881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163882>, <tf.Tensor: shape=(163882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163883>, <tf.Tensor: shape=(163883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163884>, <tf.Tensor: shape=(163884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163885>, <tf.Tensor: shape=(163885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163886>, <tf.Tensor: shape=(163886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163887>, <tf.Tensor: shape=(163887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163888>, <tf.Tensor: shape=(163888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163889>, <tf.Tensor: shape=(163889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163890>, <tf.Tensor: shape=(163890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163891>, <tf.Tensor: shape=(163891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163892>, <tf.Tensor: shape=(163892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163893>, <tf.Tensor: shape=(163893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163894>, <tf.Tensor: shape=(163894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163895>, <tf.Tensor: shape=(163895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163896>, <tf.Tensor: shape=(163896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163897>, <tf.Tensor: shape=(163897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163898>, <tf.Tensor: shape=(163898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163899>, <tf.Tensor: shape=(163899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163900>, <tf.Tensor: shape=(163900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163901>, <tf.Tensor: shape=(163901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163902>, <tf.Tensor: shape=(163902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163903>, <tf.Tensor: shape=(163903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163904>, <tf.Tensor: shape=(163904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163905>, <tf.Tensor: shape=(163905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163906>, <tf.Tensor: shape=(163906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163907>, <tf.Tensor: shape=(163907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163908>, <tf.Tensor: shape=(163908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163909>, <tf.Tensor: shape=(163909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163910>, <tf.Tensor: shape=(163910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163911>, <tf.Tensor: shape=(163911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163912>, <tf.Tensor: shape=(163912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163913>, <tf.Tensor: shape=(163913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163914>, <tf.Tensor: shape=(163914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163915>, <tf.Tensor: shape=(163915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163916>, <tf.Tensor: shape=(163916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163917>, <tf.Tensor: shape=(163917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163918>, <tf.Tensor: shape=(163918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163919>, <tf.Tensor: shape=(163919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163920>, <tf.Tensor: shape=(163920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163921>, <tf.Tensor: shape=(163921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163922>, <tf.Tensor: shape=(163922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163923>, <tf.Tensor: shape=(163923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163924>, <tf.Tensor: shape=(163924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163925>, <tf.Tensor: shape=(163925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163926>, <tf.Tensor: shape=(163926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163927>, <tf.Tensor: shape=(163927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163928>, <tf.Tensor: shape=(163928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163929>, <tf.Tensor: shape=(163929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163930>, <tf.Tensor: shape=(163930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163931>, <tf.Tensor: shape=(163931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163932>, <tf.Tensor: shape=(163932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163933>, <tf.Tensor: shape=(163933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163934>, <tf.Tensor: shape=(163934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163935>, <tf.Tensor: shape=(163935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163936>, <tf.Tensor: shape=(163936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163937>, <tf.Tensor: shape=(163937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163938>, <tf.Tensor: shape=(163938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163939>, <tf.Tensor: shape=(163939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163940>, <tf.Tensor: shape=(163940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163941>, <tf.Tensor: shape=(163941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163942>, <tf.Tensor: shape=(163942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163943>, <tf.Tensor: shape=(163943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163944>, <tf.Tensor: shape=(163944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163945>, <tf.Tensor: shape=(163945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163946>, <tf.Tensor: shape=(163946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163947>, <tf.Tensor: shape=(163947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163948>, <tf.Tensor: shape=(163948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163949>, <tf.Tensor: shape=(163949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163950>, <tf.Tensor: shape=(163950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163951>, <tf.Tensor: shape=(163951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163952>, <tf.Tensor: shape=(163952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163953>, <tf.Tensor: shape=(163953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163954>, <tf.Tensor: shape=(163954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163955>, <tf.Tensor: shape=(163955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163956>, <tf.Tensor: shape=(163956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163957>, <tf.Tensor: shape=(163957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163958>, <tf.Tensor: shape=(163958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163959>, <tf.Tensor: shape=(163959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163960>, <tf.Tensor: shape=(163960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163961>, <tf.Tensor: shape=(163961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163962>, <tf.Tensor: shape=(163962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163963>, <tf.Tensor: shape=(163963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163964>, <tf.Tensor: shape=(163964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163965>, <tf.Tensor: shape=(163965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163966>, <tf.Tensor: shape=(163966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163967>, <tf.Tensor: shape=(163967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163968>, <tf.Tensor: shape=(163968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163969>, <tf.Tensor: shape=(163969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163970>, <tf.Tensor: shape=(163970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163971>, <tf.Tensor: shape=(163971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163972>, <tf.Tensor: shape=(163972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163973>, <tf.Tensor: shape=(163973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163974>, <tf.Tensor: shape=(163974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163975>, <tf.Tensor: shape=(163975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163976>, <tf.Tensor: shape=(163976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163977>, <tf.Tensor: shape=(163977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163978>, <tf.Tensor: shape=(163978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163979>, <tf.Tensor: shape=(163979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163980>, <tf.Tensor: shape=(163980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163981>, <tf.Tensor: shape=(163981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163982>, <tf.Tensor: shape=(163982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163983>, <tf.Tensor: shape=(163983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163984>, <tf.Tensor: shape=(163984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163985>, <tf.Tensor: shape=(163985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163986>, <tf.Tensor: shape=(163986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163987>, <tf.Tensor: shape=(163987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163988>, <tf.Tensor: shape=(163988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163989>, <tf.Tensor: shape=(163989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163990>, <tf.Tensor: shape=(163990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163991>, <tf.Tensor: shape=(163991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163992>, <tf.Tensor: shape=(163992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163993>, <tf.Tensor: shape=(163993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163994>, <tf.Tensor: shape=(163994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163995>, <tf.Tensor: shape=(163995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163996>, <tf.Tensor: shape=(163996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163997>, <tf.Tensor: shape=(163997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163998>, <tf.Tensor: shape=(163998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=163999>, <tf.Tensor: shape=(163999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164000>, <tf.Tensor: shape=(164000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164001>, <tf.Tensor: shape=(164001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164002>, <tf.Tensor: shape=(164002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164003>, <tf.Tensor: shape=(164003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164004>, <tf.Tensor: shape=(164004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164005>, <tf.Tensor: shape=(164005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164006>, <tf.Tensor: shape=(164006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164007>, <tf.Tensor: shape=(164007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164008>, <tf.Tensor: shape=(164008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164009>, <tf.Tensor: shape=(164009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164010>, <tf.Tensor: shape=(164010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164011>, <tf.Tensor: shape=(164011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164012>, <tf.Tensor: shape=(164012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164013>, <tf.Tensor: shape=(164013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164014>, <tf.Tensor: shape=(164014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164015>, <tf.Tensor: shape=(164015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164016>, <tf.Tensor: shape=(164016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164017>, <tf.Tensor: shape=(164017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164018>, <tf.Tensor: shape=(164018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164019>, <tf.Tensor: shape=(164019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164020>, <tf.Tensor: shape=(164020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164021>, <tf.Tensor: shape=(164021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164022>, <tf.Tensor: shape=(164022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164023>, <tf.Tensor: shape=(164023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164024>, <tf.Tensor: shape=(164024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164025>, <tf.Tensor: shape=(164025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164026>, <tf.Tensor: shape=(164026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164027>, <tf.Tensor: shape=(164027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164028>, <tf.Tensor: shape=(164028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164029>, <tf.Tensor: shape=(164029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164030>, <tf.Tensor: shape=(164030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164031>, <tf.Tensor: shape=(164031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164032>, <tf.Tensor: shape=(164032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164033>, <tf.Tensor: shape=(164033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164034>, <tf.Tensor: shape=(164034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164035>, <tf.Tensor: shape=(164035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164036>, <tf.Tensor: shape=(164036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164037>, <tf.Tensor: shape=(164037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164038>, <tf.Tensor: shape=(164038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164039>, <tf.Tensor: shape=(164039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164040>, <tf.Tensor: shape=(164040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164041>, <tf.Tensor: shape=(164041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164042>, <tf.Tensor: shape=(164042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164043>, <tf.Tensor: shape=(164043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164044>, <tf.Tensor: shape=(164044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164045>, <tf.Tensor: shape=(164045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164046>, <tf.Tensor: shape=(164046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164047>, <tf.Tensor: shape=(164047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164048>, <tf.Tensor: shape=(164048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164049>, <tf.Tensor: shape=(164049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164050>, <tf.Tensor: shape=(164050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164051>, <tf.Tensor: shape=(164051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164052>, <tf.Tensor: shape=(164052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164053>, <tf.Tensor: shape=(164053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164054>, <tf.Tensor: shape=(164054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164055>, <tf.Tensor: shape=(164055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164056>, <tf.Tensor: shape=(164056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164057>, <tf.Tensor: shape=(164057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164058>, <tf.Tensor: shape=(164058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164059>, <tf.Tensor: shape=(164059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164060>, <tf.Tensor: shape=(164060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164061>, <tf.Tensor: shape=(164061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164062>, <tf.Tensor: shape=(164062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164063>, <tf.Tensor: shape=(164063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164064>, <tf.Tensor: shape=(164064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164065>, <tf.Tensor: shape=(164065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164066>, <tf.Tensor: shape=(164066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164067>, <tf.Tensor: shape=(164067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164068>, <tf.Tensor: shape=(164068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164069>, <tf.Tensor: shape=(164069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164070>, <tf.Tensor: shape=(164070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164071>, <tf.Tensor: shape=(164071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164072>, <tf.Tensor: shape=(164072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164073>, <tf.Tensor: shape=(164073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164074>, <tf.Tensor: shape=(164074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164075>, <tf.Tensor: shape=(164075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164076>, <tf.Tensor: shape=(164076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164077>, <tf.Tensor: shape=(164077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164078>, <tf.Tensor: shape=(164078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164079>, <tf.Tensor: shape=(164079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164080>, <tf.Tensor: shape=(164080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164081>, <tf.Tensor: shape=(164081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164082>, <tf.Tensor: shape=(164082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164083>, <tf.Tensor: shape=(164083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164084>, <tf.Tensor: shape=(164084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164085>, <tf.Tensor: shape=(164085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164086>, <tf.Tensor: shape=(164086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164087>, <tf.Tensor: shape=(164087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164088>, <tf.Tensor: shape=(164088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164089>, <tf.Tensor: shape=(164089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164090>, <tf.Tensor: shape=(164090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164091>, <tf.Tensor: shape=(164091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164092>, <tf.Tensor: shape=(164092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164093>, <tf.Tensor: shape=(164093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164094>, <tf.Tensor: shape=(164094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164095>, <tf.Tensor: shape=(164095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164096>, <tf.Tensor: shape=(164096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164097>, <tf.Tensor: shape=(164097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164098>, <tf.Tensor: shape=(164098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164099>, <tf.Tensor: shape=(164099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164100>, <tf.Tensor: shape=(164100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164101>, <tf.Tensor: shape=(164101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164102>, <tf.Tensor: shape=(164102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164103>, <tf.Tensor: shape=(164103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164104>, <tf.Tensor: shape=(164104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164105>, <tf.Tensor: shape=(164105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164106>, <tf.Tensor: shape=(164106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164107>, <tf.Tensor: shape=(164107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164108>, <tf.Tensor: shape=(164108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164109>, <tf.Tensor: shape=(164109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164110>, <tf.Tensor: shape=(164110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164111>, <tf.Tensor: shape=(164111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164112>, <tf.Tensor: shape=(164112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164113>, <tf.Tensor: shape=(164113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164114>, <tf.Tensor: shape=(164114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164115>, <tf.Tensor: shape=(164115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164116>, <tf.Tensor: shape=(164116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164117>, <tf.Tensor: shape=(164117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164118>, <tf.Tensor: shape=(164118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164119>, <tf.Tensor: shape=(164119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164120>, <tf.Tensor: shape=(164120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164121>, <tf.Tensor: shape=(164121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164122>, <tf.Tensor: shape=(164122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164123>, <tf.Tensor: shape=(164123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164124>, <tf.Tensor: shape=(164124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164125>, <tf.Tensor: shape=(164125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164126>, <tf.Tensor: shape=(164126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164127>, <tf.Tensor: shape=(164127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164128>, <tf.Tensor: shape=(164128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164129>, <tf.Tensor: shape=(164129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164130>, <tf.Tensor: shape=(164130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164131>, <tf.Tensor: shape=(164131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164132>, <tf.Tensor: shape=(164132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164133>, <tf.Tensor: shape=(164133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164134>, <tf.Tensor: shape=(164134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164135>, <tf.Tensor: shape=(164135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164136>, <tf.Tensor: shape=(164136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164137>, <tf.Tensor: shape=(164137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164138>, <tf.Tensor: shape=(164138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164139>, <tf.Tensor: shape=(164139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164140>, <tf.Tensor: shape=(164140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164141>, <tf.Tensor: shape=(164141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164142>, <tf.Tensor: shape=(164142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164143>, <tf.Tensor: shape=(164143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164144>, <tf.Tensor: shape=(164144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164145>, <tf.Tensor: shape=(164145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164146>, <tf.Tensor: shape=(164146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164147>, <tf.Tensor: shape=(164147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164148>, <tf.Tensor: shape=(164148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164149>, <tf.Tensor: shape=(164149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164150>, <tf.Tensor: shape=(164150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164151>, <tf.Tensor: shape=(164151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164152>, <tf.Tensor: shape=(164152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164153>, <tf.Tensor: shape=(164153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164154>, <tf.Tensor: shape=(164154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164155>, <tf.Tensor: shape=(164155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164156>, <tf.Tensor: shape=(164156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164157>, <tf.Tensor: shape=(164157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164158>, <tf.Tensor: shape=(164158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164159>, <tf.Tensor: shape=(164159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164160>, <tf.Tensor: shape=(164160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164161>, <tf.Tensor: shape=(164161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164162>, <tf.Tensor: shape=(164162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164163>, <tf.Tensor: shape=(164163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164164>, <tf.Tensor: shape=(164164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164165>, <tf.Tensor: shape=(164165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164166>, <tf.Tensor: shape=(164166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164167>, <tf.Tensor: shape=(164167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164168>, <tf.Tensor: shape=(164168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164169>, <tf.Tensor: shape=(164169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164170>, <tf.Tensor: shape=(164170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164171>, <tf.Tensor: shape=(164171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164172>, <tf.Tensor: shape=(164172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164173>, <tf.Tensor: shape=(164173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164174>, <tf.Tensor: shape=(164174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164175>, <tf.Tensor: shape=(164175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164176>, <tf.Tensor: shape=(164176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164177>, <tf.Tensor: shape=(164177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164178>, <tf.Tensor: shape=(164178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164179>, <tf.Tensor: shape=(164179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164180>, <tf.Tensor: shape=(164180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164181>, <tf.Tensor: shape=(164181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164182>, <tf.Tensor: shape=(164182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164183>, <tf.Tensor: shape=(164183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164184>, <tf.Tensor: shape=(164184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164185>, <tf.Tensor: shape=(164185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164186>, <tf.Tensor: shape=(164186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164187>, <tf.Tensor: shape=(164187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164188>, <tf.Tensor: shape=(164188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164189>, <tf.Tensor: shape=(164189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164190>, <tf.Tensor: shape=(164190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164191>, <tf.Tensor: shape=(164191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164192>, <tf.Tensor: shape=(164192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164193>, <tf.Tensor: shape=(164193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164194>, <tf.Tensor: shape=(164194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164195>, <tf.Tensor: shape=(164195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164196>, <tf.Tensor: shape=(164196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164197>, <tf.Tensor: shape=(164197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164198>, <tf.Tensor: shape=(164198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164199>, <tf.Tensor: shape=(164199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164200>, <tf.Tensor: shape=(164200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164201>, <tf.Tensor: shape=(164201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164202>, <tf.Tensor: shape=(164202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164203>, <tf.Tensor: shape=(164203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164204>, <tf.Tensor: shape=(164204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164205>, <tf.Tensor: shape=(164205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164206>, <tf.Tensor: shape=(164206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164207>, <tf.Tensor: shape=(164207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164208>, <tf.Tensor: shape=(164208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164209>, <tf.Tensor: shape=(164209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164210>, <tf.Tensor: shape=(164210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164211>, <tf.Tensor: shape=(164211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164212>, <tf.Tensor: shape=(164212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164213>, <tf.Tensor: shape=(164213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164214>, <tf.Tensor: shape=(164214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164215>, <tf.Tensor: shape=(164215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164216>, <tf.Tensor: shape=(164216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164217>, <tf.Tensor: shape=(164217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164218>, <tf.Tensor: shape=(164218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164219>, <tf.Tensor: shape=(164219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164220>, <tf.Tensor: shape=(164220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164221>, <tf.Tensor: shape=(164221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164222>, <tf.Tensor: shape=(164222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164223>, <tf.Tensor: shape=(164223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164224>, <tf.Tensor: shape=(164224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164225>, <tf.Tensor: shape=(164225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164226>, <tf.Tensor: shape=(164226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164227>, <tf.Tensor: shape=(164227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164228>, <tf.Tensor: shape=(164228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164229>, <tf.Tensor: shape=(164229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164230>, <tf.Tensor: shape=(164230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164231>, <tf.Tensor: shape=(164231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164232>, <tf.Tensor: shape=(164232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164233>, <tf.Tensor: shape=(164233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164234>, <tf.Tensor: shape=(164234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164235>, <tf.Tensor: shape=(164235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164236>, <tf.Tensor: shape=(164236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164237>, <tf.Tensor: shape=(164237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164238>, <tf.Tensor: shape=(164238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164239>, <tf.Tensor: shape=(164239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164240>, <tf.Tensor: shape=(164240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164241>, <tf.Tensor: shape=(164241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164242>, <tf.Tensor: shape=(164242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164243>, <tf.Tensor: shape=(164243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164244>, <tf.Tensor: shape=(164244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164245>, <tf.Tensor: shape=(164245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164246>, <tf.Tensor: shape=(164246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164247>, <tf.Tensor: shape=(164247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164248>, <tf.Tensor: shape=(164248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164249>, <tf.Tensor: shape=(164249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164250>, <tf.Tensor: shape=(164250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164251>, <tf.Tensor: shape=(164251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164252>, <tf.Tensor: shape=(164252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164253>, <tf.Tensor: shape=(164253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164254>, <tf.Tensor: shape=(164254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164255>, <tf.Tensor: shape=(164255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164256>, <tf.Tensor: shape=(164256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164257>, <tf.Tensor: shape=(164257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164258>, <tf.Tensor: shape=(164258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164259>, <tf.Tensor: shape=(164259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164260>, <tf.Tensor: shape=(164260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164261>, <tf.Tensor: shape=(164261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164262>, <tf.Tensor: shape=(164262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164263>, <tf.Tensor: shape=(164263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164264>, <tf.Tensor: shape=(164264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164265>, <tf.Tensor: shape=(164265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164266>, <tf.Tensor: shape=(164266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164267>, <tf.Tensor: shape=(164267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164268>, <tf.Tensor: shape=(164268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164269>, <tf.Tensor: shape=(164269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164270>, <tf.Tensor: shape=(164270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164271>, <tf.Tensor: shape=(164271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164272>, <tf.Tensor: shape=(164272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164273>, <tf.Tensor: shape=(164273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164274>, <tf.Tensor: shape=(164274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164275>, <tf.Tensor: shape=(164275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164276>, <tf.Tensor: shape=(164276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164277>, <tf.Tensor: shape=(164277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164278>, <tf.Tensor: shape=(164278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164279>, <tf.Tensor: shape=(164279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164280>, <tf.Tensor: shape=(164280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164281>, <tf.Tensor: shape=(164281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164282>, <tf.Tensor: shape=(164282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164283>, <tf.Tensor: shape=(164283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164284>, <tf.Tensor: shape=(164284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164285>, <tf.Tensor: shape=(164285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164286>, <tf.Tensor: shape=(164286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164287>, <tf.Tensor: shape=(164287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164288>, <tf.Tensor: shape=(164288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164289>, <tf.Tensor: shape=(164289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164290>, <tf.Tensor: shape=(164290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164291>, <tf.Tensor: shape=(164291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164292>, <tf.Tensor: shape=(164292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164293>, <tf.Tensor: shape=(164293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164294>, <tf.Tensor: shape=(164294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164295>, <tf.Tensor: shape=(164295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164296>, <tf.Tensor: shape=(164296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164297>, <tf.Tensor: shape=(164297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164298>, <tf.Tensor: shape=(164298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164299>, <tf.Tensor: shape=(164299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164300>, <tf.Tensor: shape=(164300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164301>, <tf.Tensor: shape=(164301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164302>, <tf.Tensor: shape=(164302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164303>, <tf.Tensor: shape=(164303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164304>, <tf.Tensor: shape=(164304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164305>, <tf.Tensor: shape=(164305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164306>, <tf.Tensor: shape=(164306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164307>, <tf.Tensor: shape=(164307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164308>, <tf.Tensor: shape=(164308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164309>, <tf.Tensor: shape=(164309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164310>, <tf.Tensor: shape=(164310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164311>, <tf.Tensor: shape=(164311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164312>, <tf.Tensor: shape=(164312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164313>, <tf.Tensor: shape=(164313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164314>, <tf.Tensor: shape=(164314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164315>, <tf.Tensor: shape=(164315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164316>, <tf.Tensor: shape=(164316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164317>, <tf.Tensor: shape=(164317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164318>, <tf.Tensor: shape=(164318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164319>, <tf.Tensor: shape=(164319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164320>, <tf.Tensor: shape=(164320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164321>, <tf.Tensor: shape=(164321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164322>, <tf.Tensor: shape=(164322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164323>, <tf.Tensor: shape=(164323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164324>, <tf.Tensor: shape=(164324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164325>, <tf.Tensor: shape=(164325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164326>, <tf.Tensor: shape=(164326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164327>, <tf.Tensor: shape=(164327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164328>, <tf.Tensor: shape=(164328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164329>, <tf.Tensor: shape=(164329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164330>, <tf.Tensor: shape=(164330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164331>, <tf.Tensor: shape=(164331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164332>, <tf.Tensor: shape=(164332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164333>, <tf.Tensor: shape=(164333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164334>, <tf.Tensor: shape=(164334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164335>, <tf.Tensor: shape=(164335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164336>, <tf.Tensor: shape=(164336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164337>, <tf.Tensor: shape=(164337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164338>, <tf.Tensor: shape=(164338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164339>, <tf.Tensor: shape=(164339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164340>, <tf.Tensor: shape=(164340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164341>, <tf.Tensor: shape=(164341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164342>, <tf.Tensor: shape=(164342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164343>, <tf.Tensor: shape=(164343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164344>, <tf.Tensor: shape=(164344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164345>, <tf.Tensor: shape=(164345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164346>, <tf.Tensor: shape=(164346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164347>, <tf.Tensor: shape=(164347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164348>, <tf.Tensor: shape=(164348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164349>, <tf.Tensor: shape=(164349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164350>, <tf.Tensor: shape=(164350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164351>, <tf.Tensor: shape=(164351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164352>, <tf.Tensor: shape=(164352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164353>, <tf.Tensor: shape=(164353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164354>, <tf.Tensor: shape=(164354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164355>, <tf.Tensor: shape=(164355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164356>, <tf.Tensor: shape=(164356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164357>, <tf.Tensor: shape=(164357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164358>, <tf.Tensor: shape=(164358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164359>, <tf.Tensor: shape=(164359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164360>, <tf.Tensor: shape=(164360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164361>, <tf.Tensor: shape=(164361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164362>, <tf.Tensor: shape=(164362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164363>, <tf.Tensor: shape=(164363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164364>, <tf.Tensor: shape=(164364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164365>, <tf.Tensor: shape=(164365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164366>, <tf.Tensor: shape=(164366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164367>, <tf.Tensor: shape=(164367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164368>, <tf.Tensor: shape=(164368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164369>, <tf.Tensor: shape=(164369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164370>, <tf.Tensor: shape=(164370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164371>, <tf.Tensor: shape=(164371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164372>, <tf.Tensor: shape=(164372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164373>, <tf.Tensor: shape=(164373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164374>, <tf.Tensor: shape=(164374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164375>, <tf.Tensor: shape=(164375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164376>, <tf.Tensor: shape=(164376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164377>, <tf.Tensor: shape=(164377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164378>, <tf.Tensor: shape=(164378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164379>, <tf.Tensor: shape=(164379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164380>, <tf.Tensor: shape=(164380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164381>, <tf.Tensor: shape=(164381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164382>, <tf.Tensor: shape=(164382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164383>, <tf.Tensor: shape=(164383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164384>, <tf.Tensor: shape=(164384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164385>, <tf.Tensor: shape=(164385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164386>, <tf.Tensor: shape=(164386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164387>, <tf.Tensor: shape=(164387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164388>, <tf.Tensor: shape=(164388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164389>, <tf.Tensor: shape=(164389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164390>, <tf.Tensor: shape=(164390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164391>, <tf.Tensor: shape=(164391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164392>, <tf.Tensor: shape=(164392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164393>, <tf.Tensor: shape=(164393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164394>, <tf.Tensor: shape=(164394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164395>, <tf.Tensor: shape=(164395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164396>, <tf.Tensor: shape=(164396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164397>, <tf.Tensor: shape=(164397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164398>, <tf.Tensor: shape=(164398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164399>, <tf.Tensor: shape=(164399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164400>, <tf.Tensor: shape=(164400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164401>, <tf.Tensor: shape=(164401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164402>, <tf.Tensor: shape=(164402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164403>, <tf.Tensor: shape=(164403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164404>, <tf.Tensor: shape=(164404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164405>, <tf.Tensor: shape=(164405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164406>, <tf.Tensor: shape=(164406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164407>, <tf.Tensor: shape=(164407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164408>, <tf.Tensor: shape=(164408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164409>, <tf.Tensor: shape=(164409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164410>, <tf.Tensor: shape=(164410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164411>, <tf.Tensor: shape=(164411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164412>, <tf.Tensor: shape=(164412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164413>, <tf.Tensor: shape=(164413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164414>, <tf.Tensor: shape=(164414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164415>, <tf.Tensor: shape=(164415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164416>, <tf.Tensor: shape=(164416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164417>, <tf.Tensor: shape=(164417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164418>, <tf.Tensor: shape=(164418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164419>, <tf.Tensor: shape=(164419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164420>, <tf.Tensor: shape=(164420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164421>, <tf.Tensor: shape=(164421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164422>, <tf.Tensor: shape=(164422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164423>, <tf.Tensor: shape=(164423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164424>, <tf.Tensor: shape=(164424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164425>, <tf.Tensor: shape=(164425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164426>, <tf.Tensor: shape=(164426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164427>, <tf.Tensor: shape=(164427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164428>, <tf.Tensor: shape=(164428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164429>, <tf.Tensor: shape=(164429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164430>, <tf.Tensor: shape=(164430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164431>, <tf.Tensor: shape=(164431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164432>, <tf.Tensor: shape=(164432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164433>, <tf.Tensor: shape=(164433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164434>, <tf.Tensor: shape=(164434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164435>, <tf.Tensor: shape=(164435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164436>, <tf.Tensor: shape=(164436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164437>, <tf.Tensor: shape=(164437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164438>, <tf.Tensor: shape=(164438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164439>, <tf.Tensor: shape=(164439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164440>, <tf.Tensor: shape=(164440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164441>, <tf.Tensor: shape=(164441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164442>, <tf.Tensor: shape=(164442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164443>, <tf.Tensor: shape=(164443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164444>, <tf.Tensor: shape=(164444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164445>, <tf.Tensor: shape=(164445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164446>, <tf.Tensor: shape=(164446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164447>, <tf.Tensor: shape=(164447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164448>, <tf.Tensor: shape=(164448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164449>, <tf.Tensor: shape=(164449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164450>, <tf.Tensor: shape=(164450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164451>, <tf.Tensor: shape=(164451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164452>, <tf.Tensor: shape=(164452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164453>, <tf.Tensor: shape=(164453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164454>, <tf.Tensor: shape=(164454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164455>, <tf.Tensor: shape=(164455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164456>, <tf.Tensor: shape=(164456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164457>, <tf.Tensor: shape=(164457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164458>, <tf.Tensor: shape=(164458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164459>, <tf.Tensor: shape=(164459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164460>, <tf.Tensor: shape=(164460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164461>, <tf.Tensor: shape=(164461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164462>, <tf.Tensor: shape=(164462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164463>, <tf.Tensor: shape=(164463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164464>, <tf.Tensor: shape=(164464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164465>, <tf.Tensor: shape=(164465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164466>, <tf.Tensor: shape=(164466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164467>, <tf.Tensor: shape=(164467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164468>, <tf.Tensor: shape=(164468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164469>, <tf.Tensor: shape=(164469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164470>, <tf.Tensor: shape=(164470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164471>, <tf.Tensor: shape=(164471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164472>, <tf.Tensor: shape=(164472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164473>, <tf.Tensor: shape=(164473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164474>, <tf.Tensor: shape=(164474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164475>, <tf.Tensor: shape=(164475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164476>, <tf.Tensor: shape=(164476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164477>, <tf.Tensor: shape=(164477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164478>, <tf.Tensor: shape=(164478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164479>, <tf.Tensor: shape=(164479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164480>, <tf.Tensor: shape=(164480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164481>, <tf.Tensor: shape=(164481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164482>, <tf.Tensor: shape=(164482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164483>, <tf.Tensor: shape=(164483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164484>, <tf.Tensor: shape=(164484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164485>, <tf.Tensor: shape=(164485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164486>, <tf.Tensor: shape=(164486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164487>, <tf.Tensor: shape=(164487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164488>, <tf.Tensor: shape=(164488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164489>, <tf.Tensor: shape=(164489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164490>, <tf.Tensor: shape=(164490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164491>, <tf.Tensor: shape=(164491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164492>, <tf.Tensor: shape=(164492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164493>, <tf.Tensor: shape=(164493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164494>, <tf.Tensor: shape=(164494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164495>, <tf.Tensor: shape=(164495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164496>, <tf.Tensor: shape=(164496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164497>, <tf.Tensor: shape=(164497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164498>, <tf.Tensor: shape=(164498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164499>, <tf.Tensor: shape=(164499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164500>, <tf.Tensor: shape=(164500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164501>, <tf.Tensor: shape=(164501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164502>, <tf.Tensor: shape=(164502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164503>, <tf.Tensor: shape=(164503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164504>, <tf.Tensor: shape=(164504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164505>, <tf.Tensor: shape=(164505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164506>, <tf.Tensor: shape=(164506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164507>, <tf.Tensor: shape=(164507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164508>, <tf.Tensor: shape=(164508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164509>, <tf.Tensor: shape=(164509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164510>, <tf.Tensor: shape=(164510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164511>, <tf.Tensor: shape=(164511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164512>, <tf.Tensor: shape=(164512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164513>, <tf.Tensor: shape=(164513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164514>, <tf.Tensor: shape=(164514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164515>, <tf.Tensor: shape=(164515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164516>, <tf.Tensor: shape=(164516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164517>, <tf.Tensor: shape=(164517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164518>, <tf.Tensor: shape=(164518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164519>, <tf.Tensor: shape=(164519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164520>, <tf.Tensor: shape=(164520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164521>, <tf.Tensor: shape=(164521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164522>, <tf.Tensor: shape=(164522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164523>, <tf.Tensor: shape=(164523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164524>, <tf.Tensor: shape=(164524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164525>, <tf.Tensor: shape=(164525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164526>, <tf.Tensor: shape=(164526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164527>, <tf.Tensor: shape=(164527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164528>, <tf.Tensor: shape=(164528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164529>, <tf.Tensor: shape=(164529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164530>, <tf.Tensor: shape=(164530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164531>, <tf.Tensor: shape=(164531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164532>, <tf.Tensor: shape=(164532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164533>, <tf.Tensor: shape=(164533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164534>, <tf.Tensor: shape=(164534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164535>, <tf.Tensor: shape=(164535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164536>, <tf.Tensor: shape=(164536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164537>, <tf.Tensor: shape=(164537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164538>, <tf.Tensor: shape=(164538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164539>, <tf.Tensor: shape=(164539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164540>, <tf.Tensor: shape=(164540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164541>, <tf.Tensor: shape=(164541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164542>, <tf.Tensor: shape=(164542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164543>, <tf.Tensor: shape=(164543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164544>, <tf.Tensor: shape=(164544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164545>, <tf.Tensor: shape=(164545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164546>, <tf.Tensor: shape=(164546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164547>, <tf.Tensor: shape=(164547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164548>, <tf.Tensor: shape=(164548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164549>, <tf.Tensor: shape=(164549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164550>, <tf.Tensor: shape=(164550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164551>, <tf.Tensor: shape=(164551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164552>, <tf.Tensor: shape=(164552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164553>, <tf.Tensor: shape=(164553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164554>, <tf.Tensor: shape=(164554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164555>, <tf.Tensor: shape=(164555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164556>, <tf.Tensor: shape=(164556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164557>, <tf.Tensor: shape=(164557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164558>, <tf.Tensor: shape=(164558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164559>, <tf.Tensor: shape=(164559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164560>, <tf.Tensor: shape=(164560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164561>, <tf.Tensor: shape=(164561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164562>, <tf.Tensor: shape=(164562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164563>, <tf.Tensor: shape=(164563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164564>, <tf.Tensor: shape=(164564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164565>, <tf.Tensor: shape=(164565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164566>, <tf.Tensor: shape=(164566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164567>, <tf.Tensor: shape=(164567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164568>, <tf.Tensor: shape=(164568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164569>, <tf.Tensor: shape=(164569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164570>, <tf.Tensor: shape=(164570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164571>, <tf.Tensor: shape=(164571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164572>, <tf.Tensor: shape=(164572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164573>, <tf.Tensor: shape=(164573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164574>, <tf.Tensor: shape=(164574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164575>, <tf.Tensor: shape=(164575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164576>, <tf.Tensor: shape=(164576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164577>, <tf.Tensor: shape=(164577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164578>, <tf.Tensor: shape=(164578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164579>, <tf.Tensor: shape=(164579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164580>, <tf.Tensor: shape=(164580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164581>, <tf.Tensor: shape=(164581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164582>, <tf.Tensor: shape=(164582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164583>, <tf.Tensor: shape=(164583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164584>, <tf.Tensor: shape=(164584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164585>, <tf.Tensor: shape=(164585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164586>, <tf.Tensor: shape=(164586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164587>, <tf.Tensor: shape=(164587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164588>, <tf.Tensor: shape=(164588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164589>, <tf.Tensor: shape=(164589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164590>, <tf.Tensor: shape=(164590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164591>, <tf.Tensor: shape=(164591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164592>, <tf.Tensor: shape=(164592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164593>, <tf.Tensor: shape=(164593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164594>, <tf.Tensor: shape=(164594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164595>, <tf.Tensor: shape=(164595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164596>, <tf.Tensor: shape=(164596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164597>, <tf.Tensor: shape=(164597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164598>, <tf.Tensor: shape=(164598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164599>, <tf.Tensor: shape=(164599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164600>, <tf.Tensor: shape=(164600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164601>, <tf.Tensor: shape=(164601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164602>, <tf.Tensor: shape=(164602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164603>, <tf.Tensor: shape=(164603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164604>, <tf.Tensor: shape=(164604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164605>, <tf.Tensor: shape=(164605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164606>, <tf.Tensor: shape=(164606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164607>, <tf.Tensor: shape=(164607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164608>, <tf.Tensor: shape=(164608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164609>, <tf.Tensor: shape=(164609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164610>, <tf.Tensor: shape=(164610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164611>, <tf.Tensor: shape=(164611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164612>, <tf.Tensor: shape=(164612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164613>, <tf.Tensor: shape=(164613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164614>, <tf.Tensor: shape=(164614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164615>, <tf.Tensor: shape=(164615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164616>, <tf.Tensor: shape=(164616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164617>, <tf.Tensor: shape=(164617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164618>, <tf.Tensor: shape=(164618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164619>, <tf.Tensor: shape=(164619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164620>, <tf.Tensor: shape=(164620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164621>, <tf.Tensor: shape=(164621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164622>, <tf.Tensor: shape=(164622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164623>, <tf.Tensor: shape=(164623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164624>, <tf.Tensor: shape=(164624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164625>, <tf.Tensor: shape=(164625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164626>, <tf.Tensor: shape=(164626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164627>, <tf.Tensor: shape=(164627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164628>, <tf.Tensor: shape=(164628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164629>, <tf.Tensor: shape=(164629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164630>, <tf.Tensor: shape=(164630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164631>, <tf.Tensor: shape=(164631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164632>, <tf.Tensor: shape=(164632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164633>, <tf.Tensor: shape=(164633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164634>, <tf.Tensor: shape=(164634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164635>, <tf.Tensor: shape=(164635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164636>, <tf.Tensor: shape=(164636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164637>, <tf.Tensor: shape=(164637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164638>, <tf.Tensor: shape=(164638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164639>, <tf.Tensor: shape=(164639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164640>, <tf.Tensor: shape=(164640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164641>, <tf.Tensor: shape=(164641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164642>, <tf.Tensor: shape=(164642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164643>, <tf.Tensor: shape=(164643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164644>, <tf.Tensor: shape=(164644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164645>, <tf.Tensor: shape=(164645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164646>, <tf.Tensor: shape=(164646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164647>, <tf.Tensor: shape=(164647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164648>, <tf.Tensor: shape=(164648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164649>, <tf.Tensor: shape=(164649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164650>, <tf.Tensor: shape=(164650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164651>, <tf.Tensor: shape=(164651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164652>, <tf.Tensor: shape=(164652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164653>, <tf.Tensor: shape=(164653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164654>, <tf.Tensor: shape=(164654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164655>, <tf.Tensor: shape=(164655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164656>, <tf.Tensor: shape=(164656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164657>, <tf.Tensor: shape=(164657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164658>, <tf.Tensor: shape=(164658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164659>, <tf.Tensor: shape=(164659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164660>, <tf.Tensor: shape=(164660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164661>, <tf.Tensor: shape=(164661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164662>, <tf.Tensor: shape=(164662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164663>, <tf.Tensor: shape=(164663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164664>, <tf.Tensor: shape=(164664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164665>, <tf.Tensor: shape=(164665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164666>, <tf.Tensor: shape=(164666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164667>, <tf.Tensor: shape=(164667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164668>, <tf.Tensor: shape=(164668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164669>, <tf.Tensor: shape=(164669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164670>, <tf.Tensor: shape=(164670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164671>, <tf.Tensor: shape=(164671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164672>, <tf.Tensor: shape=(164672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164673>, <tf.Tensor: shape=(164673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164674>, <tf.Tensor: shape=(164674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164675>, <tf.Tensor: shape=(164675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164676>, <tf.Tensor: shape=(164676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164677>, <tf.Tensor: shape=(164677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164678>, <tf.Tensor: shape=(164678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164679>, <tf.Tensor: shape=(164679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164680>, <tf.Tensor: shape=(164680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164681>, <tf.Tensor: shape=(164681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164682>, <tf.Tensor: shape=(164682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164683>, <tf.Tensor: shape=(164683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164684>, <tf.Tensor: shape=(164684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164685>, <tf.Tensor: shape=(164685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164686>, <tf.Tensor: shape=(164686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164687>, <tf.Tensor: shape=(164687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164688>, <tf.Tensor: shape=(164688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164689>, <tf.Tensor: shape=(164689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164690>, <tf.Tensor: shape=(164690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164691>, <tf.Tensor: shape=(164691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164692>, <tf.Tensor: shape=(164692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164693>, <tf.Tensor: shape=(164693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164694>, <tf.Tensor: shape=(164694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164695>, <tf.Tensor: shape=(164695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164696>, <tf.Tensor: shape=(164696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164697>, <tf.Tensor: shape=(164697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164698>, <tf.Tensor: shape=(164698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164699>, <tf.Tensor: shape=(164699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164700>, <tf.Tensor: shape=(164700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164701>, <tf.Tensor: shape=(164701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164702>, <tf.Tensor: shape=(164702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164703>, <tf.Tensor: shape=(164703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164704>, <tf.Tensor: shape=(164704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164705>, <tf.Tensor: shape=(164705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164706>, <tf.Tensor: shape=(164706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164707>, <tf.Tensor: shape=(164707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164708>, <tf.Tensor: shape=(164708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164709>, <tf.Tensor: shape=(164709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164710>, <tf.Tensor: shape=(164710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164711>, <tf.Tensor: shape=(164711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164712>, <tf.Tensor: shape=(164712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164713>, <tf.Tensor: shape=(164713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164714>, <tf.Tensor: shape=(164714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164715>, <tf.Tensor: shape=(164715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164716>, <tf.Tensor: shape=(164716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164717>, <tf.Tensor: shape=(164717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164718>, <tf.Tensor: shape=(164718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164719>, <tf.Tensor: shape=(164719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164720>, <tf.Tensor: shape=(164720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164721>, <tf.Tensor: shape=(164721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164722>, <tf.Tensor: shape=(164722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164723>, <tf.Tensor: shape=(164723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164724>, <tf.Tensor: shape=(164724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164725>, <tf.Tensor: shape=(164725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164726>, <tf.Tensor: shape=(164726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164727>, <tf.Tensor: shape=(164727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164728>, <tf.Tensor: shape=(164728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164729>, <tf.Tensor: shape=(164729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164730>, <tf.Tensor: shape=(164730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164731>, <tf.Tensor: shape=(164731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164732>, <tf.Tensor: shape=(164732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164733>, <tf.Tensor: shape=(164733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164734>, <tf.Tensor: shape=(164734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164735>, <tf.Tensor: shape=(164735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164736>, <tf.Tensor: shape=(164736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164737>, <tf.Tensor: shape=(164737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164738>, <tf.Tensor: shape=(164738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164739>, <tf.Tensor: shape=(164739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164740>, <tf.Tensor: shape=(164740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164741>, <tf.Tensor: shape=(164741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164742>, <tf.Tensor: shape=(164742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164743>, <tf.Tensor: shape=(164743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164744>, <tf.Tensor: shape=(164744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164745>, <tf.Tensor: shape=(164745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164746>, <tf.Tensor: shape=(164746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164747>, <tf.Tensor: shape=(164747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164748>, <tf.Tensor: shape=(164748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164749>, <tf.Tensor: shape=(164749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164750>, <tf.Tensor: shape=(164750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164751>, <tf.Tensor: shape=(164751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164752>, <tf.Tensor: shape=(164752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164753>, <tf.Tensor: shape=(164753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164754>, <tf.Tensor: shape=(164754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164755>, <tf.Tensor: shape=(164755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164756>, <tf.Tensor: shape=(164756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164757>, <tf.Tensor: shape=(164757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164758>, <tf.Tensor: shape=(164758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164759>, <tf.Tensor: shape=(164759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164760>, <tf.Tensor: shape=(164760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164761>, <tf.Tensor: shape=(164761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164762>, <tf.Tensor: shape=(164762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164763>, <tf.Tensor: shape=(164763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164764>, <tf.Tensor: shape=(164764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164765>, <tf.Tensor: shape=(164765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164766>, <tf.Tensor: shape=(164766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164767>, <tf.Tensor: shape=(164767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164768>, <tf.Tensor: shape=(164768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164769>, <tf.Tensor: shape=(164769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164770>, <tf.Tensor: shape=(164770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164771>, <tf.Tensor: shape=(164771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164772>, <tf.Tensor: shape=(164772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164773>, <tf.Tensor: shape=(164773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164774>, <tf.Tensor: shape=(164774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164775>, <tf.Tensor: shape=(164775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164776>, <tf.Tensor: shape=(164776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164777>, <tf.Tensor: shape=(164777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164778>, <tf.Tensor: shape=(164778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164779>, <tf.Tensor: shape=(164779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164780>, <tf.Tensor: shape=(164780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164781>, <tf.Tensor: shape=(164781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164782>, <tf.Tensor: shape=(164782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164783>, <tf.Tensor: shape=(164783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164784>, <tf.Tensor: shape=(164784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164785>, <tf.Tensor: shape=(164785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164786>, <tf.Tensor: shape=(164786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164787>, <tf.Tensor: shape=(164787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164788>, <tf.Tensor: shape=(164788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164789>, <tf.Tensor: shape=(164789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164790>, <tf.Tensor: shape=(164790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164791>, <tf.Tensor: shape=(164791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164792>, <tf.Tensor: shape=(164792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164793>, <tf.Tensor: shape=(164793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164794>, <tf.Tensor: shape=(164794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164795>, <tf.Tensor: shape=(164795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164796>, <tf.Tensor: shape=(164796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164797>, <tf.Tensor: shape=(164797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164798>, <tf.Tensor: shape=(164798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164799>, <tf.Tensor: shape=(164799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164800>, <tf.Tensor: shape=(164800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164801>, <tf.Tensor: shape=(164801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164802>, <tf.Tensor: shape=(164802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164803>, <tf.Tensor: shape=(164803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164804>, <tf.Tensor: shape=(164804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164805>, <tf.Tensor: shape=(164805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164806>, <tf.Tensor: shape=(164806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164807>, <tf.Tensor: shape=(164807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164808>, <tf.Tensor: shape=(164808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164809>, <tf.Tensor: shape=(164809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164810>, <tf.Tensor: shape=(164810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164811>, <tf.Tensor: shape=(164811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164812>, <tf.Tensor: shape=(164812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164813>, <tf.Tensor: shape=(164813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164814>, <tf.Tensor: shape=(164814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164815>, <tf.Tensor: shape=(164815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164816>, <tf.Tensor: shape=(164816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164817>, <tf.Tensor: shape=(164817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164818>, <tf.Tensor: shape=(164818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164819>, <tf.Tensor: shape=(164819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164820>, <tf.Tensor: shape=(164820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164821>, <tf.Tensor: shape=(164821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164822>, <tf.Tensor: shape=(164822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164823>, <tf.Tensor: shape=(164823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164824>, <tf.Tensor: shape=(164824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164825>, <tf.Tensor: shape=(164825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164826>, <tf.Tensor: shape=(164826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164827>, <tf.Tensor: shape=(164827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164828>, <tf.Tensor: shape=(164828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164829>, <tf.Tensor: shape=(164829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164830>, <tf.Tensor: shape=(164830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164831>, <tf.Tensor: shape=(164831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164832>, <tf.Tensor: shape=(164832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164833>, <tf.Tensor: shape=(164833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164834>, <tf.Tensor: shape=(164834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164835>, <tf.Tensor: shape=(164835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164836>, <tf.Tensor: shape=(164836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164837>, <tf.Tensor: shape=(164837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164838>, <tf.Tensor: shape=(164838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164839>, <tf.Tensor: shape=(164839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164840>, <tf.Tensor: shape=(164840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164841>, <tf.Tensor: shape=(164841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164842>, <tf.Tensor: shape=(164842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164843>, <tf.Tensor: shape=(164843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164844>, <tf.Tensor: shape=(164844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164845>, <tf.Tensor: shape=(164845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164846>, <tf.Tensor: shape=(164846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164847>, <tf.Tensor: shape=(164847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164848>, <tf.Tensor: shape=(164848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164849>, <tf.Tensor: shape=(164849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164850>, <tf.Tensor: shape=(164850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164851>, <tf.Tensor: shape=(164851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164852>, <tf.Tensor: shape=(164852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164853>, <tf.Tensor: shape=(164853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164854>, <tf.Tensor: shape=(164854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164855>, <tf.Tensor: shape=(164855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164856>, <tf.Tensor: shape=(164856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164857>, <tf.Tensor: shape=(164857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164858>, <tf.Tensor: shape=(164858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164859>, <tf.Tensor: shape=(164859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164860>, <tf.Tensor: shape=(164860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164861>, <tf.Tensor: shape=(164861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164862>, <tf.Tensor: shape=(164862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164863>, <tf.Tensor: shape=(164863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164864>, <tf.Tensor: shape=(164864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164865>, <tf.Tensor: shape=(164865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164866>, <tf.Tensor: shape=(164866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164867>, <tf.Tensor: shape=(164867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164868>, <tf.Tensor: shape=(164868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164869>, <tf.Tensor: shape=(164869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164870>, <tf.Tensor: shape=(164870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164871>, <tf.Tensor: shape=(164871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164872>, <tf.Tensor: shape=(164872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164873>, <tf.Tensor: shape=(164873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164874>, <tf.Tensor: shape=(164874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164875>, <tf.Tensor: shape=(164875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164876>, <tf.Tensor: shape=(164876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164877>, <tf.Tensor: shape=(164877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164878>, <tf.Tensor: shape=(164878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164879>, <tf.Tensor: shape=(164879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164880>, <tf.Tensor: shape=(164880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164881>, <tf.Tensor: shape=(164881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164882>, <tf.Tensor: shape=(164882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164883>, <tf.Tensor: shape=(164883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164884>, <tf.Tensor: shape=(164884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164885>, <tf.Tensor: shape=(164885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164886>, <tf.Tensor: shape=(164886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164887>, <tf.Tensor: shape=(164887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164888>, <tf.Tensor: shape=(164888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164889>, <tf.Tensor: shape=(164889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164890>, <tf.Tensor: shape=(164890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164891>, <tf.Tensor: shape=(164891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164892>, <tf.Tensor: shape=(164892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164893>, <tf.Tensor: shape=(164893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164894>, <tf.Tensor: shape=(164894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164895>, <tf.Tensor: shape=(164895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164896>, <tf.Tensor: shape=(164896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164897>, <tf.Tensor: shape=(164897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164898>, <tf.Tensor: shape=(164898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164899>, <tf.Tensor: shape=(164899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164900>, <tf.Tensor: shape=(164900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164901>, <tf.Tensor: shape=(164901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164902>, <tf.Tensor: shape=(164902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164903>, <tf.Tensor: shape=(164903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164904>, <tf.Tensor: shape=(164904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164905>, <tf.Tensor: shape=(164905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164906>, <tf.Tensor: shape=(164906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164907>, <tf.Tensor: shape=(164907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164908>, <tf.Tensor: shape=(164908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164909>, <tf.Tensor: shape=(164909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164910>, <tf.Tensor: shape=(164910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164911>, <tf.Tensor: shape=(164911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164912>, <tf.Tensor: shape=(164912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164913>, <tf.Tensor: shape=(164913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164914>, <tf.Tensor: shape=(164914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164915>, <tf.Tensor: shape=(164915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164916>, <tf.Tensor: shape=(164916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164917>, <tf.Tensor: shape=(164917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164918>, <tf.Tensor: shape=(164918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164919>, <tf.Tensor: shape=(164919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164920>, <tf.Tensor: shape=(164920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164921>, <tf.Tensor: shape=(164921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164922>, <tf.Tensor: shape=(164922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164923>, <tf.Tensor: shape=(164923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164924>, <tf.Tensor: shape=(164924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164925>, <tf.Tensor: shape=(164925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164926>, <tf.Tensor: shape=(164926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164927>, <tf.Tensor: shape=(164927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164928>, <tf.Tensor: shape=(164928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164929>, <tf.Tensor: shape=(164929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164930>, <tf.Tensor: shape=(164930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164931>, <tf.Tensor: shape=(164931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164932>, <tf.Tensor: shape=(164932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164933>, <tf.Tensor: shape=(164933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164934>, <tf.Tensor: shape=(164934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164935>, <tf.Tensor: shape=(164935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164936>, <tf.Tensor: shape=(164936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164937>, <tf.Tensor: shape=(164937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164938>, <tf.Tensor: shape=(164938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164939>, <tf.Tensor: shape=(164939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164940>, <tf.Tensor: shape=(164940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164941>, <tf.Tensor: shape=(164941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164942>, <tf.Tensor: shape=(164942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164943>, <tf.Tensor: shape=(164943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164944>, <tf.Tensor: shape=(164944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164945>, <tf.Tensor: shape=(164945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164946>, <tf.Tensor: shape=(164946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164947>, <tf.Tensor: shape=(164947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164948>, <tf.Tensor: shape=(164948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164949>, <tf.Tensor: shape=(164949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164950>, <tf.Tensor: shape=(164950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164951>, <tf.Tensor: shape=(164951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164952>, <tf.Tensor: shape=(164952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164953>, <tf.Tensor: shape=(164953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164954>, <tf.Tensor: shape=(164954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164955>, <tf.Tensor: shape=(164955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164956>, <tf.Tensor: shape=(164956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164957>, <tf.Tensor: shape=(164957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164958>, <tf.Tensor: shape=(164958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164959>, <tf.Tensor: shape=(164959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164960>, <tf.Tensor: shape=(164960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164961>, <tf.Tensor: shape=(164961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164962>, <tf.Tensor: shape=(164962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164963>, <tf.Tensor: shape=(164963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164964>, <tf.Tensor: shape=(164964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164965>, <tf.Tensor: shape=(164965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164966>, <tf.Tensor: shape=(164966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164967>, <tf.Tensor: shape=(164967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164968>, <tf.Tensor: shape=(164968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164969>, <tf.Tensor: shape=(164969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164970>, <tf.Tensor: shape=(164970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164971>, <tf.Tensor: shape=(164971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164972>, <tf.Tensor: shape=(164972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164973>, <tf.Tensor: shape=(164973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164974>, <tf.Tensor: shape=(164974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164975>, <tf.Tensor: shape=(164975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164976>, <tf.Tensor: shape=(164976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164977>, <tf.Tensor: shape=(164977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164978>, <tf.Tensor: shape=(164978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164979>, <tf.Tensor: shape=(164979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164980>, <tf.Tensor: shape=(164980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164981>, <tf.Tensor: shape=(164981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164982>, <tf.Tensor: shape=(164982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164983>, <tf.Tensor: shape=(164983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164984>, <tf.Tensor: shape=(164984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164985>, <tf.Tensor: shape=(164985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164986>, <tf.Tensor: shape=(164986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164987>, <tf.Tensor: shape=(164987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164988>, <tf.Tensor: shape=(164988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164989>, <tf.Tensor: shape=(164989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164990>, <tf.Tensor: shape=(164990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164991>, <tf.Tensor: shape=(164991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164992>, <tf.Tensor: shape=(164992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164993>, <tf.Tensor: shape=(164993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164994>, <tf.Tensor: shape=(164994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164995>, <tf.Tensor: shape=(164995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164996>, <tf.Tensor: shape=(164996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164997>, <tf.Tensor: shape=(164997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164998>, <tf.Tensor: shape=(164998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=164999>, <tf.Tensor: shape=(164999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165000>, <tf.Tensor: shape=(165000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165001>, <tf.Tensor: shape=(165001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165002>, <tf.Tensor: shape=(165002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165003>, <tf.Tensor: shape=(165003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165004>, <tf.Tensor: shape=(165004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165005>, <tf.Tensor: shape=(165005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165006>, <tf.Tensor: shape=(165006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165007>, <tf.Tensor: shape=(165007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165008>, <tf.Tensor: shape=(165008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165009>, <tf.Tensor: shape=(165009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165010>, <tf.Tensor: shape=(165010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165011>, <tf.Tensor: shape=(165011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165012>, <tf.Tensor: shape=(165012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165013>, <tf.Tensor: shape=(165013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165014>, <tf.Tensor: shape=(165014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165015>, <tf.Tensor: shape=(165015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165016>, <tf.Tensor: shape=(165016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165017>, <tf.Tensor: shape=(165017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165018>, <tf.Tensor: shape=(165018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165019>, <tf.Tensor: shape=(165019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165020>, <tf.Tensor: shape=(165020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165021>, <tf.Tensor: shape=(165021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165022>, <tf.Tensor: shape=(165022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165023>, <tf.Tensor: shape=(165023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165024>, <tf.Tensor: shape=(165024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165025>, <tf.Tensor: shape=(165025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165026>, <tf.Tensor: shape=(165026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165027>, <tf.Tensor: shape=(165027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165028>, <tf.Tensor: shape=(165028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165029>, <tf.Tensor: shape=(165029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165030>, <tf.Tensor: shape=(165030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165031>, <tf.Tensor: shape=(165031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165032>, <tf.Tensor: shape=(165032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165033>, <tf.Tensor: shape=(165033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165034>, <tf.Tensor: shape=(165034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165035>, <tf.Tensor: shape=(165035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165036>, <tf.Tensor: shape=(165036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165037>, <tf.Tensor: shape=(165037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165038>, <tf.Tensor: shape=(165038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165039>, <tf.Tensor: shape=(165039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165040>, <tf.Tensor: shape=(165040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165041>, <tf.Tensor: shape=(165041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165042>, <tf.Tensor: shape=(165042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165043>, <tf.Tensor: shape=(165043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165044>, <tf.Tensor: shape=(165044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165045>, <tf.Tensor: shape=(165045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165046>, <tf.Tensor: shape=(165046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165047>, <tf.Tensor: shape=(165047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165048>, <tf.Tensor: shape=(165048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165049>, <tf.Tensor: shape=(165049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165050>, <tf.Tensor: shape=(165050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165051>, <tf.Tensor: shape=(165051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165052>, <tf.Tensor: shape=(165052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165053>, <tf.Tensor: shape=(165053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165054>, <tf.Tensor: shape=(165054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165055>, <tf.Tensor: shape=(165055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165056>, <tf.Tensor: shape=(165056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165057>, <tf.Tensor: shape=(165057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165058>, <tf.Tensor: shape=(165058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165059>, <tf.Tensor: shape=(165059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165060>, <tf.Tensor: shape=(165060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165061>, <tf.Tensor: shape=(165061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165062>, <tf.Tensor: shape=(165062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165063>, <tf.Tensor: shape=(165063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165064>, <tf.Tensor: shape=(165064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165065>, <tf.Tensor: shape=(165065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165066>, <tf.Tensor: shape=(165066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165067>, <tf.Tensor: shape=(165067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165068>, <tf.Tensor: shape=(165068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165069>, <tf.Tensor: shape=(165069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165070>, <tf.Tensor: shape=(165070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165071>, <tf.Tensor: shape=(165071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165072>, <tf.Tensor: shape=(165072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165073>, <tf.Tensor: shape=(165073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165074>, <tf.Tensor: shape=(165074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165075>, <tf.Tensor: shape=(165075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165076>, <tf.Tensor: shape=(165076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165077>, <tf.Tensor: shape=(165077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165078>, <tf.Tensor: shape=(165078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165079>, <tf.Tensor: shape=(165079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165080>, <tf.Tensor: shape=(165080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165081>, <tf.Tensor: shape=(165081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165082>, <tf.Tensor: shape=(165082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165083>, <tf.Tensor: shape=(165083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165084>, <tf.Tensor: shape=(165084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165085>, <tf.Tensor: shape=(165085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165086>, <tf.Tensor: shape=(165086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165087>, <tf.Tensor: shape=(165087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165088>, <tf.Tensor: shape=(165088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165089>, <tf.Tensor: shape=(165089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165090>, <tf.Tensor: shape=(165090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165091>, <tf.Tensor: shape=(165091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165092>, <tf.Tensor: shape=(165092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165093>, <tf.Tensor: shape=(165093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165094>, <tf.Tensor: shape=(165094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165095>, <tf.Tensor: shape=(165095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165096>, <tf.Tensor: shape=(165096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165097>, <tf.Tensor: shape=(165097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165098>, <tf.Tensor: shape=(165098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165099>, <tf.Tensor: shape=(165099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165100>, <tf.Tensor: shape=(165100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165101>, <tf.Tensor: shape=(165101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165102>, <tf.Tensor: shape=(165102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165103>, <tf.Tensor: shape=(165103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165104>, <tf.Tensor: shape=(165104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165105>, <tf.Tensor: shape=(165105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165106>, <tf.Tensor: shape=(165106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165107>, <tf.Tensor: shape=(165107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165108>, <tf.Tensor: shape=(165108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165109>, <tf.Tensor: shape=(165109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165110>, <tf.Tensor: shape=(165110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165111>, <tf.Tensor: shape=(165111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165112>, <tf.Tensor: shape=(165112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165113>, <tf.Tensor: shape=(165113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165114>, <tf.Tensor: shape=(165114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165115>, <tf.Tensor: shape=(165115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165116>, <tf.Tensor: shape=(165116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165117>, <tf.Tensor: shape=(165117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165118>, <tf.Tensor: shape=(165118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165119>, <tf.Tensor: shape=(165119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165120>, <tf.Tensor: shape=(165120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165121>, <tf.Tensor: shape=(165121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165122>, <tf.Tensor: shape=(165122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165123>, <tf.Tensor: shape=(165123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165124>, <tf.Tensor: shape=(165124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165125>, <tf.Tensor: shape=(165125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165126>, <tf.Tensor: shape=(165126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165127>, <tf.Tensor: shape=(165127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165128>, <tf.Tensor: shape=(165128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165129>, <tf.Tensor: shape=(165129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165130>, <tf.Tensor: shape=(165130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165131>, <tf.Tensor: shape=(165131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165132>, <tf.Tensor: shape=(165132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165133>, <tf.Tensor: shape=(165133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165134>, <tf.Tensor: shape=(165134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165135>, <tf.Tensor: shape=(165135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165136>, <tf.Tensor: shape=(165136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165137>, <tf.Tensor: shape=(165137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165138>, <tf.Tensor: shape=(165138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165139>, <tf.Tensor: shape=(165139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165140>, <tf.Tensor: shape=(165140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165141>, <tf.Tensor: shape=(165141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165142>, <tf.Tensor: shape=(165142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165143>, <tf.Tensor: shape=(165143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165144>, <tf.Tensor: shape=(165144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165145>, <tf.Tensor: shape=(165145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165146>, <tf.Tensor: shape=(165146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165147>, <tf.Tensor: shape=(165147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165148>, <tf.Tensor: shape=(165148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165149>, <tf.Tensor: shape=(165149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165150>, <tf.Tensor: shape=(165150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165151>, <tf.Tensor: shape=(165151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165152>, <tf.Tensor: shape=(165152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165153>, <tf.Tensor: shape=(165153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165154>, <tf.Tensor: shape=(165154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165155>, <tf.Tensor: shape=(165155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165156>, <tf.Tensor: shape=(165156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165157>, <tf.Tensor: shape=(165157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165158>, <tf.Tensor: shape=(165158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165159>, <tf.Tensor: shape=(165159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165160>, <tf.Tensor: shape=(165160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165161>, <tf.Tensor: shape=(165161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165162>, <tf.Tensor: shape=(165162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165163>, <tf.Tensor: shape=(165163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165164>, <tf.Tensor: shape=(165164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165165>, <tf.Tensor: shape=(165165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165166>, <tf.Tensor: shape=(165166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165167>, <tf.Tensor: shape=(165167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165168>, <tf.Tensor: shape=(165168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165169>, <tf.Tensor: shape=(165169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165170>, <tf.Tensor: shape=(165170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165171>, <tf.Tensor: shape=(165171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165172>, <tf.Tensor: shape=(165172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165173>, <tf.Tensor: shape=(165173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165174>, <tf.Tensor: shape=(165174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165175>, <tf.Tensor: shape=(165175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165176>, <tf.Tensor: shape=(165176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165177>, <tf.Tensor: shape=(165177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165178>, <tf.Tensor: shape=(165178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165179>, <tf.Tensor: shape=(165179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165180>, <tf.Tensor: shape=(165180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165181>, <tf.Tensor: shape=(165181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165182>, <tf.Tensor: shape=(165182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165183>, <tf.Tensor: shape=(165183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165184>, <tf.Tensor: shape=(165184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165185>, <tf.Tensor: shape=(165185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165186>, <tf.Tensor: shape=(165186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165187>, <tf.Tensor: shape=(165187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165188>, <tf.Tensor: shape=(165188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165189>, <tf.Tensor: shape=(165189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165190>, <tf.Tensor: shape=(165190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165191>, <tf.Tensor: shape=(165191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165192>, <tf.Tensor: shape=(165192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165193>, <tf.Tensor: shape=(165193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165194>, <tf.Tensor: shape=(165194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165195>, <tf.Tensor: shape=(165195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165196>, <tf.Tensor: shape=(165196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165197>, <tf.Tensor: shape=(165197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165198>, <tf.Tensor: shape=(165198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165199>, <tf.Tensor: shape=(165199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165200>, <tf.Tensor: shape=(165200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165201>, <tf.Tensor: shape=(165201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165202>, <tf.Tensor: shape=(165202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165203>, <tf.Tensor: shape=(165203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165204>, <tf.Tensor: shape=(165204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165205>, <tf.Tensor: shape=(165205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165206>, <tf.Tensor: shape=(165206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165207>, <tf.Tensor: shape=(165207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165208>, <tf.Tensor: shape=(165208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165209>, <tf.Tensor: shape=(165209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165210>, <tf.Tensor: shape=(165210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165211>, <tf.Tensor: shape=(165211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165212>, <tf.Tensor: shape=(165212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165213>, <tf.Tensor: shape=(165213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165214>, <tf.Tensor: shape=(165214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165215>, <tf.Tensor: shape=(165215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165216>, <tf.Tensor: shape=(165216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165217>, <tf.Tensor: shape=(165217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165218>, <tf.Tensor: shape=(165218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165219>, <tf.Tensor: shape=(165219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165220>, <tf.Tensor: shape=(165220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165221>, <tf.Tensor: shape=(165221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165222>, <tf.Tensor: shape=(165222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165223>, <tf.Tensor: shape=(165223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165224>, <tf.Tensor: shape=(165224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165225>, <tf.Tensor: shape=(165225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165226>, <tf.Tensor: shape=(165226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165227>, <tf.Tensor: shape=(165227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165228>, <tf.Tensor: shape=(165228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165229>, <tf.Tensor: shape=(165229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165230>, <tf.Tensor: shape=(165230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165231>, <tf.Tensor: shape=(165231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165232>, <tf.Tensor: shape=(165232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165233>, <tf.Tensor: shape=(165233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165234>, <tf.Tensor: shape=(165234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165235>, <tf.Tensor: shape=(165235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165236>, <tf.Tensor: shape=(165236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165237>, <tf.Tensor: shape=(165237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165238>, <tf.Tensor: shape=(165238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165239>, <tf.Tensor: shape=(165239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165240>, <tf.Tensor: shape=(165240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165241>, <tf.Tensor: shape=(165241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165242>, <tf.Tensor: shape=(165242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165243>, <tf.Tensor: shape=(165243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165244>, <tf.Tensor: shape=(165244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165245>, <tf.Tensor: shape=(165245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165246>, <tf.Tensor: shape=(165246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165247>, <tf.Tensor: shape=(165247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165248>, <tf.Tensor: shape=(165248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165249>, <tf.Tensor: shape=(165249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165250>, <tf.Tensor: shape=(165250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165251>, <tf.Tensor: shape=(165251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165252>, <tf.Tensor: shape=(165252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165253>, <tf.Tensor: shape=(165253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165254>, <tf.Tensor: shape=(165254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165255>, <tf.Tensor: shape=(165255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165256>, <tf.Tensor: shape=(165256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165257>, <tf.Tensor: shape=(165257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165258>, <tf.Tensor: shape=(165258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165259>, <tf.Tensor: shape=(165259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165260>, <tf.Tensor: shape=(165260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165261>, <tf.Tensor: shape=(165261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165262>, <tf.Tensor: shape=(165262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165263>, <tf.Tensor: shape=(165263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165264>, <tf.Tensor: shape=(165264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165265>, <tf.Tensor: shape=(165265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165266>, <tf.Tensor: shape=(165266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165267>, <tf.Tensor: shape=(165267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165268>, <tf.Tensor: shape=(165268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165269>, <tf.Tensor: shape=(165269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165270>, <tf.Tensor: shape=(165270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165271>, <tf.Tensor: shape=(165271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165272>, <tf.Tensor: shape=(165272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165273>, <tf.Tensor: shape=(165273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165274>, <tf.Tensor: shape=(165274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165275>, <tf.Tensor: shape=(165275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165276>, <tf.Tensor: shape=(165276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165277>, <tf.Tensor: shape=(165277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165278>, <tf.Tensor: shape=(165278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165279>, <tf.Tensor: shape=(165279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165280>, <tf.Tensor: shape=(165280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165281>, <tf.Tensor: shape=(165281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165282>, <tf.Tensor: shape=(165282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165283>, <tf.Tensor: shape=(165283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165284>, <tf.Tensor: shape=(165284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165285>, <tf.Tensor: shape=(165285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165286>, <tf.Tensor: shape=(165286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165287>, <tf.Tensor: shape=(165287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165288>, <tf.Tensor: shape=(165288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165289>, <tf.Tensor: shape=(165289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165290>, <tf.Tensor: shape=(165290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165291>, <tf.Tensor: shape=(165291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165292>, <tf.Tensor: shape=(165292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165293>, <tf.Tensor: shape=(165293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165294>, <tf.Tensor: shape=(165294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165295>, <tf.Tensor: shape=(165295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165296>, <tf.Tensor: shape=(165296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165297>, <tf.Tensor: shape=(165297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165298>, <tf.Tensor: shape=(165298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165299>, <tf.Tensor: shape=(165299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165300>, <tf.Tensor: shape=(165300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165301>, <tf.Tensor: shape=(165301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165302>, <tf.Tensor: shape=(165302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165303>, <tf.Tensor: shape=(165303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165304>, <tf.Tensor: shape=(165304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165305>, <tf.Tensor: shape=(165305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165306>, <tf.Tensor: shape=(165306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165307>, <tf.Tensor: shape=(165307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165308>, <tf.Tensor: shape=(165308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165309>, <tf.Tensor: shape=(165309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165310>, <tf.Tensor: shape=(165310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165311>, <tf.Tensor: shape=(165311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165312>, <tf.Tensor: shape=(165312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165313>, <tf.Tensor: shape=(165313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165314>, <tf.Tensor: shape=(165314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165315>, <tf.Tensor: shape=(165315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165316>, <tf.Tensor: shape=(165316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165317>, <tf.Tensor: shape=(165317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165318>, <tf.Tensor: shape=(165318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165319>, <tf.Tensor: shape=(165319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165320>, <tf.Tensor: shape=(165320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165321>, <tf.Tensor: shape=(165321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165322>, <tf.Tensor: shape=(165322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165323>, <tf.Tensor: shape=(165323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165324>, <tf.Tensor: shape=(165324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165325>, <tf.Tensor: shape=(165325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165326>, <tf.Tensor: shape=(165326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165327>, <tf.Tensor: shape=(165327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165328>, <tf.Tensor: shape=(165328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165329>, <tf.Tensor: shape=(165329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165330>, <tf.Tensor: shape=(165330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165331>, <tf.Tensor: shape=(165331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165332>, <tf.Tensor: shape=(165332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165333>, <tf.Tensor: shape=(165333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165334>, <tf.Tensor: shape=(165334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165335>, <tf.Tensor: shape=(165335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165336>, <tf.Tensor: shape=(165336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165337>, <tf.Tensor: shape=(165337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165338>, <tf.Tensor: shape=(165338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165339>, <tf.Tensor: shape=(165339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165340>, <tf.Tensor: shape=(165340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165341>, <tf.Tensor: shape=(165341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165342>, <tf.Tensor: shape=(165342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165343>, <tf.Tensor: shape=(165343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165344>, <tf.Tensor: shape=(165344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165345>, <tf.Tensor: shape=(165345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165346>, <tf.Tensor: shape=(165346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165347>, <tf.Tensor: shape=(165347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165348>, <tf.Tensor: shape=(165348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165349>, <tf.Tensor: shape=(165349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165350>, <tf.Tensor: shape=(165350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165351>, <tf.Tensor: shape=(165351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165352>, <tf.Tensor: shape=(165352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165353>, <tf.Tensor: shape=(165353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165354>, <tf.Tensor: shape=(165354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165355>, <tf.Tensor: shape=(165355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165356>, <tf.Tensor: shape=(165356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165357>, <tf.Tensor: shape=(165357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165358>, <tf.Tensor: shape=(165358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165359>, <tf.Tensor: shape=(165359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165360>, <tf.Tensor: shape=(165360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165361>, <tf.Tensor: shape=(165361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165362>, <tf.Tensor: shape=(165362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165363>, <tf.Tensor: shape=(165363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165364>, <tf.Tensor: shape=(165364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165365>, <tf.Tensor: shape=(165365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165366>, <tf.Tensor: shape=(165366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165367>, <tf.Tensor: shape=(165367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165368>, <tf.Tensor: shape=(165368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165369>, <tf.Tensor: shape=(165369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165370>, <tf.Tensor: shape=(165370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165371>, <tf.Tensor: shape=(165371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165372>, <tf.Tensor: shape=(165372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165373>, <tf.Tensor: shape=(165373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165374>, <tf.Tensor: shape=(165374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165375>, <tf.Tensor: shape=(165375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165376>, <tf.Tensor: shape=(165376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165377>, <tf.Tensor: shape=(165377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165378>, <tf.Tensor: shape=(165378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165379>, <tf.Tensor: shape=(165379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165380>, <tf.Tensor: shape=(165380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165381>, <tf.Tensor: shape=(165381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165382>, <tf.Tensor: shape=(165382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165383>, <tf.Tensor: shape=(165383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165384>, <tf.Tensor: shape=(165384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165385>, <tf.Tensor: shape=(165385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165386>, <tf.Tensor: shape=(165386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165387>, <tf.Tensor: shape=(165387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165388>, <tf.Tensor: shape=(165388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165389>, <tf.Tensor: shape=(165389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165390>, <tf.Tensor: shape=(165390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165391>, <tf.Tensor: shape=(165391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165392>, <tf.Tensor: shape=(165392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165393>, <tf.Tensor: shape=(165393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165394>, <tf.Tensor: shape=(165394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165395>, <tf.Tensor: shape=(165395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165396>, <tf.Tensor: shape=(165396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165397>, <tf.Tensor: shape=(165397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165398>, <tf.Tensor: shape=(165398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165399>, <tf.Tensor: shape=(165399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165400>, <tf.Tensor: shape=(165400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165401>, <tf.Tensor: shape=(165401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165402>, <tf.Tensor: shape=(165402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165403>, <tf.Tensor: shape=(165403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165404>, <tf.Tensor: shape=(165404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165405>, <tf.Tensor: shape=(165405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165406>, <tf.Tensor: shape=(165406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165407>, <tf.Tensor: shape=(165407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165408>, <tf.Tensor: shape=(165408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165409>, <tf.Tensor: shape=(165409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165410>, <tf.Tensor: shape=(165410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165411>, <tf.Tensor: shape=(165411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165412>, <tf.Tensor: shape=(165412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165413>, <tf.Tensor: shape=(165413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165414>, <tf.Tensor: shape=(165414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165415>, <tf.Tensor: shape=(165415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165416>, <tf.Tensor: shape=(165416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165417>, <tf.Tensor: shape=(165417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165418>, <tf.Tensor: shape=(165418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165419>, <tf.Tensor: shape=(165419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165420>, <tf.Tensor: shape=(165420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165421>, <tf.Tensor: shape=(165421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165422>, <tf.Tensor: shape=(165422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165423>, <tf.Tensor: shape=(165423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165424>, <tf.Tensor: shape=(165424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165425>, <tf.Tensor: shape=(165425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165426>, <tf.Tensor: shape=(165426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165427>, <tf.Tensor: shape=(165427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165428>, <tf.Tensor: shape=(165428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165429>, <tf.Tensor: shape=(165429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165430>, <tf.Tensor: shape=(165430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165431>, <tf.Tensor: shape=(165431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165432>, <tf.Tensor: shape=(165432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165433>, <tf.Tensor: shape=(165433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165434>, <tf.Tensor: shape=(165434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165435>, <tf.Tensor: shape=(165435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165436>, <tf.Tensor: shape=(165436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165437>, <tf.Tensor: shape=(165437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165438>, <tf.Tensor: shape=(165438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165439>, <tf.Tensor: shape=(165439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165440>, <tf.Tensor: shape=(165440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165441>, <tf.Tensor: shape=(165441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165442>, <tf.Tensor: shape=(165442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165443>, <tf.Tensor: shape=(165443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165444>, <tf.Tensor: shape=(165444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165445>, <tf.Tensor: shape=(165445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165446>, <tf.Tensor: shape=(165446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165447>, <tf.Tensor: shape=(165447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165448>, <tf.Tensor: shape=(165448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165449>, <tf.Tensor: shape=(165449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165450>, <tf.Tensor: shape=(165450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165451>, <tf.Tensor: shape=(165451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165452>, <tf.Tensor: shape=(165452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165453>, <tf.Tensor: shape=(165453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165454>, <tf.Tensor: shape=(165454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165455>, <tf.Tensor: shape=(165455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165456>, <tf.Tensor: shape=(165456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165457>, <tf.Tensor: shape=(165457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165458>, <tf.Tensor: shape=(165458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165459>, <tf.Tensor: shape=(165459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165460>, <tf.Tensor: shape=(165460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165461>, <tf.Tensor: shape=(165461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165462>, <tf.Tensor: shape=(165462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165463>, <tf.Tensor: shape=(165463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165464>, <tf.Tensor: shape=(165464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165465>, <tf.Tensor: shape=(165465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165466>, <tf.Tensor: shape=(165466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165467>, <tf.Tensor: shape=(165467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165468>, <tf.Tensor: shape=(165468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165469>, <tf.Tensor: shape=(165469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165470>, <tf.Tensor: shape=(165470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165471>, <tf.Tensor: shape=(165471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165472>, <tf.Tensor: shape=(165472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165473>, <tf.Tensor: shape=(165473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165474>, <tf.Tensor: shape=(165474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165475>, <tf.Tensor: shape=(165475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165476>, <tf.Tensor: shape=(165476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165477>, <tf.Tensor: shape=(165477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165478>, <tf.Tensor: shape=(165478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165479>, <tf.Tensor: shape=(165479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165480>, <tf.Tensor: shape=(165480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165481>, <tf.Tensor: shape=(165481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165482>, <tf.Tensor: shape=(165482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165483>, <tf.Tensor: shape=(165483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165484>, <tf.Tensor: shape=(165484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165485>, <tf.Tensor: shape=(165485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165486>, <tf.Tensor: shape=(165486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165487>, <tf.Tensor: shape=(165487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165488>, <tf.Tensor: shape=(165488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165489>, <tf.Tensor: shape=(165489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165490>, <tf.Tensor: shape=(165490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165491>, <tf.Tensor: shape=(165491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165492>, <tf.Tensor: shape=(165492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165493>, <tf.Tensor: shape=(165493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165494>, <tf.Tensor: shape=(165494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165495>, <tf.Tensor: shape=(165495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165496>, <tf.Tensor: shape=(165496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165497>, <tf.Tensor: shape=(165497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165498>, <tf.Tensor: shape=(165498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165499>, <tf.Tensor: shape=(165499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165500>, <tf.Tensor: shape=(165500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165501>, <tf.Tensor: shape=(165501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165502>, <tf.Tensor: shape=(165502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165503>, <tf.Tensor: shape=(165503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165504>, <tf.Tensor: shape=(165504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165505>, <tf.Tensor: shape=(165505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165506>, <tf.Tensor: shape=(165506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165507>, <tf.Tensor: shape=(165507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165508>, <tf.Tensor: shape=(165508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165509>, <tf.Tensor: shape=(165509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165510>, <tf.Tensor: shape=(165510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165511>, <tf.Tensor: shape=(165511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165512>, <tf.Tensor: shape=(165512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165513>, <tf.Tensor: shape=(165513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165514>, <tf.Tensor: shape=(165514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165515>, <tf.Tensor: shape=(165515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165516>, <tf.Tensor: shape=(165516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165517>, <tf.Tensor: shape=(165517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165518>, <tf.Tensor: shape=(165518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165519>, <tf.Tensor: shape=(165519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165520>, <tf.Tensor: shape=(165520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165521>, <tf.Tensor: shape=(165521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165522>, <tf.Tensor: shape=(165522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165523>, <tf.Tensor: shape=(165523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165524>, <tf.Tensor: shape=(165524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165525>, <tf.Tensor: shape=(165525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165526>, <tf.Tensor: shape=(165526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165527>, <tf.Tensor: shape=(165527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165528>, <tf.Tensor: shape=(165528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165529>, <tf.Tensor: shape=(165529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165530>, <tf.Tensor: shape=(165530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165531>, <tf.Tensor: shape=(165531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165532>, <tf.Tensor: shape=(165532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165533>, <tf.Tensor: shape=(165533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165534>, <tf.Tensor: shape=(165534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165535>, <tf.Tensor: shape=(165535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165536>, <tf.Tensor: shape=(165536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165537>, <tf.Tensor: shape=(165537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165538>, <tf.Tensor: shape=(165538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165539>, <tf.Tensor: shape=(165539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165540>, <tf.Tensor: shape=(165540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165541>, <tf.Tensor: shape=(165541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165542>, <tf.Tensor: shape=(165542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165543>, <tf.Tensor: shape=(165543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165544>, <tf.Tensor: shape=(165544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165545>, <tf.Tensor: shape=(165545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165546>, <tf.Tensor: shape=(165546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165547>, <tf.Tensor: shape=(165547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165548>, <tf.Tensor: shape=(165548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165549>, <tf.Tensor: shape=(165549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165550>, <tf.Tensor: shape=(165550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165551>, <tf.Tensor: shape=(165551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165552>, <tf.Tensor: shape=(165552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165553>, <tf.Tensor: shape=(165553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165554>, <tf.Tensor: shape=(165554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165555>, <tf.Tensor: shape=(165555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165556>, <tf.Tensor: shape=(165556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165557>, <tf.Tensor: shape=(165557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165558>, <tf.Tensor: shape=(165558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165559>, <tf.Tensor: shape=(165559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165560>, <tf.Tensor: shape=(165560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165561>, <tf.Tensor: shape=(165561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165562>, <tf.Tensor: shape=(165562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165563>, <tf.Tensor: shape=(165563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165564>, <tf.Tensor: shape=(165564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165565>, <tf.Tensor: shape=(165565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165566>, <tf.Tensor: shape=(165566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165567>, <tf.Tensor: shape=(165567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165568>, <tf.Tensor: shape=(165568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165569>, <tf.Tensor: shape=(165569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165570>, <tf.Tensor: shape=(165570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165571>, <tf.Tensor: shape=(165571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165572>, <tf.Tensor: shape=(165572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165573>, <tf.Tensor: shape=(165573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165574>, <tf.Tensor: shape=(165574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165575>, <tf.Tensor: shape=(165575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165576>, <tf.Tensor: shape=(165576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165577>, <tf.Tensor: shape=(165577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165578>, <tf.Tensor: shape=(165578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165579>, <tf.Tensor: shape=(165579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165580>, <tf.Tensor: shape=(165580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165581>, <tf.Tensor: shape=(165581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165582>, <tf.Tensor: shape=(165582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165583>, <tf.Tensor: shape=(165583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165584>, <tf.Tensor: shape=(165584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165585>, <tf.Tensor: shape=(165585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165586>, <tf.Tensor: shape=(165586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165587>, <tf.Tensor: shape=(165587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165588>, <tf.Tensor: shape=(165588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165589>, <tf.Tensor: shape=(165589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165590>, <tf.Tensor: shape=(165590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165591>, <tf.Tensor: shape=(165591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165592>, <tf.Tensor: shape=(165592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165593>, <tf.Tensor: shape=(165593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165594>, <tf.Tensor: shape=(165594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165595>, <tf.Tensor: shape=(165595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165596>, <tf.Tensor: shape=(165596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165597>, <tf.Tensor: shape=(165597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165598>, <tf.Tensor: shape=(165598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165599>, <tf.Tensor: shape=(165599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165600>, <tf.Tensor: shape=(165600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165601>, <tf.Tensor: shape=(165601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165602>, <tf.Tensor: shape=(165602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165603>, <tf.Tensor: shape=(165603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165604>, <tf.Tensor: shape=(165604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165605>, <tf.Tensor: shape=(165605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165606>, <tf.Tensor: shape=(165606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165607>, <tf.Tensor: shape=(165607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165608>, <tf.Tensor: shape=(165608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165609>, <tf.Tensor: shape=(165609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165610>, <tf.Tensor: shape=(165610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165611>, <tf.Tensor: shape=(165611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165612>, <tf.Tensor: shape=(165612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165613>, <tf.Tensor: shape=(165613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165614>, <tf.Tensor: shape=(165614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165615>, <tf.Tensor: shape=(165615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165616>, <tf.Tensor: shape=(165616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165617>, <tf.Tensor: shape=(165617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165618>, <tf.Tensor: shape=(165618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165619>, <tf.Tensor: shape=(165619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165620>, <tf.Tensor: shape=(165620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165621>, <tf.Tensor: shape=(165621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165622>, <tf.Tensor: shape=(165622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165623>, <tf.Tensor: shape=(165623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165624>, <tf.Tensor: shape=(165624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165625>, <tf.Tensor: shape=(165625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165626>, <tf.Tensor: shape=(165626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165627>, <tf.Tensor: shape=(165627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165628>, <tf.Tensor: shape=(165628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165629>, <tf.Tensor: shape=(165629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165630>, <tf.Tensor: shape=(165630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165631>, <tf.Tensor: shape=(165631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165632>, <tf.Tensor: shape=(165632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165633>, <tf.Tensor: shape=(165633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165634>, <tf.Tensor: shape=(165634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165635>, <tf.Tensor: shape=(165635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165636>, <tf.Tensor: shape=(165636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165637>, <tf.Tensor: shape=(165637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165638>, <tf.Tensor: shape=(165638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165639>, <tf.Tensor: shape=(165639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165640>, <tf.Tensor: shape=(165640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165641>, <tf.Tensor: shape=(165641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165642>, <tf.Tensor: shape=(165642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165643>, <tf.Tensor: shape=(165643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165644>, <tf.Tensor: shape=(165644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165645>, <tf.Tensor: shape=(165645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165646>, <tf.Tensor: shape=(165646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165647>, <tf.Tensor: shape=(165647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165648>, <tf.Tensor: shape=(165648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165649>, <tf.Tensor: shape=(165649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165650>, <tf.Tensor: shape=(165650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165651>, <tf.Tensor: shape=(165651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165652>, <tf.Tensor: shape=(165652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165653>, <tf.Tensor: shape=(165653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165654>, <tf.Tensor: shape=(165654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165655>, <tf.Tensor: shape=(165655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165656>, <tf.Tensor: shape=(165656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165657>, <tf.Tensor: shape=(165657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165658>, <tf.Tensor: shape=(165658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165659>, <tf.Tensor: shape=(165659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165660>, <tf.Tensor: shape=(165660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165661>, <tf.Tensor: shape=(165661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165662>, <tf.Tensor: shape=(165662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165663>, <tf.Tensor: shape=(165663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165664>, <tf.Tensor: shape=(165664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165665>, <tf.Tensor: shape=(165665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165666>, <tf.Tensor: shape=(165666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165667>, <tf.Tensor: shape=(165667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165668>, <tf.Tensor: shape=(165668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165669>, <tf.Tensor: shape=(165669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165670>, <tf.Tensor: shape=(165670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165671>, <tf.Tensor: shape=(165671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165672>, <tf.Tensor: shape=(165672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165673>, <tf.Tensor: shape=(165673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165674>, <tf.Tensor: shape=(165674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165675>, <tf.Tensor: shape=(165675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165676>, <tf.Tensor: shape=(165676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165677>, <tf.Tensor: shape=(165677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165678>, <tf.Tensor: shape=(165678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165679>, <tf.Tensor: shape=(165679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165680>, <tf.Tensor: shape=(165680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165681>, <tf.Tensor: shape=(165681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165682>, <tf.Tensor: shape=(165682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165683>, <tf.Tensor: shape=(165683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165684>, <tf.Tensor: shape=(165684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165685>, <tf.Tensor: shape=(165685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165686>, <tf.Tensor: shape=(165686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165687>, <tf.Tensor: shape=(165687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165688>, <tf.Tensor: shape=(165688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165689>, <tf.Tensor: shape=(165689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165690>, <tf.Tensor: shape=(165690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165691>, <tf.Tensor: shape=(165691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165692>, <tf.Tensor: shape=(165692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165693>, <tf.Tensor: shape=(165693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165694>, <tf.Tensor: shape=(165694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165695>, <tf.Tensor: shape=(165695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165696>, <tf.Tensor: shape=(165696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165697>, <tf.Tensor: shape=(165697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165698>, <tf.Tensor: shape=(165698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165699>, <tf.Tensor: shape=(165699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165700>, <tf.Tensor: shape=(165700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165701>, <tf.Tensor: shape=(165701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165702>, <tf.Tensor: shape=(165702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165703>, <tf.Tensor: shape=(165703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165704>, <tf.Tensor: shape=(165704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165705>, <tf.Tensor: shape=(165705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165706>, <tf.Tensor: shape=(165706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165707>, <tf.Tensor: shape=(165707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165708>, <tf.Tensor: shape=(165708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165709>, <tf.Tensor: shape=(165709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165710>, <tf.Tensor: shape=(165710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165711>, <tf.Tensor: shape=(165711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165712>, <tf.Tensor: shape=(165712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165713>, <tf.Tensor: shape=(165713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165714>, <tf.Tensor: shape=(165714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165715>, <tf.Tensor: shape=(165715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165716>, <tf.Tensor: shape=(165716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165717>, <tf.Tensor: shape=(165717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165718>, <tf.Tensor: shape=(165718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165719>, <tf.Tensor: shape=(165719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165720>, <tf.Tensor: shape=(165720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165721>, <tf.Tensor: shape=(165721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165722>, <tf.Tensor: shape=(165722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165723>, <tf.Tensor: shape=(165723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165724>, <tf.Tensor: shape=(165724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165725>, <tf.Tensor: shape=(165725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165726>, <tf.Tensor: shape=(165726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165727>, <tf.Tensor: shape=(165727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165728>, <tf.Tensor: shape=(165728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165729>, <tf.Tensor: shape=(165729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165730>, <tf.Tensor: shape=(165730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165731>, <tf.Tensor: shape=(165731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165732>, <tf.Tensor: shape=(165732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165733>, <tf.Tensor: shape=(165733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165734>, <tf.Tensor: shape=(165734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165735>, <tf.Tensor: shape=(165735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165736>, <tf.Tensor: shape=(165736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165737>, <tf.Tensor: shape=(165737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165738>, <tf.Tensor: shape=(165738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165739>, <tf.Tensor: shape=(165739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165740>, <tf.Tensor: shape=(165740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165741>, <tf.Tensor: shape=(165741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165742>, <tf.Tensor: shape=(165742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165743>, <tf.Tensor: shape=(165743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165744>, <tf.Tensor: shape=(165744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165745>, <tf.Tensor: shape=(165745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165746>, <tf.Tensor: shape=(165746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165747>, <tf.Tensor: shape=(165747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165748>, <tf.Tensor: shape=(165748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165749>, <tf.Tensor: shape=(165749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165750>, <tf.Tensor: shape=(165750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165751>, <tf.Tensor: shape=(165751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165752>, <tf.Tensor: shape=(165752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165753>, <tf.Tensor: shape=(165753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165754>, <tf.Tensor: shape=(165754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165755>, <tf.Tensor: shape=(165755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165756>, <tf.Tensor: shape=(165756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165757>, <tf.Tensor: shape=(165757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165758>, <tf.Tensor: shape=(165758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165759>, <tf.Tensor: shape=(165759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165760>, <tf.Tensor: shape=(165760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165761>, <tf.Tensor: shape=(165761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165762>, <tf.Tensor: shape=(165762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165763>, <tf.Tensor: shape=(165763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165764>, <tf.Tensor: shape=(165764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165765>, <tf.Tensor: shape=(165765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165766>, <tf.Tensor: shape=(165766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165767>, <tf.Tensor: shape=(165767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165768>, <tf.Tensor: shape=(165768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165769>, <tf.Tensor: shape=(165769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165770>, <tf.Tensor: shape=(165770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165771>, <tf.Tensor: shape=(165771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165772>, <tf.Tensor: shape=(165772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165773>, <tf.Tensor: shape=(165773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165774>, <tf.Tensor: shape=(165774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165775>, <tf.Tensor: shape=(165775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165776>, <tf.Tensor: shape=(165776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165777>, <tf.Tensor: shape=(165777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165778>, <tf.Tensor: shape=(165778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165779>, <tf.Tensor: shape=(165779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165780>, <tf.Tensor: shape=(165780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165781>, <tf.Tensor: shape=(165781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165782>, <tf.Tensor: shape=(165782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165783>, <tf.Tensor: shape=(165783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165784>, <tf.Tensor: shape=(165784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165785>, <tf.Tensor: shape=(165785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165786>, <tf.Tensor: shape=(165786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165787>, <tf.Tensor: shape=(165787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165788>, <tf.Tensor: shape=(165788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165789>, <tf.Tensor: shape=(165789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165790>, <tf.Tensor: shape=(165790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165791>, <tf.Tensor: shape=(165791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165792>, <tf.Tensor: shape=(165792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165793>, <tf.Tensor: shape=(165793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165794>, <tf.Tensor: shape=(165794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165795>, <tf.Tensor: shape=(165795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165796>, <tf.Tensor: shape=(165796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165797>, <tf.Tensor: shape=(165797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165798>, <tf.Tensor: shape=(165798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165799>, <tf.Tensor: shape=(165799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165800>, <tf.Tensor: shape=(165800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165801>, <tf.Tensor: shape=(165801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165802>, <tf.Tensor: shape=(165802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165803>, <tf.Tensor: shape=(165803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165804>, <tf.Tensor: shape=(165804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165805>, <tf.Tensor: shape=(165805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165806>, <tf.Tensor: shape=(165806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165807>, <tf.Tensor: shape=(165807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165808>, <tf.Tensor: shape=(165808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165809>, <tf.Tensor: shape=(165809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165810>, <tf.Tensor: shape=(165810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165811>, <tf.Tensor: shape=(165811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165812>, <tf.Tensor: shape=(165812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165813>, <tf.Tensor: shape=(165813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165814>, <tf.Tensor: shape=(165814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165815>, <tf.Tensor: shape=(165815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165816>, <tf.Tensor: shape=(165816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165817>, <tf.Tensor: shape=(165817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165818>, <tf.Tensor: shape=(165818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165819>, <tf.Tensor: shape=(165819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165820>, <tf.Tensor: shape=(165820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165821>, <tf.Tensor: shape=(165821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165822>, <tf.Tensor: shape=(165822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165823>, <tf.Tensor: shape=(165823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165824>, <tf.Tensor: shape=(165824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165825>, <tf.Tensor: shape=(165825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165826>, <tf.Tensor: shape=(165826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165827>, <tf.Tensor: shape=(165827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165828>, <tf.Tensor: shape=(165828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165829>, <tf.Tensor: shape=(165829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165830>, <tf.Tensor: shape=(165830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165831>, <tf.Tensor: shape=(165831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165832>, <tf.Tensor: shape=(165832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165833>, <tf.Tensor: shape=(165833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165834>, <tf.Tensor: shape=(165834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165835>, <tf.Tensor: shape=(165835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165836>, <tf.Tensor: shape=(165836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165837>, <tf.Tensor: shape=(165837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165838>, <tf.Tensor: shape=(165838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165839>, <tf.Tensor: shape=(165839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165840>, <tf.Tensor: shape=(165840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165841>, <tf.Tensor: shape=(165841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165842>, <tf.Tensor: shape=(165842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165843>, <tf.Tensor: shape=(165843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165844>, <tf.Tensor: shape=(165844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165845>, <tf.Tensor: shape=(165845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165846>, <tf.Tensor: shape=(165846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165847>, <tf.Tensor: shape=(165847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165848>, <tf.Tensor: shape=(165848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165849>, <tf.Tensor: shape=(165849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165850>, <tf.Tensor: shape=(165850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165851>, <tf.Tensor: shape=(165851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165852>, <tf.Tensor: shape=(165852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165853>, <tf.Tensor: shape=(165853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165854>, <tf.Tensor: shape=(165854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165855>, <tf.Tensor: shape=(165855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165856>, <tf.Tensor: shape=(165856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165857>, <tf.Tensor: shape=(165857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165858>, <tf.Tensor: shape=(165858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165859>, <tf.Tensor: shape=(165859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165860>, <tf.Tensor: shape=(165860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165861>, <tf.Tensor: shape=(165861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165862>, <tf.Tensor: shape=(165862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165863>, <tf.Tensor: shape=(165863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165864>, <tf.Tensor: shape=(165864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165865>, <tf.Tensor: shape=(165865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165866>, <tf.Tensor: shape=(165866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165867>, <tf.Tensor: shape=(165867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165868>, <tf.Tensor: shape=(165868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165869>, <tf.Tensor: shape=(165869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165870>, <tf.Tensor: shape=(165870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165871>, <tf.Tensor: shape=(165871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165872>, <tf.Tensor: shape=(165872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165873>, <tf.Tensor: shape=(165873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165874>, <tf.Tensor: shape=(165874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165875>, <tf.Tensor: shape=(165875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165876>, <tf.Tensor: shape=(165876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165877>, <tf.Tensor: shape=(165877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165878>, <tf.Tensor: shape=(165878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165879>, <tf.Tensor: shape=(165879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165880>, <tf.Tensor: shape=(165880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165881>, <tf.Tensor: shape=(165881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165882>, <tf.Tensor: shape=(165882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165883>, <tf.Tensor: shape=(165883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165884>, <tf.Tensor: shape=(165884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165885>, <tf.Tensor: shape=(165885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165886>, <tf.Tensor: shape=(165886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165887>, <tf.Tensor: shape=(165887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165888>, <tf.Tensor: shape=(165888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165889>, <tf.Tensor: shape=(165889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165890>, <tf.Tensor: shape=(165890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165891>, <tf.Tensor: shape=(165891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165892>, <tf.Tensor: shape=(165892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165893>, <tf.Tensor: shape=(165893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165894>, <tf.Tensor: shape=(165894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165895>, <tf.Tensor: shape=(165895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165896>, <tf.Tensor: shape=(165896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165897>, <tf.Tensor: shape=(165897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165898>, <tf.Tensor: shape=(165898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165899>, <tf.Tensor: shape=(165899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165900>, <tf.Tensor: shape=(165900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165901>, <tf.Tensor: shape=(165901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165902>, <tf.Tensor: shape=(165902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165903>, <tf.Tensor: shape=(165903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165904>, <tf.Tensor: shape=(165904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165905>, <tf.Tensor: shape=(165905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165906>, <tf.Tensor: shape=(165906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165907>, <tf.Tensor: shape=(165907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165908>, <tf.Tensor: shape=(165908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165909>, <tf.Tensor: shape=(165909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165910>, <tf.Tensor: shape=(165910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165911>, <tf.Tensor: shape=(165911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165912>, <tf.Tensor: shape=(165912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165913>, <tf.Tensor: shape=(165913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165914>, <tf.Tensor: shape=(165914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165915>, <tf.Tensor: shape=(165915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165916>, <tf.Tensor: shape=(165916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165917>, <tf.Tensor: shape=(165917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165918>, <tf.Tensor: shape=(165918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165919>, <tf.Tensor: shape=(165919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165920>, <tf.Tensor: shape=(165920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165921>, <tf.Tensor: shape=(165921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165922>, <tf.Tensor: shape=(165922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165923>, <tf.Tensor: shape=(165923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165924>, <tf.Tensor: shape=(165924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165925>, <tf.Tensor: shape=(165925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165926>, <tf.Tensor: shape=(165926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165927>, <tf.Tensor: shape=(165927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165928>, <tf.Tensor: shape=(165928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165929>, <tf.Tensor: shape=(165929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165930>, <tf.Tensor: shape=(165930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165931>, <tf.Tensor: shape=(165931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165932>, <tf.Tensor: shape=(165932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165933>, <tf.Tensor: shape=(165933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165934>, <tf.Tensor: shape=(165934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165935>, <tf.Tensor: shape=(165935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165936>, <tf.Tensor: shape=(165936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165937>, <tf.Tensor: shape=(165937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165938>, <tf.Tensor: shape=(165938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165939>, <tf.Tensor: shape=(165939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165940>, <tf.Tensor: shape=(165940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165941>, <tf.Tensor: shape=(165941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165942>, <tf.Tensor: shape=(165942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165943>, <tf.Tensor: shape=(165943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165944>, <tf.Tensor: shape=(165944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165945>, <tf.Tensor: shape=(165945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165946>, <tf.Tensor: shape=(165946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165947>, <tf.Tensor: shape=(165947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165948>, <tf.Tensor: shape=(165948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165949>, <tf.Tensor: shape=(165949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165950>, <tf.Tensor: shape=(165950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165951>, <tf.Tensor: shape=(165951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165952>, <tf.Tensor: shape=(165952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165953>, <tf.Tensor: shape=(165953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165954>, <tf.Tensor: shape=(165954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165955>, <tf.Tensor: shape=(165955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165956>, <tf.Tensor: shape=(165956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165957>, <tf.Tensor: shape=(165957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165958>, <tf.Tensor: shape=(165958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165959>, <tf.Tensor: shape=(165959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165960>, <tf.Tensor: shape=(165960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165961>, <tf.Tensor: shape=(165961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165962>, <tf.Tensor: shape=(165962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165963>, <tf.Tensor: shape=(165963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165964>, <tf.Tensor: shape=(165964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165965>, <tf.Tensor: shape=(165965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165966>, <tf.Tensor: shape=(165966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165967>, <tf.Tensor: shape=(165967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165968>, <tf.Tensor: shape=(165968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165969>, <tf.Tensor: shape=(165969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165970>, <tf.Tensor: shape=(165970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165971>, <tf.Tensor: shape=(165971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165972>, <tf.Tensor: shape=(165972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165973>, <tf.Tensor: shape=(165973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165974>, <tf.Tensor: shape=(165974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165975>, <tf.Tensor: shape=(165975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165976>, <tf.Tensor: shape=(165976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165977>, <tf.Tensor: shape=(165977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165978>, <tf.Tensor: shape=(165978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165979>, <tf.Tensor: shape=(165979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165980>, <tf.Tensor: shape=(165980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165981>, <tf.Tensor: shape=(165981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165982>, <tf.Tensor: shape=(165982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165983>, <tf.Tensor: shape=(165983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165984>, <tf.Tensor: shape=(165984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165985>, <tf.Tensor: shape=(165985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165986>, <tf.Tensor: shape=(165986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165987>, <tf.Tensor: shape=(165987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165988>, <tf.Tensor: shape=(165988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165989>, <tf.Tensor: shape=(165989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165990>, <tf.Tensor: shape=(165990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165991>, <tf.Tensor: shape=(165991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165992>, <tf.Tensor: shape=(165992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165993>, <tf.Tensor: shape=(165993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165994>, <tf.Tensor: shape=(165994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165995>, <tf.Tensor: shape=(165995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165996>, <tf.Tensor: shape=(165996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165997>, <tf.Tensor: shape=(165997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165998>, <tf.Tensor: shape=(165998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=165999>, <tf.Tensor: shape=(165999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166000>, <tf.Tensor: shape=(166000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166001>, <tf.Tensor: shape=(166001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166002>, <tf.Tensor: shape=(166002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166003>, <tf.Tensor: shape=(166003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166004>, <tf.Tensor: shape=(166004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166005>, <tf.Tensor: shape=(166005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166006>, <tf.Tensor: shape=(166006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166007>, <tf.Tensor: shape=(166007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166008>, <tf.Tensor: shape=(166008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166009>, <tf.Tensor: shape=(166009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166010>, <tf.Tensor: shape=(166010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166011>, <tf.Tensor: shape=(166011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166012>, <tf.Tensor: shape=(166012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166013>, <tf.Tensor: shape=(166013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166014>, <tf.Tensor: shape=(166014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166015>, <tf.Tensor: shape=(166015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166016>, <tf.Tensor: shape=(166016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166017>, <tf.Tensor: shape=(166017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166018>, <tf.Tensor: shape=(166018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166019>, <tf.Tensor: shape=(166019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166020>, <tf.Tensor: shape=(166020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166021>, <tf.Tensor: shape=(166021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166022>, <tf.Tensor: shape=(166022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166023>, <tf.Tensor: shape=(166023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166024>, <tf.Tensor: shape=(166024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166025>, <tf.Tensor: shape=(166025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166026>, <tf.Tensor: shape=(166026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166027>, <tf.Tensor: shape=(166027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166028>, <tf.Tensor: shape=(166028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166029>, <tf.Tensor: shape=(166029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166030>, <tf.Tensor: shape=(166030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166031>, <tf.Tensor: shape=(166031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166032>, <tf.Tensor: shape=(166032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166033>, <tf.Tensor: shape=(166033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166034>, <tf.Tensor: shape=(166034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166035>, <tf.Tensor: shape=(166035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166036>, <tf.Tensor: shape=(166036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166037>, <tf.Tensor: shape=(166037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166038>, <tf.Tensor: shape=(166038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166039>, <tf.Tensor: shape=(166039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166040>, <tf.Tensor: shape=(166040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166041>, <tf.Tensor: shape=(166041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166042>, <tf.Tensor: shape=(166042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166043>, <tf.Tensor: shape=(166043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166044>, <tf.Tensor: shape=(166044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166045>, <tf.Tensor: shape=(166045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166046>, <tf.Tensor: shape=(166046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166047>, <tf.Tensor: shape=(166047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166048>, <tf.Tensor: shape=(166048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166049>, <tf.Tensor: shape=(166049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166050>, <tf.Tensor: shape=(166050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166051>, <tf.Tensor: shape=(166051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166052>, <tf.Tensor: shape=(166052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166053>, <tf.Tensor: shape=(166053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166054>, <tf.Tensor: shape=(166054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166055>, <tf.Tensor: shape=(166055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166056>, <tf.Tensor: shape=(166056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166057>, <tf.Tensor: shape=(166057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166058>, <tf.Tensor: shape=(166058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166059>, <tf.Tensor: shape=(166059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166060>, <tf.Tensor: shape=(166060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166061>, <tf.Tensor: shape=(166061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166062>, <tf.Tensor: shape=(166062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166063>, <tf.Tensor: shape=(166063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166064>, <tf.Tensor: shape=(166064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166065>, <tf.Tensor: shape=(166065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166066>, <tf.Tensor: shape=(166066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166067>, <tf.Tensor: shape=(166067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166068>, <tf.Tensor: shape=(166068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166069>, <tf.Tensor: shape=(166069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166070>, <tf.Tensor: shape=(166070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166071>, <tf.Tensor: shape=(166071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166072>, <tf.Tensor: shape=(166072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166073>, <tf.Tensor: shape=(166073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166074>, <tf.Tensor: shape=(166074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166075>, <tf.Tensor: shape=(166075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166076>, <tf.Tensor: shape=(166076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166077>, <tf.Tensor: shape=(166077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166078>, <tf.Tensor: shape=(166078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166079>, <tf.Tensor: shape=(166079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166080>, <tf.Tensor: shape=(166080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166081>, <tf.Tensor: shape=(166081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166082>, <tf.Tensor: shape=(166082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166083>, <tf.Tensor: shape=(166083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166084>, <tf.Tensor: shape=(166084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166085>, <tf.Tensor: shape=(166085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166086>, <tf.Tensor: shape=(166086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166087>, <tf.Tensor: shape=(166087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166088>, <tf.Tensor: shape=(166088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166089>, <tf.Tensor: shape=(166089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166090>, <tf.Tensor: shape=(166090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166091>, <tf.Tensor: shape=(166091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166092>, <tf.Tensor: shape=(166092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166093>, <tf.Tensor: shape=(166093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166094>, <tf.Tensor: shape=(166094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166095>, <tf.Tensor: shape=(166095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166096>, <tf.Tensor: shape=(166096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166097>, <tf.Tensor: shape=(166097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166098>, <tf.Tensor: shape=(166098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166099>, <tf.Tensor: shape=(166099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166100>, <tf.Tensor: shape=(166100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166101>, <tf.Tensor: shape=(166101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166102>, <tf.Tensor: shape=(166102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166103>, <tf.Tensor: shape=(166103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166104>, <tf.Tensor: shape=(166104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166105>, <tf.Tensor: shape=(166105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166106>, <tf.Tensor: shape=(166106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166107>, <tf.Tensor: shape=(166107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166108>, <tf.Tensor: shape=(166108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166109>, <tf.Tensor: shape=(166109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166110>, <tf.Tensor: shape=(166110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166111>, <tf.Tensor: shape=(166111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166112>, <tf.Tensor: shape=(166112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166113>, <tf.Tensor: shape=(166113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166114>, <tf.Tensor: shape=(166114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166115>, <tf.Tensor: shape=(166115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166116>, <tf.Tensor: shape=(166116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166117>, <tf.Tensor: shape=(166117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166118>, <tf.Tensor: shape=(166118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166119>, <tf.Tensor: shape=(166119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166120>, <tf.Tensor: shape=(166120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166121>, <tf.Tensor: shape=(166121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166122>, <tf.Tensor: shape=(166122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166123>, <tf.Tensor: shape=(166123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166124>, <tf.Tensor: shape=(166124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166125>, <tf.Tensor: shape=(166125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166126>, <tf.Tensor: shape=(166126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166127>, <tf.Tensor: shape=(166127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166128>, <tf.Tensor: shape=(166128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166129>, <tf.Tensor: shape=(166129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166130>, <tf.Tensor: shape=(166130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166131>, <tf.Tensor: shape=(166131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166132>, <tf.Tensor: shape=(166132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166133>, <tf.Tensor: shape=(166133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166134>, <tf.Tensor: shape=(166134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166135>, <tf.Tensor: shape=(166135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166136>, <tf.Tensor: shape=(166136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166137>, <tf.Tensor: shape=(166137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166138>, <tf.Tensor: shape=(166138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166139>, <tf.Tensor: shape=(166139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166140>, <tf.Tensor: shape=(166140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166141>, <tf.Tensor: shape=(166141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166142>, <tf.Tensor: shape=(166142,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166143>, <tf.Tensor: shape=(166143,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166144>, <tf.Tensor: shape=(166144,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166145>, <tf.Tensor: shape=(166145,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166146>, <tf.Tensor: shape=(166146,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166147>, <tf.Tensor: shape=(166147,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166148>, <tf.Tensor: shape=(166148,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166149>, <tf.Tensor: shape=(166149,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166150>, <tf.Tensor: shape=(166150,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166151>, <tf.Tensor: shape=(166151,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166152>, <tf.Tensor: shape=(166152,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166153>, <tf.Tensor: shape=(166153,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166154>, <tf.Tensor: shape=(166154,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166155>, <tf.Tensor: shape=(166155,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166156>, <tf.Tensor: shape=(166156,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166157>, <tf.Tensor: shape=(166157,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166158>, <tf.Tensor: shape=(166158,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166159>, <tf.Tensor: shape=(166159,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166160>, <tf.Tensor: shape=(166160,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166161>, <tf.Tensor: shape=(166161,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166162>, <tf.Tensor: shape=(166162,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166163>, <tf.Tensor: shape=(166163,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166164>, <tf.Tensor: shape=(166164,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166165>, <tf.Tensor: shape=(166165,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166166>, <tf.Tensor: shape=(166166,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166167>, <tf.Tensor: shape=(166167,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166168>, <tf.Tensor: shape=(166168,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166169>, <tf.Tensor: shape=(166169,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166170>, <tf.Tensor: shape=(166170,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166171>, <tf.Tensor: shape=(166171,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166172>, <tf.Tensor: shape=(166172,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166173>, <tf.Tensor: shape=(166173,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166174>, <tf.Tensor: shape=(166174,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166175>, <tf.Tensor: shape=(166175,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166176>, <tf.Tensor: shape=(166176,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166177>, <tf.Tensor: shape=(166177,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166178>, <tf.Tensor: shape=(166178,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166179>, <tf.Tensor: shape=(166179,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166180>, <tf.Tensor: shape=(166180,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166181>, <tf.Tensor: shape=(166181,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166182>, <tf.Tensor: shape=(166182,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166183>, <tf.Tensor: shape=(166183,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166184>, <tf.Tensor: shape=(166184,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166185>, <tf.Tensor: shape=(166185,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166186>, <tf.Tensor: shape=(166186,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166187>, <tf.Tensor: shape=(166187,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166188>, <tf.Tensor: shape=(166188,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166189>, <tf.Tensor: shape=(166189,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166190>, <tf.Tensor: shape=(166190,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166191>, <tf.Tensor: shape=(166191,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166192>, <tf.Tensor: shape=(166192,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166193>, <tf.Tensor: shape=(166193,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166194>, <tf.Tensor: shape=(166194,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166195>, <tf.Tensor: shape=(166195,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166196>, <tf.Tensor: shape=(166196,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166197>, <tf.Tensor: shape=(166197,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166198>, <tf.Tensor: shape=(166198,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166199>, <tf.Tensor: shape=(166199,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166200>, <tf.Tensor: shape=(166200,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166201>, <tf.Tensor: shape=(166201,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166202>, <tf.Tensor: shape=(166202,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166203>, <tf.Tensor: shape=(166203,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166204>, <tf.Tensor: shape=(166204,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166205>, <tf.Tensor: shape=(166205,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166206>, <tf.Tensor: shape=(166206,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166207>, <tf.Tensor: shape=(166207,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166208>, <tf.Tensor: shape=(166208,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166209>, <tf.Tensor: shape=(166209,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166210>, <tf.Tensor: shape=(166210,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166211>, <tf.Tensor: shape=(166211,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166212>, <tf.Tensor: shape=(166212,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166213>, <tf.Tensor: shape=(166213,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166214>, <tf.Tensor: shape=(166214,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166215>, <tf.Tensor: shape=(166215,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166216>, <tf.Tensor: shape=(166216,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166217>, <tf.Tensor: shape=(166217,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166218>, <tf.Tensor: shape=(166218,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166219>, <tf.Tensor: shape=(166219,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166220>, <tf.Tensor: shape=(166220,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166221>, <tf.Tensor: shape=(166221,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166222>, <tf.Tensor: shape=(166222,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166223>, <tf.Tensor: shape=(166223,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166224>, <tf.Tensor: shape=(166224,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166225>, <tf.Tensor: shape=(166225,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166226>, <tf.Tensor: shape=(166226,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166227>, <tf.Tensor: shape=(166227,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166228>, <tf.Tensor: shape=(166228,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166229>, <tf.Tensor: shape=(166229,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166230>, <tf.Tensor: shape=(166230,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166231>, <tf.Tensor: shape=(166231,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166232>, <tf.Tensor: shape=(166232,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166233>, <tf.Tensor: shape=(166233,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166234>, <tf.Tensor: shape=(166234,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166235>, <tf.Tensor: shape=(166235,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166236>, <tf.Tensor: shape=(166236,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166237>, <tf.Tensor: shape=(166237,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166238>, <tf.Tensor: shape=(166238,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166239>, <tf.Tensor: shape=(166239,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166240>, <tf.Tensor: shape=(166240,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166241>, <tf.Tensor: shape=(166241,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166242>, <tf.Tensor: shape=(166242,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166243>, <tf.Tensor: shape=(166243,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166244>, <tf.Tensor: shape=(166244,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166245>, <tf.Tensor: shape=(166245,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166246>, <tf.Tensor: shape=(166246,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166247>, <tf.Tensor: shape=(166247,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166248>, <tf.Tensor: shape=(166248,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166249>, <tf.Tensor: shape=(166249,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166250>, <tf.Tensor: shape=(166250,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166251>, <tf.Tensor: shape=(166251,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166252>, <tf.Tensor: shape=(166252,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166253>, <tf.Tensor: shape=(166253,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166254>, <tf.Tensor: shape=(166254,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166255>, <tf.Tensor: shape=(166255,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166256>, <tf.Tensor: shape=(166256,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166257>, <tf.Tensor: shape=(166257,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166258>, <tf.Tensor: shape=(166258,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166259>, <tf.Tensor: shape=(166259,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166260>, <tf.Tensor: shape=(166260,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166261>, <tf.Tensor: shape=(166261,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166262>, <tf.Tensor: shape=(166262,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166263>, <tf.Tensor: shape=(166263,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166264>, <tf.Tensor: shape=(166264,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166265>, <tf.Tensor: shape=(166265,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166266>, <tf.Tensor: shape=(166266,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166267>, <tf.Tensor: shape=(166267,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166268>, <tf.Tensor: shape=(166268,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166269>, <tf.Tensor: shape=(166269,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166270>, <tf.Tensor: shape=(166270,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166271>, <tf.Tensor: shape=(166271,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166272>, <tf.Tensor: shape=(166272,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166273>, <tf.Tensor: shape=(166273,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166274>, <tf.Tensor: shape=(166274,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166275>, <tf.Tensor: shape=(166275,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166276>, <tf.Tensor: shape=(166276,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166277>, <tf.Tensor: shape=(166277,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166278>, <tf.Tensor: shape=(166278,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166279>, <tf.Tensor: shape=(166279,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166280>, <tf.Tensor: shape=(166280,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166281>, <tf.Tensor: shape=(166281,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166282>, <tf.Tensor: shape=(166282,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166283>, <tf.Tensor: shape=(166283,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166284>, <tf.Tensor: shape=(166284,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166285>, <tf.Tensor: shape=(166285,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166286>, <tf.Tensor: shape=(166286,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166287>, <tf.Tensor: shape=(166287,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166288>, <tf.Tensor: shape=(166288,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166289>, <tf.Tensor: shape=(166289,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166290>, <tf.Tensor: shape=(166290,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166291>, <tf.Tensor: shape=(166291,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166292>, <tf.Tensor: shape=(166292,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166293>, <tf.Tensor: shape=(166293,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166294>, <tf.Tensor: shape=(166294,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166295>, <tf.Tensor: shape=(166295,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166296>, <tf.Tensor: shape=(166296,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166297>, <tf.Tensor: shape=(166297,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166298>, <tf.Tensor: shape=(166298,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166299>, <tf.Tensor: shape=(166299,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166300>, <tf.Tensor: shape=(166300,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166301>, <tf.Tensor: shape=(166301,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166302>, <tf.Tensor: shape=(166302,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166303>, <tf.Tensor: shape=(166303,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166304>, <tf.Tensor: shape=(166304,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166305>, <tf.Tensor: shape=(166305,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166306>, <tf.Tensor: shape=(166306,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166307>, <tf.Tensor: shape=(166307,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166308>, <tf.Tensor: shape=(166308,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166309>, <tf.Tensor: shape=(166309,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166310>, <tf.Tensor: shape=(166310,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166311>, <tf.Tensor: shape=(166311,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166312>, <tf.Tensor: shape=(166312,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166313>, <tf.Tensor: shape=(166313,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166314>, <tf.Tensor: shape=(166314,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166315>, <tf.Tensor: shape=(166315,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166316>, <tf.Tensor: shape=(166316,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166317>, <tf.Tensor: shape=(166317,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166318>, <tf.Tensor: shape=(166318,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166319>, <tf.Tensor: shape=(166319,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166320>, <tf.Tensor: shape=(166320,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166321>, <tf.Tensor: shape=(166321,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166322>, <tf.Tensor: shape=(166322,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166323>, <tf.Tensor: shape=(166323,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166324>, <tf.Tensor: shape=(166324,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166325>, <tf.Tensor: shape=(166325,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166326>, <tf.Tensor: shape=(166326,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166327>, <tf.Tensor: shape=(166327,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166328>, <tf.Tensor: shape=(166328,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166329>, <tf.Tensor: shape=(166329,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166330>, <tf.Tensor: shape=(166330,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166331>, <tf.Tensor: shape=(166331,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166332>, <tf.Tensor: shape=(166332,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166333>, <tf.Tensor: shape=(166333,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166334>, <tf.Tensor: shape=(166334,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166335>, <tf.Tensor: shape=(166335,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166336>, <tf.Tensor: shape=(166336,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166337>, <tf.Tensor: shape=(166337,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166338>, <tf.Tensor: shape=(166338,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166339>, <tf.Tensor: shape=(166339,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166340>, <tf.Tensor: shape=(166340,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166341>, <tf.Tensor: shape=(166341,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166342>, <tf.Tensor: shape=(166342,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166343>, <tf.Tensor: shape=(166343,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166344>, <tf.Tensor: shape=(166344,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166345>, <tf.Tensor: shape=(166345,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166346>, <tf.Tensor: shape=(166346,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166347>, <tf.Tensor: shape=(166347,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166348>, <tf.Tensor: shape=(166348,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166349>, <tf.Tensor: shape=(166349,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166350>, <tf.Tensor: shape=(166350,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166351>, <tf.Tensor: shape=(166351,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166352>, <tf.Tensor: shape=(166352,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166353>, <tf.Tensor: shape=(166353,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166354>, <tf.Tensor: shape=(166354,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166355>, <tf.Tensor: shape=(166355,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166356>, <tf.Tensor: shape=(166356,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166357>, <tf.Tensor: shape=(166357,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166358>, <tf.Tensor: shape=(166358,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166359>, <tf.Tensor: shape=(166359,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166360>, <tf.Tensor: shape=(166360,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166361>, <tf.Tensor: shape=(166361,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166362>, <tf.Tensor: shape=(166362,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166363>, <tf.Tensor: shape=(166363,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166364>, <tf.Tensor: shape=(166364,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166365>, <tf.Tensor: shape=(166365,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166366>, <tf.Tensor: shape=(166366,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166367>, <tf.Tensor: shape=(166367,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166368>, <tf.Tensor: shape=(166368,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166369>, <tf.Tensor: shape=(166369,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166370>, <tf.Tensor: shape=(166370,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166371>, <tf.Tensor: shape=(166371,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166372>, <tf.Tensor: shape=(166372,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166373>, <tf.Tensor: shape=(166373,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166374>, <tf.Tensor: shape=(166374,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166375>, <tf.Tensor: shape=(166375,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166376>, <tf.Tensor: shape=(166376,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166377>, <tf.Tensor: shape=(166377,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166378>, <tf.Tensor: shape=(166378,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166379>, <tf.Tensor: shape=(166379,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166380>, <tf.Tensor: shape=(166380,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166381>, <tf.Tensor: shape=(166381,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166382>, <tf.Tensor: shape=(166382,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166383>, <tf.Tensor: shape=(166383,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166384>, <tf.Tensor: shape=(166384,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166385>, <tf.Tensor: shape=(166385,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166386>, <tf.Tensor: shape=(166386,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166387>, <tf.Tensor: shape=(166387,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166388>, <tf.Tensor: shape=(166388,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166389>, <tf.Tensor: shape=(166389,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166390>, <tf.Tensor: shape=(166390,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166391>, <tf.Tensor: shape=(166391,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166392>, <tf.Tensor: shape=(166392,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166393>, <tf.Tensor: shape=(166393,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166394>, <tf.Tensor: shape=(166394,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166395>, <tf.Tensor: shape=(166395,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166396>, <tf.Tensor: shape=(166396,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166397>, <tf.Tensor: shape=(166397,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166398>, <tf.Tensor: shape=(166398,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166399>, <tf.Tensor: shape=(166399,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166400>, <tf.Tensor: shape=(166400,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166401>, <tf.Tensor: shape=(166401,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166402>, <tf.Tensor: shape=(166402,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166403>, <tf.Tensor: shape=(166403,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166404>, <tf.Tensor: shape=(166404,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166405>, <tf.Tensor: shape=(166405,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166406>, <tf.Tensor: shape=(166406,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166407>, <tf.Tensor: shape=(166407,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166408>, <tf.Tensor: shape=(166408,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166409>, <tf.Tensor: shape=(166409,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166410>, <tf.Tensor: shape=(166410,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166411>, <tf.Tensor: shape=(166411,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166412>, <tf.Tensor: shape=(166412,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166413>, <tf.Tensor: shape=(166413,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166414>, <tf.Tensor: shape=(166414,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166415>, <tf.Tensor: shape=(166415,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166416>, <tf.Tensor: shape=(166416,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166417>, <tf.Tensor: shape=(166417,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166418>, <tf.Tensor: shape=(166418,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166419>, <tf.Tensor: shape=(166419,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166420>, <tf.Tensor: shape=(166420,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166421>, <tf.Tensor: shape=(166421,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166422>, <tf.Tensor: shape=(166422,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166423>, <tf.Tensor: shape=(166423,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166424>, <tf.Tensor: shape=(166424,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166425>, <tf.Tensor: shape=(166425,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166426>, <tf.Tensor: shape=(166426,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166427>, <tf.Tensor: shape=(166427,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166428>, <tf.Tensor: shape=(166428,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166429>, <tf.Tensor: shape=(166429,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166430>, <tf.Tensor: shape=(166430,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166431>, <tf.Tensor: shape=(166431,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166432>, <tf.Tensor: shape=(166432,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166433>, <tf.Tensor: shape=(166433,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166434>, <tf.Tensor: shape=(166434,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166435>, <tf.Tensor: shape=(166435,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166436>, <tf.Tensor: shape=(166436,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166437>, <tf.Tensor: shape=(166437,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166438>, <tf.Tensor: shape=(166438,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166439>, <tf.Tensor: shape=(166439,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166440>, <tf.Tensor: shape=(166440,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166441>, <tf.Tensor: shape=(166441,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166442>, <tf.Tensor: shape=(166442,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166443>, <tf.Tensor: shape=(166443,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166444>, <tf.Tensor: shape=(166444,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166445>, <tf.Tensor: shape=(166445,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166446>, <tf.Tensor: shape=(166446,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166447>, <tf.Tensor: shape=(166447,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166448>, <tf.Tensor: shape=(166448,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166449>, <tf.Tensor: shape=(166449,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166450>, <tf.Tensor: shape=(166450,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166451>, <tf.Tensor: shape=(166451,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166452>, <tf.Tensor: shape=(166452,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166453>, <tf.Tensor: shape=(166453,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166454>, <tf.Tensor: shape=(166454,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166455>, <tf.Tensor: shape=(166455,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166456>, <tf.Tensor: shape=(166456,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166457>, <tf.Tensor: shape=(166457,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166458>, <tf.Tensor: shape=(166458,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166459>, <tf.Tensor: shape=(166459,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166460>, <tf.Tensor: shape=(166460,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166461>, <tf.Tensor: shape=(166461,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166462>, <tf.Tensor: shape=(166462,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166463>, <tf.Tensor: shape=(166463,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166464>, <tf.Tensor: shape=(166464,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166465>, <tf.Tensor: shape=(166465,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166466>, <tf.Tensor: shape=(166466,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166467>, <tf.Tensor: shape=(166467,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166468>, <tf.Tensor: shape=(166468,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166469>, <tf.Tensor: shape=(166469,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166470>, <tf.Tensor: shape=(166470,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166471>, <tf.Tensor: shape=(166471,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166472>, <tf.Tensor: shape=(166472,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166473>, <tf.Tensor: shape=(166473,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166474>, <tf.Tensor: shape=(166474,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166475>, <tf.Tensor: shape=(166475,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166476>, <tf.Tensor: shape=(166476,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166477>, <tf.Tensor: shape=(166477,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166478>, <tf.Tensor: shape=(166478,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166479>, <tf.Tensor: shape=(166479,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166480>, <tf.Tensor: shape=(166480,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166481>, <tf.Tensor: shape=(166481,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166482>, <tf.Tensor: shape=(166482,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166483>, <tf.Tensor: shape=(166483,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166484>, <tf.Tensor: shape=(166484,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166485>, <tf.Tensor: shape=(166485,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166486>, <tf.Tensor: shape=(166486,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166487>, <tf.Tensor: shape=(166487,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166488>, <tf.Tensor: shape=(166488,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166489>, <tf.Tensor: shape=(166489,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166490>, <tf.Tensor: shape=(166490,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166491>, <tf.Tensor: shape=(166491,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166492>, <tf.Tensor: shape=(166492,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166493>, <tf.Tensor: shape=(166493,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166494>, <tf.Tensor: shape=(166494,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166495>, <tf.Tensor: shape=(166495,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166496>, <tf.Tensor: shape=(166496,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166497>, <tf.Tensor: shape=(166497,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166498>, <tf.Tensor: shape=(166498,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166499>, <tf.Tensor: shape=(166499,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166500>, <tf.Tensor: shape=(166500,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166501>, <tf.Tensor: shape=(166501,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166502>, <tf.Tensor: shape=(166502,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166503>, <tf.Tensor: shape=(166503,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166504>, <tf.Tensor: shape=(166504,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166505>, <tf.Tensor: shape=(166505,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166506>, <tf.Tensor: shape=(166506,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166507>, <tf.Tensor: shape=(166507,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166508>, <tf.Tensor: shape=(166508,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166509>, <tf.Tensor: shape=(166509,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166510>, <tf.Tensor: shape=(166510,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166511>, <tf.Tensor: shape=(166511,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166512>, <tf.Tensor: shape=(166512,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166513>, <tf.Tensor: shape=(166513,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166514>, <tf.Tensor: shape=(166514,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166515>, <tf.Tensor: shape=(166515,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166516>, <tf.Tensor: shape=(166516,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166517>, <tf.Tensor: shape=(166517,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166518>, <tf.Tensor: shape=(166518,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166519>, <tf.Tensor: shape=(166519,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166520>, <tf.Tensor: shape=(166520,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166521>, <tf.Tensor: shape=(166521,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166522>, <tf.Tensor: shape=(166522,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166523>, <tf.Tensor: shape=(166523,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166524>, <tf.Tensor: shape=(166524,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166525>, <tf.Tensor: shape=(166525,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166526>, <tf.Tensor: shape=(166526,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166527>, <tf.Tensor: shape=(166527,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166528>, <tf.Tensor: shape=(166528,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166529>, <tf.Tensor: shape=(166529,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166530>, <tf.Tensor: shape=(166530,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166531>, <tf.Tensor: shape=(166531,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166532>, <tf.Tensor: shape=(166532,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166533>, <tf.Tensor: shape=(166533,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166534>, <tf.Tensor: shape=(166534,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166535>, <tf.Tensor: shape=(166535,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166536>, <tf.Tensor: shape=(166536,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166537>, <tf.Tensor: shape=(166537,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166538>, <tf.Tensor: shape=(166538,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166539>, <tf.Tensor: shape=(166539,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166540>, <tf.Tensor: shape=(166540,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166541>, <tf.Tensor: shape=(166541,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166542>, <tf.Tensor: shape=(166542,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166543>, <tf.Tensor: shape=(166543,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166544>, <tf.Tensor: shape=(166544,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166545>, <tf.Tensor: shape=(166545,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166546>, <tf.Tensor: shape=(166546,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166547>, <tf.Tensor: shape=(166547,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166548>, <tf.Tensor: shape=(166548,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166549>, <tf.Tensor: shape=(166549,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166550>, <tf.Tensor: shape=(166550,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166551>, <tf.Tensor: shape=(166551,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166552>, <tf.Tensor: shape=(166552,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166553>, <tf.Tensor: shape=(166553,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166554>, <tf.Tensor: shape=(166554,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166555>, <tf.Tensor: shape=(166555,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166556>, <tf.Tensor: shape=(166556,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166557>, <tf.Tensor: shape=(166557,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166558>, <tf.Tensor: shape=(166558,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166559>, <tf.Tensor: shape=(166559,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166560>, <tf.Tensor: shape=(166560,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166561>, <tf.Tensor: shape=(166561,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166562>, <tf.Tensor: shape=(166562,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166563>, <tf.Tensor: shape=(166563,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166564>, <tf.Tensor: shape=(166564,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166565>, <tf.Tensor: shape=(166565,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166566>, <tf.Tensor: shape=(166566,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166567>, <tf.Tensor: shape=(166567,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166568>, <tf.Tensor: shape=(166568,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166569>, <tf.Tensor: shape=(166569,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166570>, <tf.Tensor: shape=(166570,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166571>, <tf.Tensor: shape=(166571,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166572>, <tf.Tensor: shape=(166572,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166573>, <tf.Tensor: shape=(166573,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166574>, <tf.Tensor: shape=(166574,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166575>, <tf.Tensor: shape=(166575,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166576>, <tf.Tensor: shape=(166576,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166577>, <tf.Tensor: shape=(166577,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166578>, <tf.Tensor: shape=(166578,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166579>, <tf.Tensor: shape=(166579,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166580>, <tf.Tensor: shape=(166580,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166581>, <tf.Tensor: shape=(166581,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166582>, <tf.Tensor: shape=(166582,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166583>, <tf.Tensor: shape=(166583,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166584>, <tf.Tensor: shape=(166584,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166585>, <tf.Tensor: shape=(166585,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166586>, <tf.Tensor: shape=(166586,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166587>, <tf.Tensor: shape=(166587,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166588>, <tf.Tensor: shape=(166588,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166589>, <tf.Tensor: shape=(166589,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166590>, <tf.Tensor: shape=(166590,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166591>, <tf.Tensor: shape=(166591,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166592>, <tf.Tensor: shape=(166592,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166593>, <tf.Tensor: shape=(166593,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166594>, <tf.Tensor: shape=(166594,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166595>, <tf.Tensor: shape=(166595,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166596>, <tf.Tensor: shape=(166596,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166597>, <tf.Tensor: shape=(166597,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166598>, <tf.Tensor: shape=(166598,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166599>, <tf.Tensor: shape=(166599,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166600>, <tf.Tensor: shape=(166600,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166601>, <tf.Tensor: shape=(166601,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166602>, <tf.Tensor: shape=(166602,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166603>, <tf.Tensor: shape=(166603,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166604>, <tf.Tensor: shape=(166604,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166605>, <tf.Tensor: shape=(166605,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166606>, <tf.Tensor: shape=(166606,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166607>, <tf.Tensor: shape=(166607,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166608>, <tf.Tensor: shape=(166608,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166609>, <tf.Tensor: shape=(166609,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166610>, <tf.Tensor: shape=(166610,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166611>, <tf.Tensor: shape=(166611,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166612>, <tf.Tensor: shape=(166612,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166613>, <tf.Tensor: shape=(166613,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166614>, <tf.Tensor: shape=(166614,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166615>, <tf.Tensor: shape=(166615,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166616>, <tf.Tensor: shape=(166616,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166617>, <tf.Tensor: shape=(166617,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166618>, <tf.Tensor: shape=(166618,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166619>, <tf.Tensor: shape=(166619,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166620>, <tf.Tensor: shape=(166620,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166621>, <tf.Tensor: shape=(166621,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166622>, <tf.Tensor: shape=(166622,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166623>, <tf.Tensor: shape=(166623,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166624>, <tf.Tensor: shape=(166624,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166625>, <tf.Tensor: shape=(166625,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166626>, <tf.Tensor: shape=(166626,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166627>, <tf.Tensor: shape=(166627,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166628>, <tf.Tensor: shape=(166628,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166629>, <tf.Tensor: shape=(166629,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166630>, <tf.Tensor: shape=(166630,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166631>, <tf.Tensor: shape=(166631,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166632>, <tf.Tensor: shape=(166632,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166633>, <tf.Tensor: shape=(166633,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166634>, <tf.Tensor: shape=(166634,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166635>, <tf.Tensor: shape=(166635,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166636>, <tf.Tensor: shape=(166636,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166637>, <tf.Tensor: shape=(166637,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166638>, <tf.Tensor: shape=(166638,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166639>, <tf.Tensor: shape=(166639,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166640>, <tf.Tensor: shape=(166640,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166641>, <tf.Tensor: shape=(166641,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166642>, <tf.Tensor: shape=(166642,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166643>, <tf.Tensor: shape=(166643,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166644>, <tf.Tensor: shape=(166644,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166645>, <tf.Tensor: shape=(166645,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166646>, <tf.Tensor: shape=(166646,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166647>, <tf.Tensor: shape=(166647,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166648>, <tf.Tensor: shape=(166648,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166649>, <tf.Tensor: shape=(166649,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166650>, <tf.Tensor: shape=(166650,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166651>, <tf.Tensor: shape=(166651,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166652>, <tf.Tensor: shape=(166652,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166653>, <tf.Tensor: shape=(166653,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166654>, <tf.Tensor: shape=(166654,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166655>, <tf.Tensor: shape=(166655,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166656>, <tf.Tensor: shape=(166656,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166657>, <tf.Tensor: shape=(166657,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166658>, <tf.Tensor: shape=(166658,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166659>, <tf.Tensor: shape=(166659,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166660>, <tf.Tensor: shape=(166660,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166661>, <tf.Tensor: shape=(166661,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166662>, <tf.Tensor: shape=(166662,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166663>, <tf.Tensor: shape=(166663,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166664>, <tf.Tensor: shape=(166664,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166665>, <tf.Tensor: shape=(166665,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166666>, <tf.Tensor: shape=(166666,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166667>, <tf.Tensor: shape=(166667,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166668>, <tf.Tensor: shape=(166668,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166669>, <tf.Tensor: shape=(166669,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166670>, <tf.Tensor: shape=(166670,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166671>, <tf.Tensor: shape=(166671,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166672>, <tf.Tensor: shape=(166672,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166673>, <tf.Tensor: shape=(166673,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166674>, <tf.Tensor: shape=(166674,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166675>, <tf.Tensor: shape=(166675,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166676>, <tf.Tensor: shape=(166676,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166677>, <tf.Tensor: shape=(166677,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166678>, <tf.Tensor: shape=(166678,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166679>, <tf.Tensor: shape=(166679,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166680>, <tf.Tensor: shape=(166680,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166681>, <tf.Tensor: shape=(166681,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166682>, <tf.Tensor: shape=(166682,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166683>, <tf.Tensor: shape=(166683,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166684>, <tf.Tensor: shape=(166684,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166685>, <tf.Tensor: shape=(166685,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166686>, <tf.Tensor: shape=(166686,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166687>, <tf.Tensor: shape=(166687,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166688>, <tf.Tensor: shape=(166688,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166689>, <tf.Tensor: shape=(166689,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166690>, <tf.Tensor: shape=(166690,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166691>, <tf.Tensor: shape=(166691,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166692>, <tf.Tensor: shape=(166692,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166693>, <tf.Tensor: shape=(166693,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166694>, <tf.Tensor: shape=(166694,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166695>, <tf.Tensor: shape=(166695,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166696>, <tf.Tensor: shape=(166696,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166697>, <tf.Tensor: shape=(166697,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166698>, <tf.Tensor: shape=(166698,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166699>, <tf.Tensor: shape=(166699,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166700>, <tf.Tensor: shape=(166700,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166701>, <tf.Tensor: shape=(166701,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166702>, <tf.Tensor: shape=(166702,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166703>, <tf.Tensor: shape=(166703,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166704>, <tf.Tensor: shape=(166704,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166705>, <tf.Tensor: shape=(166705,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166706>, <tf.Tensor: shape=(166706,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166707>, <tf.Tensor: shape=(166707,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166708>, <tf.Tensor: shape=(166708,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166709>, <tf.Tensor: shape=(166709,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166710>, <tf.Tensor: shape=(166710,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166711>, <tf.Tensor: shape=(166711,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166712>, <tf.Tensor: shape=(166712,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166713>, <tf.Tensor: shape=(166713,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166714>, <tf.Tensor: shape=(166714,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166715>, <tf.Tensor: shape=(166715,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166716>, <tf.Tensor: shape=(166716,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166717>, <tf.Tensor: shape=(166717,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166718>, <tf.Tensor: shape=(166718,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166719>, <tf.Tensor: shape=(166719,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166720>, <tf.Tensor: shape=(166720,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166721>, <tf.Tensor: shape=(166721,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166722>, <tf.Tensor: shape=(166722,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166723>, <tf.Tensor: shape=(166723,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166724>, <tf.Tensor: shape=(166724,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166725>, <tf.Tensor: shape=(166725,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166726>, <tf.Tensor: shape=(166726,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166727>, <tf.Tensor: shape=(166727,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166728>, <tf.Tensor: shape=(166728,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166729>, <tf.Tensor: shape=(166729,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166730>, <tf.Tensor: shape=(166730,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166731>, <tf.Tensor: shape=(166731,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166732>, <tf.Tensor: shape=(166732,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166733>, <tf.Tensor: shape=(166733,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166734>, <tf.Tensor: shape=(166734,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166735>, <tf.Tensor: shape=(166735,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166736>, <tf.Tensor: shape=(166736,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166737>, <tf.Tensor: shape=(166737,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166738>, <tf.Tensor: shape=(166738,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166739>, <tf.Tensor: shape=(166739,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166740>, <tf.Tensor: shape=(166740,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166741>, <tf.Tensor: shape=(166741,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166742>, <tf.Tensor: shape=(166742,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166743>, <tf.Tensor: shape=(166743,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166744>, <tf.Tensor: shape=(166744,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166745>, <tf.Tensor: shape=(166745,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166746>, <tf.Tensor: shape=(166746,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166747>, <tf.Tensor: shape=(166747,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166748>, <tf.Tensor: shape=(166748,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166749>, <tf.Tensor: shape=(166749,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166750>, <tf.Tensor: shape=(166750,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166751>, <tf.Tensor: shape=(166751,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166752>, <tf.Tensor: shape=(166752,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166753>, <tf.Tensor: shape=(166753,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166754>, <tf.Tensor: shape=(166754,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166755>, <tf.Tensor: shape=(166755,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166756>, <tf.Tensor: shape=(166756,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166757>, <tf.Tensor: shape=(166757,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166758>, <tf.Tensor: shape=(166758,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166759>, <tf.Tensor: shape=(166759,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166760>, <tf.Tensor: shape=(166760,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166761>, <tf.Tensor: shape=(166761,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166762>, <tf.Tensor: shape=(166762,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166763>, <tf.Tensor: shape=(166763,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166764>, <tf.Tensor: shape=(166764,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166765>, <tf.Tensor: shape=(166765,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166766>, <tf.Tensor: shape=(166766,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166767>, <tf.Tensor: shape=(166767,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166768>, <tf.Tensor: shape=(166768,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166769>, <tf.Tensor: shape=(166769,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166770>, <tf.Tensor: shape=(166770,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166771>, <tf.Tensor: shape=(166771,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166772>, <tf.Tensor: shape=(166772,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166773>, <tf.Tensor: shape=(166773,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166774>, <tf.Tensor: shape=(166774,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166775>, <tf.Tensor: shape=(166775,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166776>, <tf.Tensor: shape=(166776,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166777>, <tf.Tensor: shape=(166777,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166778>, <tf.Tensor: shape=(166778,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166779>, <tf.Tensor: shape=(166779,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166780>, <tf.Tensor: shape=(166780,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166781>, <tf.Tensor: shape=(166781,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166782>, <tf.Tensor: shape=(166782,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166783>, <tf.Tensor: shape=(166783,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166784>, <tf.Tensor: shape=(166784,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166785>, <tf.Tensor: shape=(166785,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166786>, <tf.Tensor: shape=(166786,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166787>, <tf.Tensor: shape=(166787,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166788>, <tf.Tensor: shape=(166788,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166789>, <tf.Tensor: shape=(166789,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166790>, <tf.Tensor: shape=(166790,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166791>, <tf.Tensor: shape=(166791,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166792>, <tf.Tensor: shape=(166792,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166793>, <tf.Tensor: shape=(166793,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166794>, <tf.Tensor: shape=(166794,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166795>, <tf.Tensor: shape=(166795,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166796>, <tf.Tensor: shape=(166796,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166797>, <tf.Tensor: shape=(166797,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166798>, <tf.Tensor: shape=(166798,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166799>, <tf.Tensor: shape=(166799,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166800>, <tf.Tensor: shape=(166800,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166801>, <tf.Tensor: shape=(166801,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166802>, <tf.Tensor: shape=(166802,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166803>, <tf.Tensor: shape=(166803,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166804>, <tf.Tensor: shape=(166804,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166805>, <tf.Tensor: shape=(166805,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166806>, <tf.Tensor: shape=(166806,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166807>, <tf.Tensor: shape=(166807,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166808>, <tf.Tensor: shape=(166808,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166809>, <tf.Tensor: shape=(166809,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166810>, <tf.Tensor: shape=(166810,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166811>, <tf.Tensor: shape=(166811,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166812>, <tf.Tensor: shape=(166812,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166813>, <tf.Tensor: shape=(166813,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166814>, <tf.Tensor: shape=(166814,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166815>, <tf.Tensor: shape=(166815,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166816>, <tf.Tensor: shape=(166816,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166817>, <tf.Tensor: shape=(166817,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166818>, <tf.Tensor: shape=(166818,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166819>, <tf.Tensor: shape=(166819,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166820>, <tf.Tensor: shape=(166820,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166821>, <tf.Tensor: shape=(166821,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166822>, <tf.Tensor: shape=(166822,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166823>, <tf.Tensor: shape=(166823,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166824>, <tf.Tensor: shape=(166824,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166825>, <tf.Tensor: shape=(166825,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166826>, <tf.Tensor: shape=(166826,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166827>, <tf.Tensor: shape=(166827,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166828>, <tf.Tensor: shape=(166828,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166829>, <tf.Tensor: shape=(166829,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166830>, <tf.Tensor: shape=(166830,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166831>, <tf.Tensor: shape=(166831,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166832>, <tf.Tensor: shape=(166832,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166833>, <tf.Tensor: shape=(166833,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166834>, <tf.Tensor: shape=(166834,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166835>, <tf.Tensor: shape=(166835,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166836>, <tf.Tensor: shape=(166836,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166837>, <tf.Tensor: shape=(166837,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166838>, <tf.Tensor: shape=(166838,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166839>, <tf.Tensor: shape=(166839,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166840>, <tf.Tensor: shape=(166840,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166841>, <tf.Tensor: shape=(166841,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166842>, <tf.Tensor: shape=(166842,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166843>, <tf.Tensor: shape=(166843,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166844>, <tf.Tensor: shape=(166844,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166845>, <tf.Tensor: shape=(166845,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166846>, <tf.Tensor: shape=(166846,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166847>, <tf.Tensor: shape=(166847,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166848>, <tf.Tensor: shape=(166848,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166849>, <tf.Tensor: shape=(166849,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166850>, <tf.Tensor: shape=(166850,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166851>, <tf.Tensor: shape=(166851,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166852>, <tf.Tensor: shape=(166852,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166853>, <tf.Tensor: shape=(166853,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166854>, <tf.Tensor: shape=(166854,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166855>, <tf.Tensor: shape=(166855,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166856>, <tf.Tensor: shape=(166856,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166857>, <tf.Tensor: shape=(166857,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166858>, <tf.Tensor: shape=(166858,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166859>, <tf.Tensor: shape=(166859,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166860>, <tf.Tensor: shape=(166860,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166861>, <tf.Tensor: shape=(166861,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166862>, <tf.Tensor: shape=(166862,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166863>, <tf.Tensor: shape=(166863,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166864>, <tf.Tensor: shape=(166864,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166865>, <tf.Tensor: shape=(166865,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166866>, <tf.Tensor: shape=(166866,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166867>, <tf.Tensor: shape=(166867,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166868>, <tf.Tensor: shape=(166868,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166869>, <tf.Tensor: shape=(166869,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166870>, <tf.Tensor: shape=(166870,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166871>, <tf.Tensor: shape=(166871,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166872>, <tf.Tensor: shape=(166872,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166873>, <tf.Tensor: shape=(166873,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166874>, <tf.Tensor: shape=(166874,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166875>, <tf.Tensor: shape=(166875,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166876>, <tf.Tensor: shape=(166876,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166877>, <tf.Tensor: shape=(166877,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166878>, <tf.Tensor: shape=(166878,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166879>, <tf.Tensor: shape=(166879,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166880>, <tf.Tensor: shape=(166880,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166881>, <tf.Tensor: shape=(166881,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166882>, <tf.Tensor: shape=(166882,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166883>, <tf.Tensor: shape=(166883,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166884>, <tf.Tensor: shape=(166884,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166885>, <tf.Tensor: shape=(166885,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166886>, <tf.Tensor: shape=(166886,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166887>, <tf.Tensor: shape=(166887,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166888>, <tf.Tensor: shape=(166888,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166889>, <tf.Tensor: shape=(166889,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166890>, <tf.Tensor: shape=(166890,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166891>, <tf.Tensor: shape=(166891,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166892>, <tf.Tensor: shape=(166892,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166893>, <tf.Tensor: shape=(166893,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166894>, <tf.Tensor: shape=(166894,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166895>, <tf.Tensor: shape=(166895,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166896>, <tf.Tensor: shape=(166896,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166897>, <tf.Tensor: shape=(166897,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166898>, <tf.Tensor: shape=(166898,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166899>, <tf.Tensor: shape=(166899,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166900>, <tf.Tensor: shape=(166900,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166901>, <tf.Tensor: shape=(166901,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166902>, <tf.Tensor: shape=(166902,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166903>, <tf.Tensor: shape=(166903,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166904>, <tf.Tensor: shape=(166904,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166905>, <tf.Tensor: shape=(166905,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166906>, <tf.Tensor: shape=(166906,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166907>, <tf.Tensor: shape=(166907,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166908>, <tf.Tensor: shape=(166908,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166909>, <tf.Tensor: shape=(166909,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166910>, <tf.Tensor: shape=(166910,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166911>, <tf.Tensor: shape=(166911,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166912>, <tf.Tensor: shape=(166912,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166913>, <tf.Tensor: shape=(166913,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166914>, <tf.Tensor: shape=(166914,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166915>, <tf.Tensor: shape=(166915,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166916>, <tf.Tensor: shape=(166916,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166917>, <tf.Tensor: shape=(166917,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166918>, <tf.Tensor: shape=(166918,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166919>, <tf.Tensor: shape=(166919,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166920>, <tf.Tensor: shape=(166920,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166921>, <tf.Tensor: shape=(166921,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166922>, <tf.Tensor: shape=(166922,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166923>, <tf.Tensor: shape=(166923,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166924>, <tf.Tensor: shape=(166924,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166925>, <tf.Tensor: shape=(166925,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166926>, <tf.Tensor: shape=(166926,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166927>, <tf.Tensor: shape=(166927,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166928>, <tf.Tensor: shape=(166928,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166929>, <tf.Tensor: shape=(166929,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166930>, <tf.Tensor: shape=(166930,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166931>, <tf.Tensor: shape=(166931,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166932>, <tf.Tensor: shape=(166932,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166933>, <tf.Tensor: shape=(166933,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166934>, <tf.Tensor: shape=(166934,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166935>, <tf.Tensor: shape=(166935,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166936>, <tf.Tensor: shape=(166936,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166937>, <tf.Tensor: shape=(166937,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166938>, <tf.Tensor: shape=(166938,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166939>, <tf.Tensor: shape=(166939,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166940>, <tf.Tensor: shape=(166940,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166941>, <tf.Tensor: shape=(166941,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166942>, <tf.Tensor: shape=(166942,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166943>, <tf.Tensor: shape=(166943,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166944>, <tf.Tensor: shape=(166944,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166945>, <tf.Tensor: shape=(166945,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166946>, <tf.Tensor: shape=(166946,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166947>, <tf.Tensor: shape=(166947,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166948>, <tf.Tensor: shape=(166948,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166949>, <tf.Tensor: shape=(166949,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166950>, <tf.Tensor: shape=(166950,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166951>, <tf.Tensor: shape=(166951,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166952>, <tf.Tensor: shape=(166952,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166953>, <tf.Tensor: shape=(166953,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166954>, <tf.Tensor: shape=(166954,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166955>, <tf.Tensor: shape=(166955,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166956>, <tf.Tensor: shape=(166956,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166957>, <tf.Tensor: shape=(166957,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166958>, <tf.Tensor: shape=(166958,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166959>, <tf.Tensor: shape=(166959,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166960>, <tf.Tensor: shape=(166960,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166961>, <tf.Tensor: shape=(166961,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166962>, <tf.Tensor: shape=(166962,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166963>, <tf.Tensor: shape=(166963,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166964>, <tf.Tensor: shape=(166964,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166965>, <tf.Tensor: shape=(166965,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166966>, <tf.Tensor: shape=(166966,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166967>, <tf.Tensor: shape=(166967,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166968>, <tf.Tensor: shape=(166968,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166969>, <tf.Tensor: shape=(166969,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166970>, <tf.Tensor: shape=(166970,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166971>, <tf.Tensor: shape=(166971,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166972>, <tf.Tensor: shape=(166972,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166973>, <tf.Tensor: shape=(166973,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166974>, <tf.Tensor: shape=(166974,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166975>, <tf.Tensor: shape=(166975,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166976>, <tf.Tensor: shape=(166976,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166977>, <tf.Tensor: shape=(166977,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166978>, <tf.Tensor: shape=(166978,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166979>, <tf.Tensor: shape=(166979,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166980>, <tf.Tensor: shape=(166980,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166981>, <tf.Tensor: shape=(166981,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166982>, <tf.Tensor: shape=(166982,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166983>, <tf.Tensor: shape=(166983,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166984>, <tf.Tensor: shape=(166984,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166985>, <tf.Tensor: shape=(166985,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166986>, <tf.Tensor: shape=(166986,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166987>, <tf.Tensor: shape=(166987,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166988>, <tf.Tensor: shape=(166988,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166989>, <tf.Tensor: shape=(166989,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166990>, <tf.Tensor: shape=(166990,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166991>, <tf.Tensor: shape=(166991,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166992>, <tf.Tensor: shape=(166992,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166993>, <tf.Tensor: shape=(166993,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166994>, <tf.Tensor: shape=(166994,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166995>, <tf.Tensor: shape=(166995,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166996>, <tf.Tensor: shape=(166996,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166997>, <tf.Tensor: shape=(166997,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166998>, <tf.Tensor: shape=(166998,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=166999>, <tf.Tensor: shape=(166999,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167000>, <tf.Tensor: shape=(167000,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167001>, <tf.Tensor: shape=(167001,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167002>, <tf.Tensor: shape=(167002,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167003>, <tf.Tensor: shape=(167003,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167004>, <tf.Tensor: shape=(167004,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167005>, <tf.Tensor: shape=(167005,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167006>, <tf.Tensor: shape=(167006,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167007>, <tf.Tensor: shape=(167007,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167008>, <tf.Tensor: shape=(167008,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167009>, <tf.Tensor: shape=(167009,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167010>, <tf.Tensor: shape=(167010,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167011>, <tf.Tensor: shape=(167011,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167012>, <tf.Tensor: shape=(167012,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167013>, <tf.Tensor: shape=(167013,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167014>, <tf.Tensor: shape=(167014,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167015>, <tf.Tensor: shape=(167015,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167016>, <tf.Tensor: shape=(167016,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167017>, <tf.Tensor: shape=(167017,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167018>, <tf.Tensor: shape=(167018,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167019>, <tf.Tensor: shape=(167019,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167020>, <tf.Tensor: shape=(167020,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167021>, <tf.Tensor: shape=(167021,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167022>, <tf.Tensor: shape=(167022,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167023>, <tf.Tensor: shape=(167023,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167024>, <tf.Tensor: shape=(167024,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167025>, <tf.Tensor: shape=(167025,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167026>, <tf.Tensor: shape=(167026,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167027>, <tf.Tensor: shape=(167027,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167028>, <tf.Tensor: shape=(167028,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167029>, <tf.Tensor: shape=(167029,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167030>, <tf.Tensor: shape=(167030,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167031>, <tf.Tensor: shape=(167031,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167032>, <tf.Tensor: shape=(167032,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167033>, <tf.Tensor: shape=(167033,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167034>, <tf.Tensor: shape=(167034,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167035>, <tf.Tensor: shape=(167035,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167036>, <tf.Tensor: shape=(167036,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167037>, <tf.Tensor: shape=(167037,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167038>, <tf.Tensor: shape=(167038,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167039>, <tf.Tensor: shape=(167039,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167040>, <tf.Tensor: shape=(167040,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167041>, <tf.Tensor: shape=(167041,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167042>, <tf.Tensor: shape=(167042,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167043>, <tf.Tensor: shape=(167043,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167044>, <tf.Tensor: shape=(167044,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167045>, <tf.Tensor: shape=(167045,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167046>, <tf.Tensor: shape=(167046,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167047>, <tf.Tensor: shape=(167047,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167048>, <tf.Tensor: shape=(167048,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167049>, <tf.Tensor: shape=(167049,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167050>, <tf.Tensor: shape=(167050,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167051>, <tf.Tensor: shape=(167051,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167052>, <tf.Tensor: shape=(167052,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167053>, <tf.Tensor: shape=(167053,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167054>, <tf.Tensor: shape=(167054,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167055>, <tf.Tensor: shape=(167055,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167056>, <tf.Tensor: shape=(167056,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167057>, <tf.Tensor: shape=(167057,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167058>, <tf.Tensor: shape=(167058,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167059>, <tf.Tensor: shape=(167059,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167060>, <tf.Tensor: shape=(167060,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167061>, <tf.Tensor: shape=(167061,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167062>, <tf.Tensor: shape=(167062,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167063>, <tf.Tensor: shape=(167063,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167064>, <tf.Tensor: shape=(167064,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167065>, <tf.Tensor: shape=(167065,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167066>, <tf.Tensor: shape=(167066,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167067>, <tf.Tensor: shape=(167067,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167068>, <tf.Tensor: shape=(167068,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167069>, <tf.Tensor: shape=(167069,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167070>, <tf.Tensor: shape=(167070,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167071>, <tf.Tensor: shape=(167071,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167072>, <tf.Tensor: shape=(167072,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167073>, <tf.Tensor: shape=(167073,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167074>, <tf.Tensor: shape=(167074,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167075>, <tf.Tensor: shape=(167075,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167076>, <tf.Tensor: shape=(167076,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167077>, <tf.Tensor: shape=(167077,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167078>, <tf.Tensor: shape=(167078,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167079>, <tf.Tensor: shape=(167079,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167080>, <tf.Tensor: shape=(167080,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167081>, <tf.Tensor: shape=(167081,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167082>, <tf.Tensor: shape=(167082,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167083>, <tf.Tensor: shape=(167083,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167084>, <tf.Tensor: shape=(167084,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167085>, <tf.Tensor: shape=(167085,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167086>, <tf.Tensor: shape=(167086,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167087>, <tf.Tensor: shape=(167087,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167088>, <tf.Tensor: shape=(167088,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167089>, <tf.Tensor: shape=(167089,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167090>, <tf.Tensor: shape=(167090,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167091>, <tf.Tensor: shape=(167091,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167092>, <tf.Tensor: shape=(167092,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167093>, <tf.Tensor: shape=(167093,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167094>, <tf.Tensor: shape=(167094,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167095>, <tf.Tensor: shape=(167095,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167096>, <tf.Tensor: shape=(167096,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167097>, <tf.Tensor: shape=(167097,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167098>, <tf.Tensor: shape=(167098,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167099>, <tf.Tensor: shape=(167099,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167100>, <tf.Tensor: shape=(167100,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167101>, <tf.Tensor: shape=(167101,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167102>, <tf.Tensor: shape=(167102,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167103>, <tf.Tensor: shape=(167103,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167104>, <tf.Tensor: shape=(167104,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167105>, <tf.Tensor: shape=(167105,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167106>, <tf.Tensor: shape=(167106,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167107>, <tf.Tensor: shape=(167107,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167108>, <tf.Tensor: shape=(167108,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167109>, <tf.Tensor: shape=(167109,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167110>, <tf.Tensor: shape=(167110,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167111>, <tf.Tensor: shape=(167111,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167112>, <tf.Tensor: shape=(167112,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167113>, <tf.Tensor: shape=(167113,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167114>, <tf.Tensor: shape=(167114,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167115>, <tf.Tensor: shape=(167115,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167116>, <tf.Tensor: shape=(167116,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167117>, <tf.Tensor: shape=(167117,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167118>, <tf.Tensor: shape=(167118,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167119>, <tf.Tensor: shape=(167119,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167120>, <tf.Tensor: shape=(167120,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167121>, <tf.Tensor: shape=(167121,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167122>, <tf.Tensor: shape=(167122,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167123>, <tf.Tensor: shape=(167123,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167124>, <tf.Tensor: shape=(167124,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167125>, <tf.Tensor: shape=(167125,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167126>, <tf.Tensor: shape=(167126,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167127>, <tf.Tensor: shape=(167127,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167128>, <tf.Tensor: shape=(167128,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167129>, <tf.Tensor: shape=(167129,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167130>, <tf.Tensor: shape=(167130,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167131>, <tf.Tensor: shape=(167131,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167132>, <tf.Tensor: shape=(167132,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167133>, <tf.Tensor: shape=(167133,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167134>, <tf.Tensor: shape=(167134,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167135>, <tf.Tensor: shape=(167135,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167136>, <tf.Tensor: shape=(167136,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167137>, <tf.Tensor: shape=(167137,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167138>, <tf.Tensor: shape=(167138,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167139>, <tf.Tensor: shape=(167139,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167140>, <tf.Tensor: shape=(167140,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n","(<tf.Tensor: shape=(), dtype=int64, numpy=167141>, <tf.Tensor: shape=(167141,), dtype=int64, numpy=array([1, 1, 1, ..., 1, 1, 1])>)\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-a6a66634aa54>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    734\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    735\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# For Python 3 compatibility\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 736\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    738\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    770\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    771\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 772\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    773\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    774\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m             \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m             output_shapes=self._flat_output_shapes)\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   2605\u001b[0m         \u001b[0m_ctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_context_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"IteratorGetNext\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2606\u001b[0m         \u001b[0mtld\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mop_callbacks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"output_types\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2607\u001b[0;31m         \"output_shapes\", output_shapes)\n\u001b[0m\u001b[1;32m   2608\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2609\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"8m2hOchk5Ftn","executionInfo":{"status":"ok","timestamp":1603287327624,"user_tz":-540,"elapsed":1199,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"53cad178-b768-4588-aa05-9e83e4b677c9","colab":{"base_uri":"https://localhost:8080/","height":143}},"source":["def gen(stop):\n","  for i in itertools.count(1):\n","    if i < stop:\n","      yield ( i, [1] * i)\n","\n","dataset = tf.data.Dataset.from_generator(\n","    gen, args=[10],\n","    output_types=(tf.int64, tf.int64),\n","    output_shapes=(tf.TensorShape([]), tf.TensorShape([None]))\n",")\n","\n","list(dataset.take(7).as_numpy_iterator())"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(1, array([1])),\n"," (2, array([1, 1])),\n"," (3, array([1, 1, 1])),\n"," (4, array([1, 1, 1, 1])),\n"," (5, array([1, 1, 1, 1, 1])),\n"," (6, array([1, 1, 1, 1, 1, 1])),\n"," (7, array([1, 1, 1, 1, 1, 1, 1]))]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"OId0ZRhQRAEO"},"source":["### batch, repeat\n","- `batch()`: 배치 사이즈 크기\n","- `repeat()`: 반복 횟수"]},{"cell_type":"code","metadata":{"id":"3G45ceDBRAEO","executionInfo":{"status":"ok","timestamp":1603287327984,"user_tz":-540,"elapsed":1550,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["dataset = num_list_dataset.repeat(3).batch(7)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"iNPX7otIRAEQ","executionInfo":{"status":"ok","timestamp":1603287327984,"user_tz":-540,"elapsed":1543,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"d5bc5cac-094d-4764-d3cf-296268ba8051","colab":{"base_uri":"https://localhost:8080/","height":179}},"source":["for item in dataset:\n","  print(item)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["tf.Tensor([0 1 2 3 4 5 6], shape=(7,), dtype=int64)\n","tf.Tensor([ 7  8  9 10 11 12 13], shape=(7,), dtype=int64)\n","tf.Tensor([14 15 16 17 18 19  0], shape=(7,), dtype=int64)\n","tf.Tensor([1 2 3 4 5 6 7], shape=(7,), dtype=int64)\n","tf.Tensor([ 8  9 10 11 12 13 14], shape=(7,), dtype=int64)\n","tf.Tensor([15 16 17 18 19  0  1], shape=(7,), dtype=int64)\n","tf.Tensor([2 3 4 5 6 7 8], shape=(7,), dtype=int64)\n","tf.Tensor([ 9 10 11 12 13 14 15], shape=(7,), dtype=int64)\n","tf.Tensor([16 17 18 19], shape=(4,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wKX0-kOZRAER","executionInfo":{"status":"ok","timestamp":1603287327985,"user_tz":-540,"elapsed":1537,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["dataset = num_list_dataset.repeat(3).batch(7, drop_remainder=True)"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"P9-yZ7aBRAET","executionInfo":{"status":"ok","timestamp":1603287327985,"user_tz":-540,"elapsed":1529,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"a8dca7d8-23bd-433e-90c7-d23bb42d68ca","colab":{"base_uri":"https://localhost:8080/","height":161}},"source":["for item in dataset:\n","  print(item)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["tf.Tensor([0 1 2 3 4 5 6], shape=(7,), dtype=int64)\n","tf.Tensor([ 7  8  9 10 11 12 13], shape=(7,), dtype=int64)\n","tf.Tensor([14 15 16 17 18 19  0], shape=(7,), dtype=int64)\n","tf.Tensor([1 2 3 4 5 6 7], shape=(7,), dtype=int64)\n","tf.Tensor([ 8  9 10 11 12 13 14], shape=(7,), dtype=int64)\n","tf.Tensor([15 16 17 18 19  0  1], shape=(7,), dtype=int64)\n","tf.Tensor([2 3 4 5 6 7 8], shape=(7,), dtype=int64)\n","tf.Tensor([ 9 10 11 12 13 14 15], shape=(7,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dDFGtesERAEV"},"source":["### map, filter\n","- 전처리 단계에서 시행하여 원하지 않는 데이터를 거를 수 있음\n","\n","- `tf.Tensor` 자료형을 다룸"]},{"cell_type":"code","metadata":{"id":"bNlQKzd7RAEW","executionInfo":{"status":"ok","timestamp":1603287327986,"user_tz":-540,"elapsed":1523,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["from tensorflow.data import Dataset"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"5cxsCmeqRAEX","executionInfo":{"status":"ok","timestamp":1603287327986,"user_tz":-540,"elapsed":1515,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"c4cf82c9-bd01-4081-a87b-b164b3886a18","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["dataset = Dataset.range(1, 6)\n","dataset = dataset.map(lambda x: x*2)\n","list(dataset.as_numpy_iterator())"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 4, 6, 8, 10]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"JWWuy5lTRAEZ","executionInfo":{"status":"ok","timestamp":1603287327987,"user_tz":-540,"elapsed":1508,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"ad4da357-7419-46c1-9d8a-9f9a0be365df","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["dataset = Dataset.range(5)\n","\n","result = dataset.map(lambda x:x + 1)\n","\n","result"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<MapDataset shapes: (), types: tf.int64>"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"P3GRQXSERAEa","executionInfo":{"status":"ok","timestamp":1603287328309,"user_tz":-540,"elapsed":1822,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"17d56023-5061-4666-86cf-d4ced9a4a9c9","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["elements = [(1, 'one'), (2,'two'), (3,'three')]\n","dataset = Dataset.from_generator(lambda: elements, (tf.int32, tf.string))\n","\n","\n","result = dataset.map(lambda x_int, y_str: x_int)\n","\n","list(result.as_numpy_iterator())"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"PM71-6yFRAEc","executionInfo":{"status":"ok","timestamp":1603287328309,"user_tz":-540,"elapsed":1813,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"74ff435c-9e21-4682-f11e-1fca970d841c","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["dataset = Dataset.range(3)\n","\n","def g(x):\n","  return tf.constant(10.5), tf.constant([\"One\", \"Two\", \"Three\"])\n","\n","\n","result = dataset.map(g)\n","\n","result.element_spec"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorSpec(shape=(), dtype=tf.float32, name=None),\n"," TensorSpec(shape=(3,), dtype=tf.string, name=None))"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"9ZmbzEzeRAEe","executionInfo":{"status":"ok","timestamp":1603287328310,"user_tz":-540,"elapsed":1806,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"7a53d63a-b696-4a36-8e06-2ea4ada5522d","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["def h(x):\n","  return 10.5, [\"One\", \"Two\", \"Theee\"], np.array([1.0, 2.0], dtype=np.float64)\n","\n","\n","result = dataset.map(h)\n","\n","result.element_spec\n","\n"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorSpec(shape=(), dtype=tf.float32, name=None),\n"," TensorSpec(shape=(3,), dtype=tf.string, name=None),\n"," TensorSpec(shape=(2,), dtype=tf.float64, name=None))"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"NGwRqkIlRAEf","executionInfo":{"status":"ok","timestamp":1603287328310,"user_tz":-540,"elapsed":1796,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"457fac9a-e1fd-4611-a9e0-26652c82c18d","colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["def i(x):\n","  return (10.5, [12.5, 11.1]),  \"One\", \"Two\"\n","\n","result = dataset.map(i)\n","\n","result.element_spec"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((TensorSpec(shape=(), dtype=tf.float32, name=None),\n","  TensorSpec(shape=(2,), dtype=tf.float32, name=None)),\n"," TensorSpec(shape=(), dtype=tf.string, name=None),\n"," TensorSpec(shape=(), dtype=tf.string, name=None))"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"NxOjdO_ARAEh","executionInfo":{"status":"ok","timestamp":1603287328310,"user_tz":-540,"elapsed":1787,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"6de1165f-f91a-489b-b1be-53dab571023f","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["dataset = Dataset.from_tensor_slices([1,2,3,4,5])\n","dataset = dataset.filter(lambda x: x < 3)\n","list(dataset.as_numpy_iterator())"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"GdG6yRXcRAEj","executionInfo":{"status":"ok","timestamp":1603287328311,"user_tz":-540,"elapsed":1779,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"d5b24558-3fd5-4cbf-a3c8-9fb231e84ff3","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["def filter_fn(x):\n","  return tf.math.equal(x, 1)\n","\n","dataset = dataset.filter(filter_fn)\n","list(dataset.as_numpy_iterator())"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1]"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"gg_PSCexRAEl"},"source":["### shuffle, take"]},{"cell_type":"code","metadata":{"id":"KByv-9XwRAEl","executionInfo":{"status":"ok","timestamp":1603287386651,"user_tz":-540,"elapsed":60111,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"602045ca-233d-491d-da6f-2e10a9c78e20","colab":{"base_uri":"https://localhost:8080/","height":339,"referenced_widgets":["9a37597d400b469488b979d9ec0404bd","f2ca7bc1d32640f7b18faaaebba51e0b","510625d1abb1472e92ccf57007ed07c3","9dead917d0fa4903b1f544b808ba2fab","28473fe7f41f49afb8b4cd49d5ba4c47","8783cfa380f144a593452a2e8b6a1341","40bb1980052d48a7ab9a68184afb3b47","02557e0d5b4740eca1543a084f0a0c3b","b708a5dc4c6445db82a56ea900f50423","a10991d721934f7293e35dc5b15394c7","51cd001d27ea48ec8bacae1c7c55dd62","6004a6bcb8b946c2bf86f8453008e946","909ce4503c13464a97609fa0c3a4a24d","ba03da4141d3430b80d5d24d06fc8bab","2b2fba5b66b3472a9f7e79e280a633c9","f845b14a1c1240a7af30145f519ca129","fbb425db458545e28cca3c4b001bbc17","c140181ea17945769e0af94d56c2252e","5216de79018e41278f35346fd766cfa4","d07cf56c1d6148a181fdf11204914d65","356769f6415d4a319b4ce97661c46380","f31fc12db3e14e2e96212160d35492e5","267df4f239eb45a99dc68af94d803070","4f659601aa9e4c56a3f3a64daa9a1d8e","ddbc9287565f4849804bf59dd5013a3b","6f60005efbab46aa805573d29bf077ef","4cd773a000b64c11ad00c9ba2b47f399","71bf832b8e2c4ffda88d082f6c66c554","84638ba98e2447c3a68c3d985d663db1","067e8a9dde1349de9b0dbcfab478121b","1fcc05530d584cc5819270b494d50be5","957a10ba27244bc585ce25d3f7a80622","54d8830938a840d4a02496a3daf65a0b","c545726020c5435c94db34d59d4788a6","0f28f93eaa454d529de24b907fa8192f","41cf7d2484da40af9c64a9289cc23179","156ba126793b4531914b7a615e6e3d0a","a611bb31ebdb4ab6a77e7d396bca185e","8378acde87e94f93b8c5d5b8311beca2","5ca49a1681044b0081c5edef50e9503c","3e20334435b84b8ba64419c866dd429d","15d2660ee67b4a22981e1e3c7665ea33","19589d3b3b4446d09e51603da6446568","a46a562fedbb468fa31f1812f9143881","6067b04f64a7446a93d2c2d46d088d54","d2a438a3c1e44881a241db6198872bb5","c3de016212114eb4b38ce90b4ec5e4e8","97a0e370e5534ec48efb7684f0fd017e","8098be3e627e43f18cfb867ad3e35fb0","3128f6bbdbd547d8ae995e1cdcaa50b5","ef411a4e97b84a8597c48266266221c3","b275bd33f5ea4424aee743f67fafbdab","85eb4175e4b74c3bacc3912aa054d25d","5950c3c9bf354a9c8033723404589652","c9dc9f7278cd463086dd48161b62f6f9","8e3ce941883648a79b2740daf355161c","9ab9b397ac6645ce9328d727607f5497","996a6d38adce4d44a61b5578f2303f34","66ac00b2e8954905a16f585e109eb2f9","bfb3417972d74ee2a32010b2894c9006","3631a8408ef24fceb1fff993d4f6138b","fe55d98a7b7a4c838302aa7fe7351176","be03c5fbb68148939b60bc7d5d7c94a9","2a721af8262e488589fe3b48540d4f3c"]}},"source":["dataset, info = tfds.load('imdb_reviews', with_info=True, as_supervised=True)"],"execution_count":26,"outputs":[{"output_type":"stream","text":["\u001b[1mDownloading and preparing dataset imdb_reviews/plain_text/1.0.0 (download: 80.23 MiB, generated: Unknown size, total: 80.23 MiB) to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0...\u001b[0m\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9a37597d400b469488b979d9ec0404bd","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Completed...', max=1.0, style=Progre…"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b708a5dc4c6445db82a56ea900f50423","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', description='Dl Size...', max=1.0, style=ProgressSty…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"fbb425db458545e28cca3c4b001bbc17","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteRRT9IN/imdb_reviews-train.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ddbc9287565f4849804bf59dd5013a3b","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=25000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\r"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"54d8830938a840d4a02496a3daf65a0b","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteRRT9IN/imdb_reviews-test.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3e20334435b84b8ba64419c866dd429d","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=25000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\r"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8098be3e627e43f18cfb867ad3e35fb0","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\rShuffling and writing examples to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0.incompleteRRT9IN/imdb_reviews-unsupervised.tfrecord\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9ab9b397ac6645ce9328d727607f5497","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=50000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\u001b[1mDataset imdb_reviews downloaded and prepared to /root/tensorflow_datasets/imdb_reviews/plain_text/1.0.0. Subsequent calls will reuse this data.\u001b[0m\n","\r"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EKE7m2d1RAEp","executionInfo":{"status":"ok","timestamp":1603287386652,"user_tz":-540,"elapsed":60104,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"9537e41e-1434-46ee-dee0-5bd40a9301fd","colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["train_dataset = dataset['train']\n","train_dataset = train_dataset.batch(5).shuffle(5).take(2)\n","\n","for data in train_dataset:\n","  print(data)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["(<tf.Tensor: shape=(5,), dtype=string, numpy=\n","array([b\"This was an absolutely terrible movie. Don't be lured in by Christopher Walken or Michael Ironside. Both are great actors, but this must simply be their worst role in history. Even their great acting could not redeem this movie's ridiculous storyline. This movie is an early nineties US propaganda piece. The most pathetic scenes were those when the Columbian rebels were making their cases for revolutions. Maria Conchita Alonso appeared phony, and her pseudo-love affair with Walken was nothing but a pathetic emotional plug in a movie that was devoid of any real meaning. I am disappointed that there are movies like this, ruining actor's like Christopher Walken's good name. I could barely sit through it.\",\n","       b'I have been known to fall asleep during films, but this is usually due to a combination of things including, really tired, being warm and comfortable on the sette and having just eaten a lot. However on this occasion I fell asleep because the film was rubbish. The plot development was constant. Constantly slow and boring. Things seemed to happen, but with no explanation of what was causing them or why. I admit, I may have missed part of the film, but i watched the majority of it and everything just seemed to happen of its own accord without any real concern for anything else. I cant recommend this film at all.',\n","       b'Mann photographs the Alberta Rocky Mountains in a superb fashion, and Jimmy Stewart and Walter Brennan give enjoyable performances as they always seem to do. <br /><br />But come on Hollywood - a Mountie telling the people of Dawson City, Yukon to elect themselves a marshal (yes a marshal!) and to enforce the law themselves, then gunfighters battling it out on the streets for control of the town? <br /><br />Nothing even remotely resembling that happened on the Canadian side of the border during the Klondike gold rush. Mr. Mann and company appear to have mistaken Dawson City for Deadwood, the Canadian North for the American Wild West.<br /><br />Canadian viewers be prepared for a Reefer Madness type of enjoyable howl with this ludicrous plot, or, to shake your head in disgust.',\n","       b'This is the kind of film for a snowy Sunday afternoon when the rest of the world can go ahead with its own business as you descend into a big arm-chair and mellow for a couple of hours. Wonderful performances from Cher and Nicolas Cage (as always) gently row the plot along. There are no rapids to cross, no dangerous waters, just a warm and witty paddle through New York life at its best. A family film in every sense and one that deserves the praise it received.',\n","       b'As others have mentioned, all the women that go nude in this film are mostly absolutely gorgeous. The plot very ably shows the hypocrisy of the female libido. When men are around they want to be pursued, but when no \"men\" are around, they become the pursuers of a 14 year old boy. And the boy becomes a man really fast (we should all be so lucky at this age!). He then gets up the courage to pursue his true love.'],\n","      dtype=object)>, <tf.Tensor: shape=(5,), dtype=int64, numpy=array([0, 0, 0, 1, 1])>)\n","(<tf.Tensor: shape=(5,), dtype=string, numpy=\n","array([b\"This is a film which should be seen by anybody interested in, effected by, or suffering from an eating disorder. It is an amazingly accurate and sensitive portrayal of bulimia in a teenage girl, its causes and its symptoms. The girl is played by one of the most brilliant young actresses working in cinema today, Alison Lohman, who was later so spectacular in 'Where the Truth Lies'. I would recommend that this film be shown in all schools, as you will never see a better on this subject. Alison Lohman is absolutely outstanding, and one marvels at her ability to convey the anguish of a girl suffering from this compulsive disorder. If barometers tell us the air pressure, Alison Lohman tells us the emotional pressure with the same degree of accuracy. Her emotional range is so precise, each scene could be measured microscopically for its gradations of trauma, on a scale of rising hysteria and desperation which reaches unbearable intensity. Mare Winningham is the perfect choice to play her mother, and does so with immense sympathy and a range of emotions just as finely tuned as Lohman's. Together, they make a pair of sensitive emotional oscillators vibrating in resonance with one another. This film is really an astonishing achievement, and director Katt Shea should be proud of it. The only reason for not seeing it is if you are not interested in people. But even if you like nature films best, this is after all animal behaviour at the sharp edge. Bulimia is an extreme version of how a tormented soul can destroy her own body in a frenzy of despair. And if we don't sympathise with people suffering from the depths of despair, then we are dead inside.\",\n","       b'Okay, you have:<br /><br />Penelope Keith as Miss Herringbone-Tweed, B.B.E. (Backbone of England.) She\\'s killed off in the first scene - that\\'s right, folks; this show has no backbone!<br /><br />Peter O\\'Toole as Ol\\' Colonel Cricket from The First War and now the emblazered Lord of the Manor.<br /><br />Joanna Lumley as the ensweatered Lady of the Manor, 20 years younger than the colonel and 20 years past her own prime but still glamourous (Brit spelling, not mine) enough to have a toy-boy on the side. It\\'s alright, they have Col. Cricket\\'s full knowledge and consent (they guy even comes \\'round for Christmas!) Still, she\\'s considerate of the colonel enough to have said toy-boy her own age (what a gal!)<br /><br />David McCallum as said toy-boy, equally as pointlessly glamourous as his squeeze. Pilcher couldn\\'t come up with any cover for him within the story, so she gave him a hush-hush job at the Circus.<br /><br />and finally:<br /><br />Susan Hampshire as Miss Polonia Teacups, Venerable Headmistress of the Venerable Girls\\' Boarding-School, serving tea in her office with a dash of deep, poignant advice for life in the outside world just before graduation. Her best bit of advice: \"I\\'ve only been to Nancherrow (the local Stately Home of England) once. I thought it was very beautiful but, somehow, not part of the real world.\" Well, we can\\'t say they didn\\'t warn us.<br /><br />Ah, Susan - time was, your character would have been running the whole show. They don\\'t write \\'em like that any more. Our loss, not yours.<br /><br />So - with a cast and setting like this, you have the re-makings of \"Brideshead Revisited,\" right?<br /><br />Wrong! They took these 1-dimensional supporting roles because they paid so well. After all, acting is one of the oldest temp-jobs there is (YOU name another!)<br /><br />First warning sign: lots and lots of backlighting. They get around it by shooting outdoors - \"hey, it\\'s just the sunlight!\"<br /><br />Second warning sign: Leading Lady cries a lot. When not crying, her eyes are moist. That\\'s the law of romance novels: Leading Lady is \"dewy-eyed.\"<br /><br />Henceforth, Leading Lady shall be known as L.L.<br /><br />Third warning sign: L.L. actually has stars in her eyes when she\\'s in love. Still, I\\'ll give Emily Mortimer an award just for having to act with that spotlight in her eyes (I wonder . did they use contacts?)<br /><br />And lastly, fourth warning sign: no on-screen female character is \"Mrs.\" She\\'s either \"Miss\" or \"Lady.\"<br /><br />When all was said and done, I still couldn\\'t tell you who was pursuing whom and why. I couldn\\'t even tell you what was said and done.<br /><br />To sum up: they all live through World War II without anything happening to them at all.<br /><br />OK, at the end, L.L. finds she\\'s lost her parents to the Japanese prison camps and baby sis comes home catatonic. Meanwhile (there\\'s always a \"meanwhile,\") some young guy L.L. had a crush on (when, I don\\'t know) comes home from some wartime tough spot and is found living on the street by Lady of the Manor (must be some street if SHE\\'s going to find him there.) Both war casualties are whisked away to recover at Nancherrow (SOMEBODY has to be \"whisked away\" SOMEWHERE in these romance stories!)<br /><br />Great drama.',\n","       b'The film is based on a genuine 1950s novel.<br /><br />Journalist Colin McInnes wrote a set of three \"London novels\": \"Absolute Beginners\", \"City of Spades\" and \"Mr Love and Justice\". I have read all three. The first two are excellent. The last, perhaps an experiment that did not come off. But McInnes\\'s work is highly acclaimed; and rightly so. This musical is the novelist\\'s ultimate nightmare - to see the fruits of one\\'s mind being turned into a glitzy, badly-acted, soporific one-dimensional apology of a film that says it captures the spirit of 1950s London, and does nothing of the sort.<br /><br />Thank goodness Colin McInnes wasn\\'t alive to witness it.',\n","       b'I really love the sexy action and sci-fi films of the sixties and its because of the actress\\'s that appeared in them. They found the sexiest women to be in these films and it didn\\'t matter if they could act (Remember \"Candy\"?). The reason I was disappointed by this film was because it wasn\\'t nostalgic enough. The story here has a European sci-fi film called \"Dragonfly\" being made and the director is fired. So the producers decide to let a young aspiring filmmaker (Jeremy Davies) to complete the picture. They\\'re is one real beautiful woman in the film who plays Dragonfly but she\\'s barely in it. Film is written and directed by Roman Coppola who uses some of his fathers exploits from his early days and puts it into the script. I wish the film could have been an homage to those early films. They could have lots of cameos by actors who appeared in them. There is one actor in this film who was popular from the sixties and its John Phillip Law (Barbarella). Gerard Depardieu, Giancarlo Giannini and Dean Stockwell appear as well. I guess I\\'m going to have to continue waiting for a director to make a good homage to the films of the sixties. If any are reading this, \"Make it as sexy as you can\"! I\\'ll be waiting!',\n","       b'Sure, this one isn\\'t really a blockbuster, nor does it target such a position. \"Dieter\" is the first name of a quite popular German musician, who is either loved or hated for his kind of acting and thats exactly what this movie is about. It is based on the autobiography \"Dieter Bohlen\" wrote a few years ago but isn\\'t meant to be accurate on that. The movie is filled with some sexual offensive content (at least for American standard) which is either amusing (not for the other \"actors\" of course) or dumb - it depends on your individual kind of humor or on you being a \"Bohlen\"-Fan or not. Technically speaking there isn\\'t much to criticize. Speaking of me I find this movie to be an OK-movie.'],\n","      dtype=object)>, <tf.Tensor: shape=(5,), dtype=int64, numpy=array([1, 0, 0, 0, 0])>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"x2Jw8HO4RAEq"},"source":["### get_next()"]},{"cell_type":"code","metadata":{"id":"GKnI6audRAEr","executionInfo":{"status":"ok","timestamp":1603287386653,"user_tz":-540,"elapsed":60096,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"b475c7eb-fa88-4ffd-e981-493f69a78f50","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["dataset = Dataset.range(2)\n","for element in dataset:\n","  print(element)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kF6zy9YyRAEs","executionInfo":{"status":"ok","timestamp":1603287386653,"user_tz":-540,"elapsed":60088,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"7874360e-2651-4a86-818b-12b8339067b6","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["dataset = Dataset.range(2)\n","\n","iterator = iter(dataset)\n","\n","\n","print(dataset)\n","print(iterator.get_next())\n","print(iterator.get_next())"],"execution_count":29,"outputs":[{"output_type":"stream","text":["<RangeDataset shapes: (), types: tf.int64>\n","tf.Tensor(0, shape=(), dtype=int64)\n","tf.Tensor(1, shape=(), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XglnpZoWRAEu","executionInfo":{"status":"ok","timestamp":1603287386653,"user_tz":-540,"elapsed":60080,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"4057afd6-39b9-46e7-f049-d74c11430099","colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["a = np.random.randint(0, 10, size=(2,3))\n","\n","print(a)\n","\n","dataset = Dataset.from_tensor_slices(a)\n","\n","iterator = iter(dataset)\n","\n","print(iterator.get_next())\n","print(iterator.get_next())"],"execution_count":30,"outputs":[{"output_type":"stream","text":["[[8 7 6]\n"," [5 7 3]]\n","tf.Tensor([8 7 6], shape=(3,), dtype=int64)\n","tf.Tensor([5 7 3], shape=(3,), dtype=int64)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ac6_eu84RAEv"},"source":["## tf.dataset을 이용한 Fashion-MNIST 분류"]},{"cell_type":"markdown","metadata":{"id":"7f5PEhEURAEv"},"source":["### modules import"]},{"cell_type":"code","metadata":{"id":"MOZFvOm1RAEw","executionInfo":{"status":"ok","timestamp":1603287386654,"user_tz":-540,"elapsed":60074,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["import matplotlib.pyplot as plt\n","plt.style.use(['seaborn-white'])\n","\n","import tensorflow as tf\n","from tensorflow.keras.layers import Dense, Input, Flatten, Dropout, Activation, BatchNormalization\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.datasets.fashion_mnist import load_data"],"execution_count":31,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NveXA-ChRAEx"},"source":["### 데이터 로드"]},{"cell_type":"code","metadata":{"id":"_D7cwc4mRAEx","executionInfo":{"status":"ok","timestamp":1603287387297,"user_tz":-540,"elapsed":60710,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"54b70d7f-75c5-4c43-ee9a-b8b0cf46e048","colab":{"base_uri":"https://localhost:8080/","height":161}},"source":["(x_train, y_train), (x_test, y_test) = load_data()"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","32768/29515 [=================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","26427392/26421880 [==============================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","8192/5148 [===============================================] - 0s 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","4423680/4422102 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OvXiOGE5RAEz","executionInfo":{"status":"ok","timestamp":1603287387297,"user_tz":-540,"elapsed":60696,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"455f5994-5b06-456c-b5ca-9aa6381ecbff","colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["print(x_train.shape)\n","print(y_train.shape)\n","print(x_test.shape)\n","print(y_test.shape)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["(60000, 28, 28)\n","(60000,)\n","(10000, 28, 28)\n","(10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OO1AaI6zRAE1"},"source":["### 데이터 전처리"]},{"cell_type":"code","metadata":{"id":"3XuYdA3qRAE1","executionInfo":{"status":"ok","timestamp":1603287387625,"user_tz":-540,"elapsed":60993,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["x_train = x_train / 255.\n","x_test = x_test / 255."],"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uSnIZwgmRAE3"},"source":["### tf.data 이용"]},{"cell_type":"code","metadata":{"id":"rgFrpOsiRAE4","executionInfo":{"status":"ok","timestamp":1603287387625,"user_tz":-540,"elapsed":60984,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["train_ds = Dataset.from_tensor_slices((x_train, y_train))\n","train_ds = train_ds.shuffle(1000)\n","train_ds = train_ds.batch(32)\n","\n","test_ds = Dataset.from_tensor_slices((x_test, y_test))\n","test_ds = test_ds.batch(32)"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"MJmY592TRAE5","executionInfo":{"status":"ok","timestamp":1603287387626,"user_tz":-540,"elapsed":60974,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n","               'Sandal',' Shirt','Sneaker', 'Bag',' Ankle boot']"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qc0qpdEZRAE6"},"source":["### 데이터 확인"]},{"cell_type":"code","metadata":{"id":"Ax4iONZGRAE7","executionInfo":{"status":"ok","timestamp":1603287389112,"user_tz":-540,"elapsed":62452,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"8b60b136-5262-40d3-ea41-db7610a4ed68","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for image, label in train_ds.take(5):\n","\n","  plt.title(\"{}\".format(class_names[label[0]]))\n","  plt.imshow(image[0, :, :], cmap='gray')\n","  plt.show()"],"execution_count":37,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPYAAAEECAYAAAAbP8luAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAVqklEQVR4nO3de0zV9f8H8OeBIyqBKVeDL3jFS6lrpSY4BJQybE7FGoHCWv2hNpxo5BzzUrHJxcsWWUOZupQuFHPTlgYTlMwQlaYO28LbTA25hSAXBQ78/micXyaf9xvO4cM5vHk+/uO8+hxe58TTz+d83uf9fhs6Ozs7QURKcbB1A0TU9xhsIgUx2EQKYrCJFMRgEymIwSZSkNHWDZD+Jk+eDH9/fzg6OqKzsxN+fn7Ytm0b/Pz8bN0a6cTAcWz1TZ48GUVFRRg9ejQAYNeuXbh27RoyMzNt3BnphWfsQWjOnDkoLCw0//z999/jwIEDMJlM8PT0RHp6Onx9ffH48WNs3LgRv/32GwICAvD888+jpqYGqampNuyeeoKfsQeZ1tZWHDt2DPPnzwcA1NbW4pNPPsHBgweRn58Pf39/fPHFFwD+CXxVVRVOnTqF5ORkHDlyxJatUy/wjD1IxMbGwtHREbW1tfD09MTnn38OAHB3d0dpaSmcnJwAADNnzsTRo0cBABcvXsTChQthNBrh6+uLkJAQ8JPbwMBgDxKHDx82f8a+cOECYmNjceTIEbi7uyMjIwOFhYUwmUxoamrCuHHjAAANDQ0YOXKk+Tm8vb1x//59m/RPvcNgD0KzZs2Cj48PSktL0d7ejsLCQmRnZ8PNzQ3fffcdfvjhBwCAi4sLmpqazMdVV1fbqmXqJX7GHoRu3bqFW7duYfz48aitrYWvry/c3NxQV1eHEydOmMM8ffp05Ofno6OjAxUVFfj5559t3Dn1FM/Yg0TXZ2wAcHJywscff4zJkyfD3d0dP/74I1599VX4+fkhISEBa9asQWpqKuLj43HhwgWEh4dj0qRJeOONN1BfX2/jV0I9wXFsEurs7ITBYAAApKWlwWQyISkpycZdkQwvxUlTQUEBli9fjtbWVjQ1NaGoqAgvvviirduiHuClOGkKDQ1FUVERIiIi4ODggNDQULz++uu2bot6gJfiRAripTiRgnS5FH/06BHKysrg6elpvhNLRH3HZDKhuroa06ZNw7Bhw56qWxzs7du34/LlyzAYDEhKSsKMGTPMtbKyMqxYscLSpyaiHvrqq68wc+bMpx63KNjnz5/H7du3kZOTgxs3biApKQk5OTnmuqenJwDgzz//RHt7u4Utq6lr6EiLNbc8AgMDhfXg4GCrfveQIUOE9ZKSEs1aQUGB8FgZBwfxp8aOjg6rnn+gMRqN8Pf3N2ftqbolT1pcXIzw8HAAwIQJE1BfX4/Gxka4uLgAgPnyu729ncH+Dz2DbTSK/3e6urpa9btlwRbVrf07YLC7p/VR16KbZzU1NRg1apT5Zzc3N36PmMiO9MldcY6YEdkXi4Lt5eWFmpoa889VVVWa1/pE1P8sCvbcuXORl5cHALh69Sq8vLzMn6+JyPYsunn20ksv4YUXXsDbb78Ng8GAbdu29XVfyrL2Y8v27ds1awEBAcJjV69eLazX1tYK67J/vA8dOqRZW7x4sfDYVatWCeuym2Oim5KD8aOixePYiYmJfdkHEfUhfqWUSEEMNpGCGGwiBTHYRApisIkUxGATKYhLI/Ux2fxzk8kkrH/wwQfC+oQJEzRrb731lvBYazU2NgrrkZGRmrVvvvlGeOyOHTuE9Q8//FBY5zj2k3jGJlIQg02kIAabSEEMNpGCGGwiBTHYRAricFcvydbekg1njRkzRlhfvny5sB4UFCSsi1i73po1645FR0cLj83MzBTW/70KbneuXLmiWZOtBafiunw8YxMpiMEmUhCDTaQgBptIQQw2kYIYbCIFMdhECuI4di9ZOwVw7969wrpsiWAR2d5abW1tFj83IF8CuLvtXLs8evRIeKxsWufKlSuF9Y0bN2rWZN8t0HM/NVvhGZtIQQw2kYIYbCIFMdhECmKwiRTEYBMpiMEmUhDHsbshmr8rm7sbEhIirDc0NAjronnFgHh5Y9k4td7jtY8fP7b42KKiImF9yZIlwnpYWJhm7dSpUxb1NJBZFOySkhKsW7fOvB/zpEmTsGXLlj5tjIgsZ/EZe/bs2cjIyOjLXoioj/AzNpGCLA729evXsXr1akRHR+Ps2bN92RMRWcmiS/GxY8ciPj4eERERuHPnDuLi4pCfnw8nJ6e+7o+ILGDRGdvb2xuLFi2CwWCAv78/PDw8UFlZ2de9EZGFLAr2sWPHsH//fgBAdXU1amtr4e3t3aeNEZHlLLoUnz9/PhITE1FQUIC2tjZ89NFHSl2GW7POdFRUlLAeHx9v8XMD1o016z2vWPT81q7tnZ+fL6y/+eabmjWOY/eQi4uLdIF3IrIdDncRKYjBJlIQg02kIAabSEEMNpGCOG2zl3bv3i2sy5YArqqqsur3y5YAtleyJYBlfvrpJ2F9zZo1mrWJEycKj71+/bpFPdkznrGJFMRgEymIwSZSEINNpCAGm0hBDDaRghhsIgVxHLuX3NzchPWjR4/2UycDi95TRn///XfNmp+fn/BYjmMT0YDAYBMpiMEmUhCDTaQgBptIQQw2kYIYbCIFcRy7l2RbxZ44caKfOqF/c3Fx0ayNGDGiHzuxDzxjEymIwSZSEINNpCAGm0hBDDaRghhsIgUx2EQK4jh2N+bMmaNZmzJlivDY6OhoYf3gwYMW9dQfDAaDsC6bU+3goH2ekD23bN1xHx8fYf3ll1/WrN28eVN4rIp6dMYuLy9HeHg4srOzAQAVFRWIjY1FTEwM1q1bh9bWVl2bJKLekQa7ubkZycnJCAwMND+WkZGBmJgYfP311xgzZgxyc3N1bZKIekcabCcnJ2RlZcHLy8v8WElJCRYsWAAACAsLQ3FxsX4dElGvST9jG41GGI1P/mctLS1wcnICALi7u6O6ulqf7ojIIlbfFdd7kToi6j2Lgu3s7IxHjx4BACorK5+4TCci27Mo2EFBQcjLywMA5OfnIzg4uE+bIiLrGDol19JlZWVIS0vDvXv3YDQa4e3tjZ07d2LTpk14/PgxfHx8kJKS8sS+0Hfv3sWCBQtw8+ZNtLe36/4i+tq3336rWfP19RUe23XvQcsrr7xiUU+D3ZUrV4R10X0e2Rz6RYsWWdSTLRmNRowfPx4FBQX43//+93Rd9gTTpk3D4cOHn3rcnr9oQTTY8SulRApisIkUxGATKYjBJlIQg02kIE7b7EZISIhm7dKlS8JjPTw8hPWCggJhves7+APRmDFjNGuRkZHCY999911hvampSVivqanRrI0fP154bHfDRf929+5dYd0e8YxNpCAGm0hBDDaRghhsIgUx2EQKYrCJFMRgEymI49jdaGxs1KyJtmsF5OPcsuWL//jjD2H939Nj/0s23lpXVyesy1bDGT16tLA+cuRIzZps6qRseS1Zb6LXLhunVnFpL56xiRTEYBMpiMEmUhCDTaQgBptIQQw2kYIYbCIFDcpx7JkzZwrrovFe2Xauf/31l7B+8eJFYd3f319Yf+aZZzRrsq1q3dzchPWuTSC03L9/X1hva2uz+LkrKiqE9fr6emF9xIgRmjXZ+xIaGiqsd62hP5DwjE2kIAabSEEMNpGCGGwiBTHYRApisIkUxGATKWhQjmPHxcUJ67W1tZq1jo4O4bFTp04V1mXjsTdv3hTWW1tbNWvOzs7CY2Vb/MrqMnfu3NGsyV6X7HePGzdOWLdmnvqKFSuEdWXHscvLyxEeHo7s7GwAwKZNm7B48WLExsYiNjYWp0+f1rNHIuol6Rm7ubkZycnJCAwMfOLxDRs2ICwsTLfGiMhy0jO2k5MTsrKy4OXl1R/9EFEfkAbbaDRi2LBhTz2enZ2NuLg4rF+/Hn///bcuzRGRZSy6K75kyRIkJibi0KFDmDp1Kvbs2dPXfRGRFSwKdmBgoPnu7/z581FeXt6nTRGRdSwK9tq1a81DGyUlJQgICOjTpojIOtK74mVlZUhLS8O9e/dgNBqRl5eHlStXIiEhAcOHD4ezszNSUlL6o9c+I1tnWjRWLRrjBgAHB/G/lbKbkEOHDrW4/uDBA+GxojFwQN778OHDhXWjUfvPSbaeuux1y+ZzNzc3a9ZEc7UBwNXVVVgfiKTBnjZtGg4fPvzU4wsXLtSlISKyHr9SSqQgBptIQQw2kYIYbCIFMdhEChqU0zY9PDyEddGQ1rPPPis8Vvb1WtH0QkA+pNTU1KRZEw03AeKliwH5Vrei5YVlv9/R0VF4rGw4q6GhQVgXvTbZey6rD0Q8YxMpiMEmUhCDTaQgBptIQQw2kYIYbCIFMdhEChqU49gmk0lYl01fFJFt2SoahwbE0w8B+RREEdnrlo01y15bVVWVZk32no4cOVJYl71vovdF9rpaWlqE9YGIZ2wiBTHYRApisIkUxGATKYjBJlIQg02kIAabSEGDchxbNqYqmlcsmxcsG+uVjSW7ubkJ66I5091txdQb1izxC4jnqsvmcsu22XVxcRHWRdrb24V1a763YK/Ue0VExGATqYjBJlIQg02kIAabSEEMNpGCGGwiBfVoHDs9PR2lpaVob2/HqlWrMH36dGzcuBEmkwmenp7YsWMHnJyc9O61z8jW/vb19dWsVVRUCI+VvQ/WblUrGieXjUPL6rJ1xWVzwUW919XVCY8dPXq0sC7rXUS2nvqvv/5q8XPbK2mwz507h2vXriEnJwd1dXVYtmwZAgMDERMTg4iICOzevRu5ubmIiYnpj36JqAekl+KzZs3Cp59+CuCff7FbWlpQUlKCBQsWAADCwsJQXFysb5dE1CvSYDs6OsLZ2RkAkJubi3nz5qGlpcV8yenu7o7q6mp9uySiXunxzbOTJ08iNzcXW7dufeLxzs7OPm+KiKzTo2CfOXMGmZmZyMrKgqurK5ydnc03MyorK+Hl5aVrk0TUO9JgP3z4EOnp6di7d695JcmgoCDk5eUBAPLz8xEcHKxvl0TUK9K74sePH0ddXR0SEhLMj6WmpmLz5s3IycmBj48Pli5dqmuTfW3fvn3C+q5duzRrsmmXsuEuWb2xsVFYHzp0qGZNth3sgwcPhHXZUJzstdfU1Fj83F33cbSIXjcAtLa2atYePnwoPHbLli3C+kAkDXZUVBSioqKeevzgwYO6NERE1uM3z4gUxGATKYjBJlIQg02kIAabSEEMNpGCBuXyw6IxT0A8/VC2xK9sHNra8VzR88umfIqmowLyZXpl0zpF0yM7OjqEx8r+n8jqfn5+mrVr164Jj1URz9hECmKwiRTEYBMpiMEmUhCDTaQgBptIQQw2kYIG5Tj22bNnhfWuBSW6I9vOtb6+3qKeusjGyUXj4LJ5xzKysWZZb6JlsmTvizXzrQHx8sQeHh7CY1XEMzaRghhsIgUx2EQKYrCJFMRgEymIwSZSEINNpKBBOY4t25J18eLFmrUvv/xSeGxTU5OwLhsLlm3xK1o7XDYfu6qqSliXjdHLxrkbGhosfm7R9sCAfC640aj9p3z69GnhsSriGZtIQQw2kYIYbCIFMdhECmKwiRTEYBMpiMEmUlCPxrHT09NRWlqK9vZ2rFq1CoWFhbh69ap53vJ7772H0NBQPfvsV7/88otmzc3NTXisaDwVAO7fvy+sy/bPFo3nyuYd+/v7C+u1tbXCumicGhDPqXZ0dBQeKxunlo2DP/fcc5o12X7oKpIG+9y5c7h27RpycnJQV1eHZcuWYc6cOdiwYQPCwsL6o0ci6iVpsGfNmoUZM2YAAEaMGIGWlhaYTCbdGyMiy0k/Yzs6Opq3ncnNzcW8efPg6OiI7OxsxMXFYf369dKvQRJR/+rxd8VPnjyJ3NxcHDhwAGVlZRg5ciSmTp2Kffv2Yc+ePdi6dauefRJRL/TorviZM2eQmZmJrKwsuLq6IjAwEFOnTgUAzJ8/H+Xl5bo2SUS9Iw32w4cPkZ6ejr1795rvgq9duxZ37twBAJSUlCAgIEDfLomoV6SX4sePH0ddXR0SEhLMj0VGRiIhIQHDhw+Hs7MzUlJSdG3SnmRnZwvr8fHxwvqlS5eEddkyu6L7GQ8ePLDquWV1d3d3YV00ZCUb5ps4caKwPnr0aGF96dKlwvpgIw12VFQUoqKinnp82bJlujRERNbjN8+IFMRgEymIwSZSEINNpCAGm0hBDDaRggbl8sPWWLt2rbCemZkprM+ePVtYl00LHTt2rGZNtP0vIF8+WDY1srq6WlgXTeuUTQmtrKwU1mXLPl+/fl1YF5EtfSzaHthe8YxNpCAGm0hBDDaRghhsIgUx2EQKYrCJFKTLcFfXmmiyFTtVJBsake302dzcLKzLVgoVkQ13tbW1CeuNjY0W12XHWvu3Ys3xA3G4q+v1aq0/qEvyusY7Zcvdqqi9vV1YLy0t7adO1OLgIL64HD9+fD91Yl+qq6sxZsyYpx43dOrwz9GjR49QVlYGT09P6XrSRNR7JpMJ1dXVmDZtWrd7rusSbCKyLd48I1KQ7ne3tm/fjsuXL8NgMCApKcm8+YCtlZSUYN26deaFGCdNmoQtW7bYuCugvLwc77//Pt555x2sXLkSFRUV2LhxI0wmEzw9PbFjxw7pNkD90demTZvsZpun/25BNX36dLt4z7rrrb+2x9I12OfPn8ft27eRk5ODGzduICkpCTk5OXr+yl6ZPXs2MjIybN2GWXNzM5KTkxEYGGh+LCMjAzExMYiIiMDu3buRm5uLmJgYm/cFwC62eepuC6rAwECbv2davfXX9li6XooXFxcjPDwcADBhwgTU19dLhz0GMycnJ2RlZcHLy8v8WElJCRYsWAAACAsLQ3FxsV30ZS9mzZqFTz/9FMD/b0FlD++ZVm/9tT2WrsGuqanBqFGjzD+7ublJp/71p+vXr2P16tWIjo7G2bNnbd0OjEbjU3c4W1pazJeR7u7uNnn/uusLgF1s89TdFlT28J5p9dZf22P16zdI7OkG/NixYxEfH4+IiAjcuXMHcXFxyM/Pt9lnsZ6wp/dvyZIldrXN07+3oHrttdfMj9vDe2aL7bF0PWN7eXmhpqbG/HNVVRU8PT31/JU95u3tjUWLFsFgMMDf3x8eHh7Syf624OzsbP62WmVlpd1cDtvTNk//3YLKnt4zW22PpWuw586di7y8PADA1atX4eXlJV2lo78cO3YM+/fvB/DPt3dqa2vh7e1t466eFhQUZH4P8/PzERwcbOOO/mEv2zx1twWVvbxnttweS/cvqOzcuRMXL16EwWDAtm3bMGXKFD1/XY81NjYiMTERDQ0NaGtrQ3x8PEJCQmzaU1lZGdLS0nDv3j0YjUZ4e3tj586d2LRpEx4/fgwfHx+kpKRgyJAhNu9r5cqV2Ldv3xPbPMm2ANJDTk4OPvvsM4wbN878WGpqKjZv3mzT90yrt8jISGRnZ+v+vvGbZ0QK4jfPiBTEYBMpiMEmUhCDTaQgBptIQQw2kYIYbCIFMdhECvo/AzcY07KwwE0AAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"XCH9uAPERAE8"},"source":["### 모델 생성\n","- 임의의 모델"]},{"cell_type":"code","metadata":{"id":"oCBOhqjVRAE8","executionInfo":{"status":"ok","timestamp":1603287389114,"user_tz":-540,"elapsed":62434,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["def build_model():\n","  input = Input(shape=(28, 28), name='input')\n","  flatten = Flatten(input_shape=[28, 28], name='flatten')(input)\n","  hidden1 = Dense(256, kernel_initializer='he_normal', name='hidden1')(flatten)\n","  hidden1 = BatchNormalization()(hidden1)\n","  hidden1 = Activation('relu')(hidden1)\n","  dropout1 = Dropout(0.5)(hidden1)\n","\n","  hidden2 = Dense(100, kernel_initializer='he_normal', name='hidden2')(dropout1)\n","  hidden2 = BatchNormalization()(hidden2)\n","  hidden2 = Activation('relu')(hidden2)\n","  dropout2 = Dropout(0.5)(hidden2)\n","\n","  hidden3 = Dense(100, kernel_initializer='he_normal', name='hidden3')(dropout2)\n","  hidden3 = BatchNormalization()(hidden3)\n","  hidden3 = Activation('relu')(hidden3)\n","  dropout3 = Dropout(0.5)(hidden3)\n","\n","  hidden4 = Dense(50, kernel_initializer='he_normal', name='hidden4')(dropout3)\n","  hidden4 = BatchNormalization()(hidden4)\n","  hidden4 = Activation('relu')(hidden4)\n","  dropout4 = Dropout(0.5)(hidden4)\n","\n","  output = Dense(10, activation='softmax', name='output')(dropout4)\n","\n","  model = Model(inputs=[input], outputs=output)\n","\n","  return model\n","\n"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"OWk8IElPRAE-","executionInfo":{"status":"ok","timestamp":1603287389114,"user_tz":-540,"elapsed":62423,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["model = build_model()"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"6z8W_FvQRAFA","executionInfo":{"status":"ok","timestamp":1603287389115,"user_tz":-540,"elapsed":62415,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"201c4410-dfc2-410f-bc8f-e4d919f7d1ae","colab":{"base_uri":"https://localhost:8080/","height":845}},"source":["model.summary()"],"execution_count":40,"outputs":[{"output_type":"stream","text":["Model: \"functional_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           [(None, 28, 28)]          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 784)               0         \n","_________________________________________________________________\n","hidden1 (Dense)              (None, 256)               200960    \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 256)               1024      \n","_________________________________________________________________\n","activation (Activation)      (None, 256)               0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 256)               0         \n","_________________________________________________________________\n","hidden2 (Dense)              (None, 100)               25700     \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 100)               400       \n","_________________________________________________________________\n","activation_1 (Activation)    (None, 100)               0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","hidden3 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 100)               400       \n","_________________________________________________________________\n","activation_2 (Activation)    (None, 100)               0         \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","hidden4 (Dense)              (None, 50)                5050      \n","_________________________________________________________________\n","batch_normalization_3 (Batch (None, 50)                200       \n","_________________________________________________________________\n","activation_3 (Activation)    (None, 50)                0         \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","output (Dense)               (None, 10)                510       \n","=================================================================\n","Total params: 244,344\n","Trainable params: 243,332\n","Non-trainable params: 1,012\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"joOtrZSXRAFC"},"source":["### 모델 컴파일\n","- 평가(metrics)방식의 다른 방법\n","  - `tf.keras.metrics.Mean`\n","  - `tf.keras.metrics.SparseCategoricalAccuracy`\n","\n","- 위 두 방식을 사용하여 loss값을 좀 더 smooth하게 만들기(평균을 내는 방식)"]},{"cell_type":"code","metadata":{"id":"n2ie1NV3RAFC","executionInfo":{"status":"ok","timestamp":1603287389115,"user_tz":-540,"elapsed":62405,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["loss_object = tf.keras.losses.SparseCategoricalCrossentropy()\n","optimizer = tf.keras.optimizers.Adam()"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"LexAsbIERAFD","executionInfo":{"status":"ok","timestamp":1603287389115,"user_tz":-540,"elapsed":62391,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["train_loss =tf.keras.metrics.Mean(name = 'train_loss')\n","train_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n","\n","test_loss =tf.keras.metrics.Mean(name = 'test_loss')\n","test_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nl-59T7HRAFF"},"source":["### 모델 학습"]},{"cell_type":"markdown","metadata":{"id":"Rh56tw1kRAFF"},"source":["@tf.function 으로 인해 학습이 시작되면 그래프를 생성하여 속도가 빠름\n"]},{"cell_type":"code","metadata":{"id":"lihpD4nTRAFF","executionInfo":{"status":"ok","timestamp":1603287896758,"user_tz":-540,"elapsed":738,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["@tf.function\n","def train_step(images, labels):\n","  with tf.GradientTape() as tape:\n","    predictions = model(images)\n","    loss = loss_object(labels, predictions)\n","\n","  gradients = tape.gradient(loss, model.trainable_variables)\n","  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n","\n","\n","  train_loss(loss)\n","  train_accuracy(labels, predictions)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"Klbn2qJ7RAFH","executionInfo":{"status":"ok","timestamp":1603288016609,"user_tz":-540,"elapsed":681,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["@tf.function\n","def test_step(images, labels):\n","  predictions = model(images)\n","  t_loss = loss_object(labels, predictions)\n","\n","  test_loss(t_loss)\n","  test_accuracy(labels, predictions)"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"6adHWG-yRAFJ","executionInfo":{"status":"ok","timestamp":1603288139979,"user_tz":-540,"elapsed":122935,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"4823fc02-2207-4207-8635-2c77fb8cedf8","colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["epochs = 20\n","\n","for epoch in range(epochs):\n","  for images, labels in train_ds:\n","    train_step(images, labels)\n","\n","  \n","  for test_images, test_labels in test_ds:\n","    test_step(test_images, test_labels)\n","\n","  \n","  template = \"Epochs: {:3d}\\tLoss: {:.4f}\\tAccuracy: {:.4f}\\tTest Loss: {:.4f}\\tTest Accuracy: {:.4f}\\t\"\n","  print(template.format(epoch+1,\n","                        train_loss.result(),\n","                        train_accuracy.result()*100,\n","                        test_loss.result(),\n","                        test_accuracy.result()*100))"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Epochs:   1\tLoss: 0.3663\tAccuracy: 86.4940\tTest Loss: 0.3610\tTest Accuracy: 87.6600\t\n","Epochs:   2\tLoss: 0.3516\tAccuracy: 87.0214\tTest Loss: 0.3543\tTest Accuracy: 87.9150\t\n","Epochs:   3\tLoss: 0.3393\tAccuracy: 87.4507\tTest Loss: 0.3513\tTest Accuracy: 87.8933\t\n","Epochs:   4\tLoss: 0.3288\tAccuracy: 87.8076\tTest Loss: 0.3543\tTest Accuracy: 87.7600\t\n","Epochs:   5\tLoss: 0.3195\tAccuracy: 88.1234\tTest Loss: 0.3529\tTest Accuracy: 87.8920\t\n","Epochs:   6\tLoss: 0.3112\tAccuracy: 88.4120\tTest Loss: 0.3516\tTest Accuracy: 87.9633\t\n","Epochs:   7\tLoss: 0.3038\tAccuracy: 88.6791\tTest Loss: 0.3490\tTest Accuracy: 88.0543\t\n","Epochs:   8\tLoss: 0.2970\tAccuracy: 88.9226\tTest Loss: 0.3474\tTest Accuracy: 88.1087\t\n","Epochs:   9\tLoss: 0.2907\tAccuracy: 89.1400\tTest Loss: 0.3469\tTest Accuracy: 88.1533\t\n","Epochs:  10\tLoss: 0.2848\tAccuracy: 89.3463\tTest Loss: 0.3469\tTest Accuracy: 88.2270\t\n","Epochs:  11\tLoss: 0.2791\tAccuracy: 89.5492\tTest Loss: 0.3459\tTest Accuracy: 88.3018\t\n","Epochs:  12\tLoss: 0.2739\tAccuracy: 89.7343\tTest Loss: 0.3467\tTest Accuracy: 88.3267\t\n","Epochs:  13\tLoss: 0.2690\tAccuracy: 89.9078\tTest Loss: 0.3461\tTest Accuracy: 88.3677\t\n","Epochs:  14\tLoss: 0.2644\tAccuracy: 90.0724\tTest Loss: 0.3472\tTest Accuracy: 88.3979\t\n","Epochs:  15\tLoss: 0.2600\tAccuracy: 90.2287\tTest Loss: 0.3472\tTest Accuracy: 88.4367\t\n","Epochs:  16\tLoss: 0.2557\tAccuracy: 90.3900\tTest Loss: 0.3496\tTest Accuracy: 88.4600\t\n","Epochs:  17\tLoss: 0.2516\tAccuracy: 90.5357\tTest Loss: 0.3503\tTest Accuracy: 88.4953\t\n","Epochs:  18\tLoss: 0.2477\tAccuracy: 90.6771\tTest Loss: 0.3513\tTest Accuracy: 88.5011\t\n","Epochs:  19\tLoss: 0.2439\tAccuracy: 90.8136\tTest Loss: 0.3527\tTest Accuracy: 88.5184\t\n","Epochs:  20\tLoss: 0.2404\tAccuracy: 90.9399\tTest Loss: 0.3538\tTest Accuracy: 88.5175\t\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TDsrcsvPRAFL"},"source":["### 모델 학습 : 2번째 방법 (Keras)"]},{"cell_type":"code","metadata":{"id":"P1xeCewCRAFL","executionInfo":{"status":"ok","timestamp":1603288141288,"user_tz":-540,"elapsed":1293,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["from sklearn.model_selection import train_test_split"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"id":"ipEYsJvYRAFM","executionInfo":{"status":"ok","timestamp":1603288142210,"user_tz":-540,"elapsed":2205,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"39b6ffe7-372e-47f2-e376-3ffdbcb3e8d6","colab":{"base_uri":"https://localhost:8080/","height":953}},"source":["(x_train_full, y_train_full), (x_test, y_test) = load_data()\n","\n","x_train, x_val, y_train, y_val = train_test_split(x_train_full, y_train_full,\n","                                                  test_size = 0.3,\n","                                                  random_state=777)\n","\n","x_train = x_train / 255.\n","x_val = x_val / 255.\n","x_test = x_test / 255.\n","\n","\n","print(x_train.shape)\n","print(y_train.shape)\n","print(x_val.shape)\n","print(y_val.shape)\n","print(x_test.shape)\n","print(y_test.shape)\n","\n","model = build_model()\n","\n","model.compile(optimizer = 'sgd',\n","              loss= 'sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","\n","model.summary()"],"execution_count":54,"outputs":[{"output_type":"stream","text":["(42000, 28, 28)\n","(42000,)\n","(18000, 28, 28)\n","(18000,)\n","(10000, 28, 28)\n","(10000,)\n","Model: \"functional_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           [(None, 28, 28)]          0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 784)               0         \n","_________________________________________________________________\n","hidden1 (Dense)              (None, 256)               200960    \n","_________________________________________________________________\n","batch_normalization_4 (Batch (None, 256)               1024      \n","_________________________________________________________________\n","activation_4 (Activation)    (None, 256)               0         \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 256)               0         \n","_________________________________________________________________\n","hidden2 (Dense)              (None, 100)               25700     \n","_________________________________________________________________\n","batch_normalization_5 (Batch (None, 100)               400       \n","_________________________________________________________________\n","activation_5 (Activation)    (None, 100)               0         \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","hidden3 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","batch_normalization_6 (Batch (None, 100)               400       \n","_________________________________________________________________\n","activation_6 (Activation)    (None, 100)               0         \n","_________________________________________________________________\n","dropout_6 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","hidden4 (Dense)              (None, 50)                5050      \n","_________________________________________________________________\n","batch_normalization_7 (Batch (None, 50)                200       \n","_________________________________________________________________\n","activation_7 (Activation)    (None, 50)                0         \n","_________________________________________________________________\n","dropout_7 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","output (Dense)               (None, 10)                510       \n","=================================================================\n","Total params: 244,344\n","Trainable params: 243,332\n","Non-trainable params: 1,012\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nJD2Ufs_RAFP"},"source":["5~6분 소요"]},{"cell_type":"code","metadata":{"id":"s9YVEhELRAFP","executionInfo":{"status":"ok","timestamp":1603288142212,"user_tz":-540,"elapsed":2199,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["from tensorflow.keras.callbacks import EarlyStopping"],"execution_count":55,"outputs":[]},{"cell_type":"code","metadata":{"id":"HxAiYlqQRAFR","executionInfo":{"status":"ok","timestamp":1603288602412,"user_tz":-540,"elapsed":462392,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"12f8117e-d5f1-458d-beab-7833ee74f5e9","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["early_stopping_cb = EarlyStopping(patience=3, monitor='val_loss',\n","                                  restore_best_weights=True)\n","\n","history = model.fit(x_train, y_train,\n","                    epochs = 200,\n","                    batch_size = 256,\n","                    shuffle=True,\n","                    validation_data=(x_val, y_val),\n","                    callbacks=[early_stopping_cb])"],"execution_count":56,"outputs":[{"output_type":"stream","text":["Epoch 1/200\n","165/165 [==============================] - 3s 16ms/step - loss: 2.6156 - accuracy: 0.1312 - val_loss: 1.9536 - val_accuracy: 0.4722\n","Epoch 2/200\n","165/165 [==============================] - 2s 13ms/step - loss: 2.2186 - accuracy: 0.2061 - val_loss: 1.6538 - val_accuracy: 0.5922\n","Epoch 3/200\n","165/165 [==============================] - 4s 22ms/step - loss: 1.9847 - accuracy: 0.2745 - val_loss: 1.4737 - val_accuracy: 0.6112\n","Epoch 4/200\n","165/165 [==============================] - 4s 23ms/step - loss: 1.8169 - accuracy: 0.3302 - val_loss: 1.3484 - val_accuracy: 0.6314\n","Epoch 5/200\n","165/165 [==============================] - 3s 17ms/step - loss: 1.6970 - accuracy: 0.3675 - val_loss: 1.2488 - val_accuracy: 0.6538\n","Epoch 6/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.5957 - accuracy: 0.4040 - val_loss: 1.1679 - val_accuracy: 0.6672\n","Epoch 7/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.5103 - accuracy: 0.4342 - val_loss: 1.0989 - val_accuracy: 0.6783\n","Epoch 8/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.4445 - accuracy: 0.4552 - val_loss: 1.0312 - val_accuracy: 0.6963\n","Epoch 9/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.3857 - accuracy: 0.4779 - val_loss: 0.9842 - val_accuracy: 0.6887\n","Epoch 10/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.3280 - accuracy: 0.5032 - val_loss: 0.9433 - val_accuracy: 0.6976\n","Epoch 11/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.2849 - accuracy: 0.5133 - val_loss: 0.9064 - val_accuracy: 0.7064\n","Epoch 12/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.2509 - accuracy: 0.5283 - val_loss: 0.8748 - val_accuracy: 0.7174\n","Epoch 13/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.2181 - accuracy: 0.5379 - val_loss: 0.8464 - val_accuracy: 0.7218\n","Epoch 14/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.1897 - accuracy: 0.5464 - val_loss: 0.8249 - val_accuracy: 0.7249\n","Epoch 15/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.1613 - accuracy: 0.5589 - val_loss: 0.8020 - val_accuracy: 0.7333\n","Epoch 16/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.1312 - accuracy: 0.5685 - val_loss: 0.7923 - val_accuracy: 0.7299\n","Epoch 17/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.1171 - accuracy: 0.5767 - val_loss: 0.7748 - val_accuracy: 0.7446\n","Epoch 18/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.0996 - accuracy: 0.5814 - val_loss: 0.7619 - val_accuracy: 0.7409\n","Epoch 19/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.0764 - accuracy: 0.5909 - val_loss: 0.7487 - val_accuracy: 0.7451\n","Epoch 20/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.0634 - accuracy: 0.5951 - val_loss: 0.7439 - val_accuracy: 0.7479\n","Epoch 21/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.0462 - accuracy: 0.6035 - val_loss: 0.7297 - val_accuracy: 0.7506\n","Epoch 22/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.0359 - accuracy: 0.6079 - val_loss: 0.7192 - val_accuracy: 0.7470\n","Epoch 23/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.0220 - accuracy: 0.6139 - val_loss: 0.7099 - val_accuracy: 0.7512\n","Epoch 24/200\n","165/165 [==============================] - 2s 14ms/step - loss: 1.0065 - accuracy: 0.6209 - val_loss: 0.7006 - val_accuracy: 0.7532\n","Epoch 25/200\n","165/165 [==============================] - 2s 13ms/step - loss: 1.0000 - accuracy: 0.6212 - val_loss: 0.6961 - val_accuracy: 0.7562\n","Epoch 26/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9864 - accuracy: 0.6274 - val_loss: 0.6867 - val_accuracy: 0.7537\n","Epoch 27/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.9791 - accuracy: 0.6322 - val_loss: 0.6779 - val_accuracy: 0.7604\n","Epoch 28/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9685 - accuracy: 0.6361 - val_loss: 0.6713 - val_accuracy: 0.7629\n","Epoch 29/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9590 - accuracy: 0.6408 - val_loss: 0.6643 - val_accuracy: 0.7655\n","Epoch 30/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9481 - accuracy: 0.6449 - val_loss: 0.6604 - val_accuracy: 0.7577\n","Epoch 31/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9418 - accuracy: 0.6484 - val_loss: 0.6514 - val_accuracy: 0.7755\n","Epoch 32/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9364 - accuracy: 0.6510 - val_loss: 0.6471 - val_accuracy: 0.7639\n","Epoch 33/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9222 - accuracy: 0.6560 - val_loss: 0.6414 - val_accuracy: 0.7729\n","Epoch 34/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9214 - accuracy: 0.6570 - val_loss: 0.6361 - val_accuracy: 0.7697\n","Epoch 35/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.9082 - accuracy: 0.6619 - val_loss: 0.6311 - val_accuracy: 0.7736\n","Epoch 36/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.9145 - accuracy: 0.6599 - val_loss: 0.6259 - val_accuracy: 0.7784\n","Epoch 37/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8976 - accuracy: 0.6664 - val_loss: 0.6226 - val_accuracy: 0.7734\n","Epoch 38/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8948 - accuracy: 0.6666 - val_loss: 0.6181 - val_accuracy: 0.7784\n","Epoch 39/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8859 - accuracy: 0.6714 - val_loss: 0.6151 - val_accuracy: 0.7740\n","Epoch 40/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8840 - accuracy: 0.6726 - val_loss: 0.6091 - val_accuracy: 0.7767\n","Epoch 41/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8761 - accuracy: 0.6771 - val_loss: 0.6050 - val_accuracy: 0.7811\n","Epoch 42/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8708 - accuracy: 0.6787 - val_loss: 0.6011 - val_accuracy: 0.7828\n","Epoch 43/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8640 - accuracy: 0.6817 - val_loss: 0.5974 - val_accuracy: 0.7839\n","Epoch 44/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8554 - accuracy: 0.6856 - val_loss: 0.6030 - val_accuracy: 0.7767\n","Epoch 45/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8580 - accuracy: 0.6870 - val_loss: 0.5872 - val_accuracy: 0.7884\n","Epoch 46/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8511 - accuracy: 0.6892 - val_loss: 0.5876 - val_accuracy: 0.7846\n","Epoch 47/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8492 - accuracy: 0.6899 - val_loss: 0.5819 - val_accuracy: 0.7881\n","Epoch 48/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8427 - accuracy: 0.6925 - val_loss: 0.5809 - val_accuracy: 0.7848\n","Epoch 49/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8314 - accuracy: 0.6949 - val_loss: 0.5760 - val_accuracy: 0.7879\n","Epoch 50/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8273 - accuracy: 0.6968 - val_loss: 0.5728 - val_accuracy: 0.7896\n","Epoch 51/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8317 - accuracy: 0.6965 - val_loss: 0.5644 - val_accuracy: 0.7957\n","Epoch 52/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8114 - accuracy: 0.7042 - val_loss: 0.5632 - val_accuracy: 0.7945\n","Epoch 53/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8156 - accuracy: 0.7049 - val_loss: 0.5674 - val_accuracy: 0.7917\n","Epoch 54/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8130 - accuracy: 0.7064 - val_loss: 0.5581 - val_accuracy: 0.7961\n","Epoch 55/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8133 - accuracy: 0.7033 - val_loss: 0.5557 - val_accuracy: 0.7974\n","Epoch 56/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8085 - accuracy: 0.7078 - val_loss: 0.5547 - val_accuracy: 0.7969\n","Epoch 57/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.8051 - accuracy: 0.7090 - val_loss: 0.5545 - val_accuracy: 0.7938\n","Epoch 58/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7923 - accuracy: 0.7138 - val_loss: 0.5492 - val_accuracy: 0.7965\n","Epoch 59/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.8010 - accuracy: 0.7132 - val_loss: 0.5452 - val_accuracy: 0.7992\n","Epoch 60/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7822 - accuracy: 0.7189 - val_loss: 0.5445 - val_accuracy: 0.7987\n","Epoch 61/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7845 - accuracy: 0.7184 - val_loss: 0.5429 - val_accuracy: 0.7981\n","Epoch 62/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7833 - accuracy: 0.7195 - val_loss: 0.5373 - val_accuracy: 0.8033\n","Epoch 63/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7826 - accuracy: 0.7207 - val_loss: 0.5367 - val_accuracy: 0.8023\n","Epoch 64/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7804 - accuracy: 0.7207 - val_loss: 0.5327 - val_accuracy: 0.8056\n","Epoch 65/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7807 - accuracy: 0.7195 - val_loss: 0.5315 - val_accuracy: 0.8058\n","Epoch 66/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7747 - accuracy: 0.7250 - val_loss: 0.5308 - val_accuracy: 0.8049\n","Epoch 67/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7667 - accuracy: 0.7272 - val_loss: 0.5291 - val_accuracy: 0.8038\n","Epoch 68/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7652 - accuracy: 0.7265 - val_loss: 0.5234 - val_accuracy: 0.8086\n","Epoch 69/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7658 - accuracy: 0.7270 - val_loss: 0.5249 - val_accuracy: 0.8074\n","Epoch 70/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7582 - accuracy: 0.7306 - val_loss: 0.5217 - val_accuracy: 0.8082\n","Epoch 71/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7613 - accuracy: 0.7281 - val_loss: 0.5243 - val_accuracy: 0.8067\n","Epoch 72/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7534 - accuracy: 0.7322 - val_loss: 0.5210 - val_accuracy: 0.8077\n","Epoch 73/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7497 - accuracy: 0.7347 - val_loss: 0.5161 - val_accuracy: 0.8123\n","Epoch 74/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7456 - accuracy: 0.7363 - val_loss: 0.5130 - val_accuracy: 0.8134\n","Epoch 75/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7445 - accuracy: 0.7355 - val_loss: 0.5107 - val_accuracy: 0.8143\n","Epoch 76/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7441 - accuracy: 0.7357 - val_loss: 0.5106 - val_accuracy: 0.8142\n","Epoch 77/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7381 - accuracy: 0.7369 - val_loss: 0.5078 - val_accuracy: 0.8155\n","Epoch 78/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7429 - accuracy: 0.7360 - val_loss: 0.5054 - val_accuracy: 0.8188\n","Epoch 79/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7352 - accuracy: 0.7427 - val_loss: 0.5056 - val_accuracy: 0.8138\n","Epoch 80/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7322 - accuracy: 0.7419 - val_loss: 0.5039 - val_accuracy: 0.8166\n","Epoch 81/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7315 - accuracy: 0.7431 - val_loss: 0.5011 - val_accuracy: 0.8187\n","Epoch 82/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7307 - accuracy: 0.7443 - val_loss: 0.5017 - val_accuracy: 0.8172\n","Epoch 83/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7241 - accuracy: 0.7444 - val_loss: 0.5013 - val_accuracy: 0.8197\n","Epoch 84/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7250 - accuracy: 0.7463 - val_loss: 0.4963 - val_accuracy: 0.8223\n","Epoch 85/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7231 - accuracy: 0.7479 - val_loss: 0.4939 - val_accuracy: 0.8231\n","Epoch 86/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7176 - accuracy: 0.7504 - val_loss: 0.4939 - val_accuracy: 0.8228\n","Epoch 87/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7223 - accuracy: 0.7481 - val_loss: 0.4942 - val_accuracy: 0.8223\n","Epoch 88/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7149 - accuracy: 0.7501 - val_loss: 0.4909 - val_accuracy: 0.8256\n","Epoch 89/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7109 - accuracy: 0.7520 - val_loss: 0.4890 - val_accuracy: 0.8268\n","Epoch 90/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7057 - accuracy: 0.7531 - val_loss: 0.4883 - val_accuracy: 0.8291\n","Epoch 91/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7136 - accuracy: 0.7520 - val_loss: 0.4859 - val_accuracy: 0.8279\n","Epoch 92/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7079 - accuracy: 0.7550 - val_loss: 0.4842 - val_accuracy: 0.8297\n","Epoch 93/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7025 - accuracy: 0.7560 - val_loss: 0.4838 - val_accuracy: 0.8296\n","Epoch 94/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.7049 - accuracy: 0.7555 - val_loss: 0.4823 - val_accuracy: 0.8330\n","Epoch 95/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6921 - accuracy: 0.7598 - val_loss: 0.4817 - val_accuracy: 0.8296\n","Epoch 96/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.7005 - accuracy: 0.7596 - val_loss: 0.4797 - val_accuracy: 0.8348\n","Epoch 97/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6963 - accuracy: 0.7585 - val_loss: 0.4811 - val_accuracy: 0.8336\n","Epoch 98/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6948 - accuracy: 0.7595 - val_loss: 0.4760 - val_accuracy: 0.8337\n","Epoch 99/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6925 - accuracy: 0.7608 - val_loss: 0.4760 - val_accuracy: 0.8348\n","Epoch 100/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6919 - accuracy: 0.7644 - val_loss: 0.4748 - val_accuracy: 0.8359\n","Epoch 101/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6894 - accuracy: 0.7612 - val_loss: 0.4708 - val_accuracy: 0.8364\n","Epoch 102/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6906 - accuracy: 0.7628 - val_loss: 0.4707 - val_accuracy: 0.8363\n","Epoch 103/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6836 - accuracy: 0.7616 - val_loss: 0.4697 - val_accuracy: 0.8377\n","Epoch 104/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6878 - accuracy: 0.7643 - val_loss: 0.4689 - val_accuracy: 0.8381\n","Epoch 105/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6829 - accuracy: 0.7674 - val_loss: 0.4687 - val_accuracy: 0.8386\n","Epoch 106/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6839 - accuracy: 0.7662 - val_loss: 0.4678 - val_accuracy: 0.8376\n","Epoch 107/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6782 - accuracy: 0.7671 - val_loss: 0.4642 - val_accuracy: 0.8393\n","Epoch 108/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6787 - accuracy: 0.7645 - val_loss: 0.4655 - val_accuracy: 0.8370\n","Epoch 109/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6736 - accuracy: 0.7705 - val_loss: 0.4631 - val_accuracy: 0.8409\n","Epoch 110/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6735 - accuracy: 0.7693 - val_loss: 0.4634 - val_accuracy: 0.8394\n","Epoch 111/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6688 - accuracy: 0.7699 - val_loss: 0.4614 - val_accuracy: 0.8414\n","Epoch 112/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6719 - accuracy: 0.7722 - val_loss: 0.4640 - val_accuracy: 0.8368\n","Epoch 113/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6674 - accuracy: 0.7730 - val_loss: 0.4583 - val_accuracy: 0.8423\n","Epoch 114/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6700 - accuracy: 0.7719 - val_loss: 0.4563 - val_accuracy: 0.8436\n","Epoch 115/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6646 - accuracy: 0.7743 - val_loss: 0.4568 - val_accuracy: 0.8439\n","Epoch 116/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.6636 - accuracy: 0.7718 - val_loss: 0.4559 - val_accuracy: 0.8441\n","Epoch 117/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6588 - accuracy: 0.7766 - val_loss: 0.4550 - val_accuracy: 0.8435\n","Epoch 118/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6569 - accuracy: 0.7770 - val_loss: 0.4539 - val_accuracy: 0.8451\n","Epoch 119/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6591 - accuracy: 0.7757 - val_loss: 0.4523 - val_accuracy: 0.8459\n","Epoch 120/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6622 - accuracy: 0.7766 - val_loss: 0.4525 - val_accuracy: 0.8460\n","Epoch 121/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6543 - accuracy: 0.7802 - val_loss: 0.4511 - val_accuracy: 0.8458\n","Epoch 122/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6518 - accuracy: 0.7792 - val_loss: 0.4500 - val_accuracy: 0.8463\n","Epoch 123/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6495 - accuracy: 0.7817 - val_loss: 0.4491 - val_accuracy: 0.8470\n","Epoch 124/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6518 - accuracy: 0.7794 - val_loss: 0.4483 - val_accuracy: 0.8461\n","Epoch 125/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6514 - accuracy: 0.7800 - val_loss: 0.4463 - val_accuracy: 0.8481\n","Epoch 126/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6557 - accuracy: 0.7799 - val_loss: 0.4456 - val_accuracy: 0.8483\n","Epoch 127/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6530 - accuracy: 0.7800 - val_loss: 0.4464 - val_accuracy: 0.8493\n","Epoch 128/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6459 - accuracy: 0.7814 - val_loss: 0.4455 - val_accuracy: 0.8483\n","Epoch 129/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6424 - accuracy: 0.7818 - val_loss: 0.4451 - val_accuracy: 0.8488\n","Epoch 130/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6400 - accuracy: 0.7850 - val_loss: 0.4439 - val_accuracy: 0.8487\n","Epoch 131/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6410 - accuracy: 0.7828 - val_loss: 0.4426 - val_accuracy: 0.8506\n","Epoch 132/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6403 - accuracy: 0.7852 - val_loss: 0.4408 - val_accuracy: 0.8502\n","Epoch 133/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6359 - accuracy: 0.7869 - val_loss: 0.4395 - val_accuracy: 0.8490\n","Epoch 134/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6365 - accuracy: 0.7862 - val_loss: 0.4403 - val_accuracy: 0.8512\n","Epoch 135/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6343 - accuracy: 0.7845 - val_loss: 0.4391 - val_accuracy: 0.8514\n","Epoch 136/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6334 - accuracy: 0.7855 - val_loss: 0.4388 - val_accuracy: 0.8517\n","Epoch 137/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6370 - accuracy: 0.7858 - val_loss: 0.4370 - val_accuracy: 0.8517\n","Epoch 138/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6359 - accuracy: 0.7856 - val_loss: 0.4367 - val_accuracy: 0.8512\n","Epoch 139/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6299 - accuracy: 0.7882 - val_loss: 0.4362 - val_accuracy: 0.8509\n","Epoch 140/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6288 - accuracy: 0.7880 - val_loss: 0.4355 - val_accuracy: 0.8509\n","Epoch 141/200\n","165/165 [==============================] - 2s 13ms/step - loss: 0.6266 - accuracy: 0.7893 - val_loss: 0.4334 - val_accuracy: 0.8523\n","Epoch 142/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6232 - accuracy: 0.7917 - val_loss: 0.4338 - val_accuracy: 0.8521\n","Epoch 143/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6225 - accuracy: 0.7918 - val_loss: 0.4332 - val_accuracy: 0.8523\n","Epoch 144/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6261 - accuracy: 0.7908 - val_loss: 0.4321 - val_accuracy: 0.8539\n","Epoch 145/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6311 - accuracy: 0.7894 - val_loss: 0.4331 - val_accuracy: 0.8534\n","Epoch 146/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6211 - accuracy: 0.7932 - val_loss: 0.4314 - val_accuracy: 0.8532\n","Epoch 147/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6228 - accuracy: 0.7899 - val_loss: 0.4360 - val_accuracy: 0.8497\n","Epoch 148/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6191 - accuracy: 0.7939 - val_loss: 0.4300 - val_accuracy: 0.8542\n","Epoch 149/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6114 - accuracy: 0.7962 - val_loss: 0.4311 - val_accuracy: 0.8542\n","Epoch 150/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6196 - accuracy: 0.7938 - val_loss: 0.4282 - val_accuracy: 0.8556\n","Epoch 151/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6145 - accuracy: 0.7943 - val_loss: 0.4279 - val_accuracy: 0.8558\n","Epoch 152/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6140 - accuracy: 0.7956 - val_loss: 0.4276 - val_accuracy: 0.8541\n","Epoch 153/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6121 - accuracy: 0.7961 - val_loss: 0.4282 - val_accuracy: 0.8542\n","Epoch 154/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6150 - accuracy: 0.7964 - val_loss: 0.4265 - val_accuracy: 0.8550\n","Epoch 155/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6053 - accuracy: 0.7980 - val_loss: 0.4262 - val_accuracy: 0.8547\n","Epoch 156/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6088 - accuracy: 0.7959 - val_loss: 0.4255 - val_accuracy: 0.8539\n","Epoch 157/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6156 - accuracy: 0.7969 - val_loss: 0.4248 - val_accuracy: 0.8547\n","Epoch 158/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6047 - accuracy: 0.7989 - val_loss: 0.4238 - val_accuracy: 0.8567\n","Epoch 159/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6055 - accuracy: 0.7998 - val_loss: 0.4229 - val_accuracy: 0.8569\n","Epoch 160/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6076 - accuracy: 0.7968 - val_loss: 0.4235 - val_accuracy: 0.8557\n","Epoch 161/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6049 - accuracy: 0.7976 - val_loss: 0.4219 - val_accuracy: 0.8566\n","Epoch 162/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6038 - accuracy: 0.7982 - val_loss: 0.4234 - val_accuracy: 0.8558\n","Epoch 163/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6002 - accuracy: 0.8011 - val_loss: 0.4209 - val_accuracy: 0.8574\n","Epoch 164/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5994 - accuracy: 0.7993 - val_loss: 0.4211 - val_accuracy: 0.8564\n","Epoch 165/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6022 - accuracy: 0.8005 - val_loss: 0.4191 - val_accuracy: 0.8567\n","Epoch 166/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5945 - accuracy: 0.8035 - val_loss: 0.4189 - val_accuracy: 0.8573\n","Epoch 167/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5924 - accuracy: 0.8047 - val_loss: 0.4190 - val_accuracy: 0.8576\n","Epoch 168/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.6032 - accuracy: 0.8012 - val_loss: 0.4177 - val_accuracy: 0.8583\n","Epoch 169/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5978 - accuracy: 0.8011 - val_loss: 0.4174 - val_accuracy: 0.8585\n","Epoch 170/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5909 - accuracy: 0.8051 - val_loss: 0.4187 - val_accuracy: 0.8564\n","Epoch 171/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5939 - accuracy: 0.8038 - val_loss: 0.4175 - val_accuracy: 0.8582\n","Epoch 172/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5920 - accuracy: 0.8045 - val_loss: 0.4173 - val_accuracy: 0.8567\n","Epoch 173/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5897 - accuracy: 0.8053 - val_loss: 0.4167 - val_accuracy: 0.8577\n","Epoch 174/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5861 - accuracy: 0.8056 - val_loss: 0.4150 - val_accuracy: 0.8589\n","Epoch 175/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5946 - accuracy: 0.8032 - val_loss: 0.4159 - val_accuracy: 0.8598\n","Epoch 176/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5912 - accuracy: 0.8054 - val_loss: 0.4133 - val_accuracy: 0.8597\n","Epoch 177/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5845 - accuracy: 0.8072 - val_loss: 0.4141 - val_accuracy: 0.8586\n","Epoch 178/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5847 - accuracy: 0.8067 - val_loss: 0.4139 - val_accuracy: 0.8604\n","Epoch 179/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5819 - accuracy: 0.8083 - val_loss: 0.4130 - val_accuracy: 0.8603\n","Epoch 180/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5850 - accuracy: 0.8068 - val_loss: 0.4329 - val_accuracy: 0.8448\n","Epoch 181/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5821 - accuracy: 0.8076 - val_loss: 0.4111 - val_accuracy: 0.8601\n","Epoch 182/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5836 - accuracy: 0.8073 - val_loss: 0.4096 - val_accuracy: 0.8607\n","Epoch 183/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.5837 - accuracy: 0.8072 - val_loss: 0.4093 - val_accuracy: 0.8616\n","Epoch 184/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.5819 - accuracy: 0.8061 - val_loss: 0.4089 - val_accuracy: 0.8622\n","Epoch 185/200\n","165/165 [==============================] - 2s 15ms/step - loss: 0.5848 - accuracy: 0.8053 - val_loss: 0.4091 - val_accuracy: 0.8606\n","Epoch 186/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5824 - accuracy: 0.8080 - val_loss: 0.4102 - val_accuracy: 0.8592\n","Epoch 187/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5772 - accuracy: 0.8093 - val_loss: 0.4080 - val_accuracy: 0.8599\n","Epoch 188/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5744 - accuracy: 0.8101 - val_loss: 0.4080 - val_accuracy: 0.8599\n","Epoch 189/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5807 - accuracy: 0.8080 - val_loss: 0.4070 - val_accuracy: 0.8627\n","Epoch 190/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5743 - accuracy: 0.8103 - val_loss: 0.4069 - val_accuracy: 0.8608\n","Epoch 191/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5717 - accuracy: 0.8109 - val_loss: 0.4049 - val_accuracy: 0.8624\n","Epoch 192/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5718 - accuracy: 0.8120 - val_loss: 0.4055 - val_accuracy: 0.8624\n","Epoch 193/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5729 - accuracy: 0.8130 - val_loss: 0.4047 - val_accuracy: 0.8621\n","Epoch 194/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5756 - accuracy: 0.8115 - val_loss: 0.4047 - val_accuracy: 0.8614\n","Epoch 195/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5714 - accuracy: 0.8152 - val_loss: 0.4046 - val_accuracy: 0.8626\n","Epoch 196/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5670 - accuracy: 0.8136 - val_loss: 0.4033 - val_accuracy: 0.8625\n","Epoch 197/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5733 - accuracy: 0.8142 - val_loss: 0.4031 - val_accuracy: 0.8625\n","Epoch 198/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5699 - accuracy: 0.8108 - val_loss: 0.4030 - val_accuracy: 0.8626\n","Epoch 199/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5655 - accuracy: 0.8132 - val_loss: 0.4026 - val_accuracy: 0.8619\n","Epoch 200/200\n","165/165 [==============================] - 2s 14ms/step - loss: 0.5632 - accuracy: 0.8146 - val_loss: 0.4019 - val_accuracy: 0.8626\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SWMzvJZsRAFT","executionInfo":{"status":"ok","timestamp":1603288602416,"user_tz":-540,"elapsed":462388,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"0b97ffa2-e349-49f8-83c1-4becc32f4ed2","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["history.history.keys()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"DyLeFgiBRAFV"},"source":["### 모델 평가"]},{"cell_type":"code","metadata":{"id":"61sBMk9ORAFV","executionInfo":{"status":"ok","timestamp":1603288603182,"user_tz":-540,"elapsed":463147,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"7f1913de-0b7c-453d-8150-80821ab5a2b5","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["model.evaluate(x_test, y_test, batch_size=100)"],"execution_count":58,"outputs":[{"output_type":"stream","text":["100/100 [==============================] - 0s 3ms/step - loss: 0.4327 - accuracy: 0.8491\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.43265795707702637, 0.8490999937057495]"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"j-EeAGSzRAFW"},"source":["### 결과 확인"]},{"cell_type":"code","metadata":{"id":"UM3zhbIPRAFX","executionInfo":{"status":"ok","timestamp":1603288603182,"user_tz":-540,"elapsed":463140,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"e2b8bf05-0a19-43b7-fb44-4ce09229e104","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["test_img = x_test[0, :, :]\n","print(test_img.shape)"],"execution_count":59,"outputs":[{"output_type":"stream","text":["(28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bLBP9c9gRAFY","executionInfo":{"status":"ok","timestamp":1603288603183,"user_tz":-540,"elapsed":463135,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"f0d031c5-7418-4db1-c9b5-eface8f89df3","colab":{"base_uri":"https://localhost:8080/","height":277}},"source":["plt.title(class_names[y_test[0]])\n","plt.imshow(test_img, cmap='gray')\n","plt.show()"],"execution_count":60,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"GRYtBhlVRAFZ","executionInfo":{"status":"ok","timestamp":1603288603625,"user_tz":-540,"elapsed":463569,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["pred = model.predict(test_img.reshape(-1, 28, 28))"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"id":"X8jx-x5DRAFa","executionInfo":{"status":"ok","timestamp":1603288603626,"user_tz":-540,"elapsed":463562,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"c80d5d59-ee19-48fd-b41b-a65d54a4dbfa","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["pred.shape"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 10)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"WqROt2p-RAFc","executionInfo":{"status":"ok","timestamp":1603288603627,"user_tz":-540,"elapsed":463555,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"856875a7-86a7-4667-afda-3586b9fbbae4","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["pred"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.19826334e-04, 8.27879921e-05, 5.26788317e-05, 1.56620968e-04,\n","        6.94886967e-06, 4.32558209e-02, 1.69998366e-05, 1.27344161e-01,\n","        6.66420965e-04, 8.28297794e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"AHx1hcXxRAFd","executionInfo":{"status":"ok","timestamp":1603288603627,"user_tz":-540,"elapsed":463548,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"56274411-d254-401d-fbbc-b08f59fcf298","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["class_names[np.argmax(pred)]"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' Ankle boot'"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"wjhOH9NlRAFf"},"source":["### Test Batch Dataset"]},{"cell_type":"code","metadata":{"id":"aBxKgGwmRAFf","executionInfo":{"status":"ok","timestamp":1603288603628,"user_tz":-540,"elapsed":463543,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"abca9f26-b631-4c2b-f0c2-b067ea9e229f","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["test_batch = x_test[:32, :, :]\n","test_batch_y = y_test[:32]\n","print(test_batch.shape)"],"execution_count":65,"outputs":[{"output_type":"stream","text":["(32, 28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ASsqpI-LRAFg","executionInfo":{"status":"ok","timestamp":1603288603628,"user_tz":-540,"elapsed":463535,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"679e9609-d800-4d31-eec9-a33d7f80b094","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["preds = model.predict(test_batch)\n","preds.shape"],"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(32, 10)"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"6lkeqm7aRAFh","executionInfo":{"status":"ok","timestamp":1603288603629,"user_tz":-540,"elapsed":463530,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}}},"source":["preds_arg = np.argmax(preds, -1)"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"id":"DEaAYYRrRAFi","executionInfo":{"status":"ok","timestamp":1603288606974,"user_tz":-540,"elapsed":466869,"user":{"displayName":"Seung min Yang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggh6p0khXlZ7IJRTGo-8JTqKaaHhMlpE2ET1kqtYQ=s64","userId":"01177916219728503153"}},"outputId":"14c36335-7c8e-44d7-fa34-e4705c446763","colab":{"base_uri":"https://localhost:8080/","height":603}},"source":["num_rows = 8\n","num_cols = 4\n","num_images = num_rows * num_cols\n","\n","plt.figure(figsize=(16, 10))\n","\n","for idx in range(1, 33, 1):\n","  plt.subplot(num_rows, num_cols, idx)\n","  plt.title(\"Class: {},  True: {}\".format(class_names[preds_arg[idx-1]],\n","                                          class_names[test_batch_y[idx-1]]))\n","  plt.imshow(test_batch[idx-1], cmap='gray')\n","  \n","\n","plt.show()"],"execution_count":68,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x720 with 32 Axes>"]},"metadata":{"tags":[]}}]}]}